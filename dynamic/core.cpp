// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "indexing_suite/map.hpp"

#include "core_headers.hpp"

namespace bp = boost::python;

struct FileFinder_wrapper : FileFinder, bp::wrapper< FileFinder > {

    FileFinder_wrapper(FileFinder const & arg )
    : FileFinder( arg )
      , bp::wrapper< FileFinder >(){
        // copy constructor
        
    }

    FileFinder_wrapper( )
    : FileFinder( )
      , bp::wrapper< FileFinder >(){
        // null constructor
    
    }

    FileFinder_wrapper(::std::string const & rPath, ::RelativeTo::Value relativeTo )
    : FileFinder( rPath, relativeTo )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    FileFinder_wrapper(::std::string const & rLeafName, ::FileFinder const & rParentOrSibling )
    : FileFinder( rLeafName, boost::ref(rParentOrSibling) )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    FileFinder_wrapper(::boost::filesystem::path const & rPath )
    : FileFinder( boost::ref(rPath) )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    virtual void SetPath( ::std::string const & rPath, ::RelativeTo::Value relativeTo ) {
        if( bp::override func_SetPath = this->get_override( "SetPath" ) )
            func_SetPath( rPath, relativeTo );
        else{
            this->FileFinder::SetPath( rPath, relativeTo );
        }
    }
    
    void default_SetPath( ::std::string const & rPath, ::RelativeTo::Value relativeTo ) {
        FileFinder::SetPath( rPath, relativeTo );
    }

    virtual void SetPath( ::std::string const & rLeafName, ::FileFinder const & rParentOrSibling ) {
        if( bp::override func_SetPath = this->get_override( "SetPath" ) )
            func_SetPath( rLeafName, boost::ref(rParentOrSibling) );
        else{
            this->FileFinder::SetPath( rLeafName, boost::ref(rParentOrSibling) );
        }
    }
    
    void default_SetPath( ::std::string const & rLeafName, ::FileFinder const & rParentOrSibling ) {
        FileFinder::SetPath( rLeafName, boost::ref(rParentOrSibling) );
    }

};

BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID( _p_Vec )

struct RandomNumberGenerator_wrapper : RandomNumberGenerator, bp::wrapper< RandomNumberGenerator > {

    RandomNumberGenerator_wrapper( )
    : RandomNumberGenerator( )
      , bp::wrapper< RandomNumberGenerator >(){
        // null constructor
    
    }

};

BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID( _p_Mat )

BOOST_PYTHON_MODULE(_chaste_project_PyChaste_core){
    { //::std::vector< unsigned int >
        typedef bp::class_< std::vector< unsigned int > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< unsigned int > >() );
    }

    bp::class_< std::vector< double > >("vector_less__double__greater_")    
        .def( bp::indexing::vector_suite< std::vector< double > >() );

    bp::class_< std::map< std::string, std::string > >("map_less__std_scope_string_comma__std_scope_string__greater_")    
        .def( bp::indexing::map_suite< std::map< std::string, std::string > >() );

    bp::class_< ChasteBuildInfo >( "ChasteBuildInfo" )    
        .def( 
            "GetBuildInformation"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetBuildInformation ) )    
        .def( 
            "GetBuildTime"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetBuildTime ) )    
        .def( 
            "GetBuilderUnameInfo"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetBuilderUnameInfo ) )    
        .def( 
            "GetCompilerFlags"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetCompilerFlags ) )    
        .def( 
            "GetCompilerType"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetCompilerType ) )    
        .def( 
            "GetCompilerVersion"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetCompilerVersion ) )    
        .def( 
            "GetCurrentTime"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetCurrentTime ) )    
        .def( 
            "GetLicenceText"
            , (::std::string (*)(  ))( &::ChasteBuildInfo::GetLicenceText ) )    
        .def( 
            "GetMajorReleaseNumber"
            , (unsigned int (*)(  ))( &::ChasteBuildInfo::GetMajorReleaseNumber ) )    
        .def( 
            "GetMinorReleaseNumber"
            , (unsigned int (*)(  ))( &::ChasteBuildInfo::GetMinorReleaseNumber ) )    
        .def( 
            "GetProvenanceString"
            , (::std::string (*)(  ))( &::ChasteBuildInfo::GetProvenanceString ) )    
        .def( 
            "GetRevisionNumber"
            , (unsigned int (*)(  ))( &::ChasteBuildInfo::GetRevisionNumber ) )    
        .def( 
            "GetRootDir"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetRootDir ) )    
        .def( 
            "GetVersionString"
            , (::std::string (*)(  ))( &::ChasteBuildInfo::GetVersionString ) )    
        .def( 
            "GetXsdVersion"
            , (char const * (*)(  ))( &::ChasteBuildInfo::GetXsdVersion ) )    
        .def( 
            "IsWorkingCopyModified"
            , (bool (*)(  ))( &::ChasteBuildInfo::IsWorkingCopyModified ) )    
        .def( 
            "rGetProjectVersions"
            , (::std::map< std::string, std::string > const & (*)(  ))( &::ChasteBuildInfo::rGetProjectVersions )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .staticmethod( "GetBuildInformation" )    
        .staticmethod( "GetBuildTime" )    
        .staticmethod( "GetBuilderUnameInfo" )    
        .staticmethod( "GetCompilerFlags" )    
        .staticmethod( "GetCompilerType" )    
        .staticmethod( "GetCompilerVersion" )    
        .staticmethod( "GetCurrentTime" )    
        .staticmethod( "GetLicenceText" )    
        .staticmethod( "GetMajorReleaseNumber" )    
        .staticmethod( "GetMinorReleaseNumber" )    
        .staticmethod( "GetProvenanceString" )    
        .staticmethod( "GetRevisionNumber" )    
        .staticmethod( "GetRootDir" )    
        .staticmethod( "GetVersionString" )    
        .staticmethod( "GetXsdVersion" )    
        .staticmethod( "IsWorkingCopyModified" )    
        .staticmethod( "rGetProjectVersions" );

    { //::RelativeTo
        typedef bp::class_< RelativeTo > RelativeTo_exposer_t;
        RelativeTo_exposer_t RelativeTo_exposer = RelativeTo_exposer_t( "RelativeTo" );
        bp::scope RelativeTo_scope( RelativeTo_exposer );
        bp::enum_< RelativeTo::Value>("Value")
            .value("CWD", RelativeTo::CWD)
            .value("ChasteTestOutput", RelativeTo::ChasteTestOutput)
            .value("ChasteSourceRoot", RelativeTo::ChasteSourceRoot)
            .value("ChasteBuildRoot", RelativeTo::ChasteBuildRoot)
            .value("Absolute", RelativeTo::Absolute)
            .value("AbsoluteOrCwd", RelativeTo::AbsoluteOrCwd)
            .export_values()
            ;
    }

    { //::FileFinder
        typedef bp::class_< FileFinder_wrapper > FileFinder_exposer_t;
        FileFinder_exposer_t FileFinder_exposer = FileFinder_exposer_t( "FileFinder", bp::init< >() );
        bp::scope FileFinder_scope( FileFinder_exposer );
        FileFinder_exposer.def( bp::init< std::string const &, RelativeTo::Value >(( bp::arg("rPath"), bp::arg("relativeTo") )) );
        FileFinder_exposer.def( bp::init< std::string const &, FileFinder const & >(( bp::arg("rLeafName"), bp::arg("rParentOrSibling") )) );
        FileFinder_exposer.def( bp::init< boost::filesystem::path const & >(( bp::arg("rPath") )) );
        bp::implicitly_convertible< boost::filesystem::path const &, FileFinder >();
        { //::FileFinder::CopyTo
        
            typedef ::FileFinder ( ::FileFinder::*CopyTo_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "CopyTo"
                , CopyTo_function_type( &::FileFinder::CopyTo )
                , ( bp::arg("rDest") ) );
        
        }
        { //::FileFinder::DangerousRemove
        
            typedef void ( ::FileFinder::*DangerousRemove_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "DangerousRemove"
                , DangerousRemove_function_type( &::FileFinder::DangerousRemove ) );
        
        }
        { //::FileFinder::Exists
        
            typedef bool ( ::FileFinder::*Exists_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "Exists"
                , Exists_function_type( &::FileFinder::Exists ) );
        
        }
        { //::FileFinder::FakePath
        
            typedef void ( *FakePath_function_type )( ::RelativeTo::Value,::std::string const & );
            
            FileFinder_exposer.def( 
                "FakePath"
                , FakePath_function_type( &::FileFinder::FakePath )
                , ( bp::arg("fakeWhat"), bp::arg("rFakePath") ) );
        
        }
        { //::FileFinder::GetAbsolutePath
        
            typedef ::std::string ( ::FileFinder::*GetAbsolutePath_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetAbsolutePath"
                , GetAbsolutePath_function_type( &::FileFinder::GetAbsolutePath ) );
        
        }
        { //::FileFinder::GetExtension
        
            typedef ::std::string ( ::FileFinder::*GetExtension_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetExtension"
                , GetExtension_function_type( &::FileFinder::GetExtension ) );
        
        }
        { //::FileFinder::GetLeafName
        
            typedef ::std::string ( ::FileFinder::*GetLeafName_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetLeafName"
                , GetLeafName_function_type( &::FileFinder::GetLeafName ) );
        
        }
        { //::FileFinder::GetLeafNameNoExtension
        
            typedef ::std::string ( ::FileFinder::*GetLeafNameNoExtension_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetLeafNameNoExtension"
                , GetLeafNameNoExtension_function_type( &::FileFinder::GetLeafNameNoExtension ) );
        
        }
        { //::FileFinder::GetParent
        
            typedef ::FileFinder ( ::FileFinder::*GetParent_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetParent"
                , GetParent_function_type( &::FileFinder::GetParent ) );
        
        }
        { //::FileFinder::GetRelativePath
        
            typedef ::std::string ( ::FileFinder::*GetRelativePath_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "GetRelativePath"
                , GetRelativePath_function_type( &::FileFinder::GetRelativePath )
                , ( bp::arg("rBasePath") ) );
        
        }
        { //::FileFinder::IsAbsolutePath
        
            typedef bool ( *IsAbsolutePath_function_type )( ::std::string const & );
            
            FileFinder_exposer.def( 
                "IsAbsolutePath"
                , IsAbsolutePath_function_type( &::FileFinder::IsAbsolutePath )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::IsDir
        
            typedef bool ( ::FileFinder::*IsDir_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsDir"
                , IsDir_function_type( &::FileFinder::IsDir ) );
        
        }
        { //::FileFinder::IsEmpty
        
            typedef bool ( ::FileFinder::*IsEmpty_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsEmpty"
                , IsEmpty_function_type( &::FileFinder::IsEmpty ) );
        
        }
        { //::FileFinder::IsFile
        
            typedef bool ( ::FileFinder::*IsFile_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsFile"
                , IsFile_function_type( &::FileFinder::IsFile ) );
        
        }
        { //::FileFinder::IsNewerThan
        
            typedef bool ( ::FileFinder::*IsNewerThan_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "IsNewerThan"
                , IsNewerThan_function_type( &::FileFinder::IsNewerThan )
                , ( bp::arg("rOtherEntity") ) );
        
        }
        { //::FileFinder::IsPathSet
        
            typedef bool ( ::FileFinder::*IsPathSet_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsPathSet"
                , IsPathSet_function_type( &::FileFinder::IsPathSet ) );
        
        }
        { //::FileFinder::Remove
        
            typedef void ( ::FileFinder::*Remove_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "Remove"
                , Remove_function_type( &::FileFinder::Remove ) );
        
        }
        { //::FileFinder::ReplaceSpacesWithUnderscores
        
            typedef void ( *ReplaceSpacesWithUnderscores_function_type )( ::std::string & );
            
            FileFinder_exposer.def( 
                "ReplaceSpacesWithUnderscores"
                , ReplaceSpacesWithUnderscores_function_type( &::FileFinder::ReplaceSpacesWithUnderscores )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::ReplaceUnderscoresWithSpaces
        
            typedef void ( *ReplaceUnderscoresWithSpaces_function_type )( ::std::string & );
            
            FileFinder_exposer.def( 
                "ReplaceUnderscoresWithSpaces"
                , ReplaceUnderscoresWithSpaces_function_type( &::FileFinder::ReplaceUnderscoresWithSpaces )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::SetPath
        
            typedef void ( ::FileFinder::*SetPath_function_type)( ::std::string const &,::RelativeTo::Value ) ;
            typedef void ( FileFinder_wrapper::*default_SetPath_function_type)( ::std::string const &,::RelativeTo::Value ) ;
            
            FileFinder_exposer.def( 
                "SetPath"
                , SetPath_function_type(&::FileFinder::SetPath)
                , default_SetPath_function_type(&FileFinder_wrapper::default_SetPath)
                , ( bp::arg("rPath"), bp::arg("relativeTo") ) );
        
        }
        { //::FileFinder::SetPath
        
            typedef void ( ::FileFinder::*SetPath_function_type)( ::std::string const &,::FileFinder const & ) ;
            typedef void ( FileFinder_wrapper::*default_SetPath_function_type)( ::std::string const &,::FileFinder const & ) ;
            
            FileFinder_exposer.def( 
                "SetPath"
                , SetPath_function_type(&::FileFinder::SetPath)
                , default_SetPath_function_type(&FileFinder_wrapper::default_SetPath)
                , ( bp::arg("rLeafName"), bp::arg("rParentOrSibling") ) );
        
        }
        { //::FileFinder::StopFaking
        
            typedef void ( *StopFaking_function_type )(  );
            
            FileFinder_exposer.def( 
                "StopFaking"
                , StopFaking_function_type( &::FileFinder::StopFaking ) );
        
        }
        FileFinder_exposer.staticmethod( "FakePath" );
        FileFinder_exposer.staticmethod( "IsAbsolutePath" );
        FileFinder_exposer.staticmethod( "ReplaceSpacesWithUnderscores" );
        FileFinder_exposer.staticmethod( "ReplaceUnderscoresWithSpaces" );
        FileFinder_exposer.staticmethod( "StopFaking" );
    }

    { //::OutputFileHandler
        typedef bp::class_< OutputFileHandler, boost::noncopyable > OutputFileHandler_exposer_t;
        OutputFileHandler_exposer_t OutputFileHandler_exposer = OutputFileHandler_exposer_t( "OutputFileHandler", bp::init< std::string const &, bp::optional< bool > >(( bp::arg("rDirectory"), bp::arg("cleanOutputDirectory")=(bool)(true) )) );
        bp::scope OutputFileHandler_scope( OutputFileHandler_exposer );
        bp::implicitly_convertible< std::string const &, OutputFileHandler >();
        OutputFileHandler_exposer.def( bp::init< FileFinder const &, bp::optional< bool > >(( bp::arg("rDirectory"), bp::arg("cleanOutputDirectory")=(bool)(true) )) );
        bp::implicitly_convertible< FileFinder const &, OutputFileHandler >();
        { //::OutputFileHandler::CopyFileTo
        
            typedef ::FileFinder ( ::OutputFileHandler::*CopyFileTo_function_type)( ::FileFinder const & ) const;
            
            OutputFileHandler_exposer.def( 
                "CopyFileTo"
                , CopyFileTo_function_type( &::OutputFileHandler::CopyFileTo )
                , ( bp::arg("rSourceFile") ) );
        
        }
        { //::OutputFileHandler::FindFile
        
            typedef ::FileFinder ( ::OutputFileHandler::*FindFile_function_type)( ::std::string ) const;
            
            OutputFileHandler_exposer.def( 
                "FindFile"
                , FindFile_function_type( &::OutputFileHandler::FindFile )
                , ( bp::arg("leafName") ) );
        
        }
        { //::OutputFileHandler::GetChasteTestOutputDirectory
        
            typedef ::std::string ( *GetChasteTestOutputDirectory_function_type )(  );
            
            OutputFileHandler_exposer.def( 
                "GetChasteTestOutputDirectory"
                , GetChasteTestOutputDirectory_function_type( &::OutputFileHandler::GetChasteTestOutputDirectory ) );
        
        }
        { //::OutputFileHandler::GetOutputDirectoryFullPath
        
            typedef ::std::string ( ::OutputFileHandler::*GetOutputDirectoryFullPath_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "GetOutputDirectoryFullPath"
                , GetOutputDirectoryFullPath_function_type( &::OutputFileHandler::GetOutputDirectoryFullPath ) );
        
        }
        { //::OutputFileHandler::GetRelativePath
        
            typedef ::std::string ( ::OutputFileHandler::*GetRelativePath_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "GetRelativePath"
                , GetRelativePath_function_type( &::OutputFileHandler::GetRelativePath ) );
        
        }
        { //::OutputFileHandler::SetArchiveDirectory
        
            typedef void ( ::OutputFileHandler::*SetArchiveDirectory_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "SetArchiveDirectory"
                , SetArchiveDirectory_function_type( &::OutputFileHandler::SetArchiveDirectory ) );
        
        }
        OutputFileHandler_exposer.def_readonly( "SIG_FILE_NAME", &OutputFileHandler::SIG_FILE_NAME );
        OutputFileHandler_exposer.staticmethod( "GetChasteTestOutputDirectory" );
    }

    bp::class_< PetscTools, boost::noncopyable >( "PetscTools", bp::no_init )    
        .def( 
            "AmMaster"
            , (bool (*)(  ))( &::PetscTools::AmMaster ) )    
        .def( 
            "AmTopMost"
            , (bool (*)(  ))( &::PetscTools::AmTopMost ) )    
        .def( 
            "Barrier"
            , (void (*)( ::std::string const ))( &::PetscTools::Barrier )
            , ( bp::arg("callerId")="" ) )    
        .def( 
            "BeginRoundRobin"
            , (void (*)(  ))( &::PetscTools::BeginRoundRobin ) )    
        .def( 
            "CreateAndSetVec"
            , (::Vec (*)( int,double ))( &::PetscTools::CreateAndSetVec )
            , ( bp::arg("size"), bp::arg("value") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "CreateVec"
            , (::Vec (*)( int,int,bool ))( &::PetscTools::CreateVec )
            , ( bp::arg("size"), bp::arg("localSize")=(int)(-1), bp::arg("ignoreOffProcEntries")=(bool)(true) )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "CreateVec"
            , (::Vec (*)( ::std::vector< double > ))( &::PetscTools::CreateVec )
            , ( bp::arg("data") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "Destroy"
            , (void (*)( ::Vec & ))( &::PetscTools::Destroy )
            , ( bp::arg("rVec") ) )    
        .def( 
            "Destroy"
            , (void (*)( ::Mat & ))( &::PetscTools::Destroy )
            , ( bp::arg("rMat") ) )    
        .def( 
            "DumpPetscObject"
            , (void (*)( ::Mat const &,::std::string const & ))( &::PetscTools::DumpPetscObject )
            , ( bp::arg("rMat"), bp::arg("rOutputFileFullPath") ) )    
        .def( 
            "DumpPetscObject"
            , (void (*)( ::Vec const &,::std::string const & ))( &::PetscTools::DumpPetscObject )
            , ( bp::arg("rVec"), bp::arg("rOutputFileFullPath") ) )    
        .def( 
            "EndRoundRobin"
            , (void (*)(  ))( &::PetscTools::EndRoundRobin ) )    
        .def( 
            "GetMyRank"
            , (unsigned int (*)(  ))( &::PetscTools::GetMyRank ) )    
        .def( 
            "GetNumProcs"
            , (unsigned int (*)(  ))( &::PetscTools::GetNumProcs ) )    
        .def( 
            "HasParMetis"
            , (bool (*)(  ))( &::PetscTools::HasParMetis ) )    
        .def( 
            "IsInitialised"
            , (bool (*)(  ))( &::PetscTools::IsInitialised ) )    
        .def( 
            "IsIsolated"
            , (bool (*)(  ))( &::PetscTools::IsIsolated ) )    
        .def( 
            "IsParallel"
            , (bool (*)(  ))( &::PetscTools::IsParallel ) )    
        .def( 
            "IsSequential"
            , (bool (*)(  ))( &::PetscTools::IsSequential ) )    
        .def( 
            "IsolateProcesses"
            , (void (*)( bool ))( &::PetscTools::IsolateProcesses )
            , ( bp::arg("isolate")=(bool)(true) ) )    
        .def( 
            "ReadPetscObject"
            , (void (*)( ::Mat &,::std::string const &,::Vec ))( &::PetscTools::ReadPetscObject )
            , ( bp::arg("rMat"), bp::arg("rOutputFileFullPath"), bp::arg("rParallelLayout")=__null ) )    
        .def( 
            "ReadPetscObject"
            , (void (*)( ::Vec &,::std::string const &,::Vec ))( &::PetscTools::ReadPetscObject )
            , ( bp::arg("rVec"), bp::arg("rOutputFileFullPath"), bp::arg("rParallelLayout")=__null ) )    
        .def( 
            "ReplicateBool"
            , (bool (*)( bool ))( &::PetscTools::ReplicateBool )
            , ( bp::arg("flag") ) )    
        .def( 
            "ReplicateException"
            , (void (*)( bool ))( &::PetscTools::ReplicateException )
            , ( bp::arg("flag") ) )    
        .def( 
            "ResetCache"
            , (void (*)(  ))( &::PetscTools::ResetCache ) )    
        .def( 
            "SetOption"
            , (void (*)( char const *,char const * ))( &::PetscTools::SetOption )
            , ( bp::arg("pOptionName"), bp::arg("pOptionValue") ) )    
        .def( 
            "SetupMat"
            , (void (*)( ::Mat &,int,int,unsigned int,int,int,bool,bool ))( &::PetscTools::SetupMat )
            , ( bp::arg("rMat"), bp::arg("numRows"), bp::arg("numColumns"), bp::arg("rowPreallocation"), bp::arg("numLocalRows")=(int)(-1), bp::arg("numLocalColumns")=(int)(-1), bp::arg("ignoreOffProcEntries")=(bool)(true), bp::arg("newAllocationError")=(bool)(true) ) )    
        .staticmethod( "AmMaster" )    
        .staticmethod( "AmTopMost" )    
        .staticmethod( "Barrier" )    
        .staticmethod( "BeginRoundRobin" )    
        .staticmethod( "CreateAndSetVec" )    
        .staticmethod( "CreateVec" )    
        .staticmethod( "Destroy" )    
        .staticmethod( "DumpPetscObject" )    
        .staticmethod( "EndRoundRobin" )    
        .staticmethod( "GetMyRank" )    
        .staticmethod( "GetNumProcs" )    
        .staticmethod( "HasParMetis" )    
        .staticmethod( "IsInitialised" )    
        .staticmethod( "IsIsolated" )    
        .staticmethod( "IsParallel" )    
        .staticmethod( "IsSequential" )    
        .staticmethod( "IsolateProcesses" )    
        .staticmethod( "ReadPetscObject" )    
        .staticmethod( "ReplicateBool" )    
        .staticmethod( "ReplicateException" )    
        .staticmethod( "ResetCache" )    
        .staticmethod( "SetOption" )    
        .staticmethod( "SetupMat" );

    bp::class_< RandomNumberGenerator_wrapper, boost::noncopyable >( "RandomNumberGenerator", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "Destroy"
            , (void (*)(  ))( &::RandomNumberGenerator::Destroy ) )    
        .def( 
            "ExponentialRandomDeviate"
            , (double ( ::RandomNumberGenerator::* )( double ))( &::RandomNumberGenerator::ExponentialRandomDeviate )
            , ( bp::arg("scale") ) )    
        .def( 
            "GammaRandomDeviate"
            , (double ( ::RandomNumberGenerator::* )( double,double ))( &::RandomNumberGenerator::GammaRandomDeviate )
            , ( bp::arg("shape"), bp::arg("scale") ) )    
        .def( 
            "Instance"
            , (::RandomNumberGenerator * (*)(  ))( &::RandomNumberGenerator::Instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "NormalRandomDeviate"
            , (double ( ::RandomNumberGenerator::* )( double,double ))( &::RandomNumberGenerator::NormalRandomDeviate )
            , ( bp::arg("mean"), bp::arg("stdDev") ) )    
        .def( 
            "Reseed"
            , (void ( ::RandomNumberGenerator::* )( unsigned int ))( &::RandomNumberGenerator::Reseed )
            , ( bp::arg("seed") ) )    
        .def( 
            "Shuffle"
            , (void ( ::RandomNumberGenerator::* )( unsigned int,::std::vector< unsigned int > & ))( &::RandomNumberGenerator::Shuffle )
            , ( bp::arg("num"), bp::arg("rValues") ) )    
        .def( 
            "StandardNormalRandomDeviate"
            , (double ( ::RandomNumberGenerator::* )(  ))( &::RandomNumberGenerator::StandardNormalRandomDeviate ) )    
        .def( 
            "randMod"
            , (unsigned int ( ::RandomNumberGenerator::* )( unsigned int ))( &::RandomNumberGenerator::randMod )
            , ( bp::arg("base") ) )    
        .def( 
            "ranf"
            , (double ( ::RandomNumberGenerator::* )(  ))( &::RandomNumberGenerator::ranf ) )    
        .staticmethod( "Destroy" )    
        .staticmethod( "Instance" );

    { //::ReplicatableVector
        typedef bp::class_< ReplicatableVector > ReplicatableVector_exposer_t;
        ReplicatableVector_exposer_t ReplicatableVector_exposer = ReplicatableVector_exposer_t( "ReplicatableVector", bp::init< >() );
        bp::scope ReplicatableVector_scope( ReplicatableVector_exposer );
        ReplicatableVector_exposer.def( bp::init< Vec >(( bp::arg("vec") )) );
        bp::implicitly_convertible< Vec, ReplicatableVector >();
        ReplicatableVector_exposer.def( bp::init< unsigned int >(( bp::arg("size") )) );
        bp::implicitly_convertible< unsigned int, ReplicatableVector >();
        { //::ReplicatableVector::GetSize
        
            typedef unsigned int ( ::ReplicatableVector::*GetSize_function_type)(  ) ;
            
            ReplicatableVector_exposer.def( 
                "GetSize"
                , GetSize_function_type( &::ReplicatableVector::GetSize ) );
        
        }
        { //::ReplicatableVector::Replicate
        
            typedef void ( ::ReplicatableVector::*Replicate_function_type)( unsigned int,unsigned int ) ;
            
            ReplicatableVector_exposer.def( 
                "Replicate"
                , Replicate_function_type( &::ReplicatableVector::Replicate )
                , ( bp::arg("lo"), bp::arg("hi") ) );
        
        }
        { //::ReplicatableVector::ReplicatePetscVector
        
            typedef void ( ::ReplicatableVector::*ReplicatePetscVector_function_type)( ::Vec ) ;
            
            ReplicatableVector_exposer.def( 
                "ReplicatePetscVector"
                , ReplicatePetscVector_function_type( &::ReplicatableVector::ReplicatePetscVector )
                , ( bp::arg("vec") ) );
        
        }
        { //::ReplicatableVector::Resize
        
            typedef void ( ::ReplicatableVector::*Resize_function_type)( unsigned int ) ;
            
            ReplicatableVector_exposer.def( 
                "Resize"
                , Resize_function_type( &::ReplicatableVector::Resize )
                , ( bp::arg("size") ) );
        
        }
        { //::ReplicatableVector::operator[]
        
            typedef double & ( ::ReplicatableVector::*__getitem___function_type)( unsigned int ) ;
            
            ReplicatableVector_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::ReplicatableVector::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
    }

    bp::class_< Timer >( "Timer" )    
        .def( 
            "GetElapsedTime"
            , (double (*)(  ))( &::Timer::GetElapsedTime ) )    
        .def( 
            "GetWallTime"
            , (double (*)(  ))( &::Timer::GetWallTime ) )    
        .def( 
            "Print"
            , (void (*)( ::std::string ))( &::Timer::Print )
            , ( bp::arg("message") ) )    
        .def( 
            "PrintAndReset"
            , (void (*)( ::std::string ))( &::Timer::PrintAndReset )
            , ( bp::arg("message") ) )    
        .def( 
            "Reset"
            , (void (*)(  ))( &::Timer::Reset ) )    
        .staticmethod( "GetElapsedTime" )    
        .staticmethod( "GetWallTime" )    
        .staticmethod( "Print" )    
        .staticmethod( "PrintAndReset" )    
        .staticmethod( "Reset" );

    { //::GetPetscMatForWrapper
    
        typedef ::Mat ( *GetPetscMatForWrapper_function_type )(  );
        
        bp::def( 
            "GetPetscMatForWrapper"
            , GetPetscMatForWrapper_function_type( &::GetPetscMatForWrapper )
            , bp::return_value_policy< bp::return_opaque_pointer >() );
    
    }

    { //::Instantiation
    
        typedef int ( *Instantiation_function_type )(  );
        
        bp::def( 
            "Instantiation"
            , Instantiation_function_type( &::Instantiation ) );
    
    }
}
