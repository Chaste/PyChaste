// This file has been generated by Py++.

#include "boost/python.hpp"

#include "/home/grogan/Chaste/projects/PyChaste/dynamic/wrapper_headers/core_headers.hpp"

namespace bp = boost::python;

struct FileFinder_wrapper : FileFinder, bp::wrapper< FileFinder > {

    FileFinder_wrapper(FileFinder const & arg )
    : FileFinder( arg )
      , bp::wrapper< FileFinder >(){
        // copy constructor
        
    }

    FileFinder_wrapper( )
    : FileFinder( )
      , bp::wrapper< FileFinder >(){
        // null constructor
    
    }

    FileFinder_wrapper(::std::string const & rPath, ::RelativeTo::Value relativeTo )
    : FileFinder( rPath, relativeTo )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    FileFinder_wrapper(::std::string const & rLeafName, ::FileFinder const & rParentOrSibling )
    : FileFinder( rLeafName, boost::ref(rParentOrSibling) )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    FileFinder_wrapper(::boost::filesystem::path const & rPath )
    : FileFinder( boost::ref(rPath) )
      , bp::wrapper< FileFinder >(){
        // constructor
    
    }

    virtual void SetPath( ::std::string const & rPath, ::RelativeTo::Value relativeTo ) {
        if( bp::override func_SetPath = this->get_override( "SetPath" ) )
            func_SetPath( rPath, relativeTo );
        else{
            this->FileFinder::SetPath( rPath, relativeTo );
        }
    }
    
    void default_SetPath( ::std::string const & rPath, ::RelativeTo::Value relativeTo ) {
        FileFinder::SetPath( rPath, relativeTo );
    }

    virtual void SetPath( ::std::string const & rLeafName, ::FileFinder const & rParentOrSibling ) {
        if( bp::override func_SetPath = this->get_override( "SetPath" ) )
            func_SetPath( rLeafName, boost::ref(rParentOrSibling) );
        else{
            this->FileFinder::SetPath( rLeafName, boost::ref(rParentOrSibling) );
        }
    }
    
    void default_SetPath( ::std::string const & rLeafName, ::FileFinder const & rParentOrSibling ) {
        FileFinder::SetPath( rLeafName, boost::ref(rParentOrSibling) );
    }

};

BOOST_PYTHON_MODULE(_chaste_project_PyChaste_core){
    { //::RelativeTo
        typedef bp::class_< RelativeTo > RelativeTo_exposer_t;
        RelativeTo_exposer_t RelativeTo_exposer = RelativeTo_exposer_t( "RelativeTo" );
        bp::scope RelativeTo_scope( RelativeTo_exposer );
        bp::enum_< RelativeTo::Value>("Value")
            .value("CWD", RelativeTo::CWD)
            .value("ChasteTestOutput", RelativeTo::ChasteTestOutput)
            .value("ChasteSourceRoot", RelativeTo::ChasteSourceRoot)
            .value("ChasteBuildRoot", RelativeTo::ChasteBuildRoot)
            .value("Absolute", RelativeTo::Absolute)
            .value("AbsoluteOrCwd", RelativeTo::AbsoluteOrCwd)
            .export_values()
            ;
    }

    { //::FileFinder
        typedef bp::class_< FileFinder_wrapper > FileFinder_exposer_t;
        FileFinder_exposer_t FileFinder_exposer = FileFinder_exposer_t( "FileFinder", bp::init< >() );
        bp::scope FileFinder_scope( FileFinder_exposer );
        FileFinder_exposer.def( bp::init< std::string const &, RelativeTo::Value >(( bp::arg("rPath"), bp::arg("relativeTo") )) );
        FileFinder_exposer.def( bp::init< std::string const &, FileFinder const & >(( bp::arg("rLeafName"), bp::arg("rParentOrSibling") )) );
        FileFinder_exposer.def( bp::init< boost::filesystem::path const & >(( bp::arg("rPath") )) );
        bp::implicitly_convertible< boost::filesystem::path const &, FileFinder >();
        { //::FileFinder::CopyTo
        
            typedef ::FileFinder ( ::FileFinder::*CopyTo_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "CopyTo"
                , CopyTo_function_type( &::FileFinder::CopyTo )
                , ( bp::arg("rDest") ) );
        
        }
        { //::FileFinder::DangerousRemove
        
            typedef void ( ::FileFinder::*DangerousRemove_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "DangerousRemove"
                , DangerousRemove_function_type( &::FileFinder::DangerousRemove ) );
        
        }
        { //::FileFinder::Exists
        
            typedef bool ( ::FileFinder::*Exists_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "Exists"
                , Exists_function_type( &::FileFinder::Exists ) );
        
        }
        { //::FileFinder::FakePath
        
            typedef void ( *FakePath_function_type )( ::RelativeTo::Value,::std::string const & );
            
            FileFinder_exposer.def( 
                "FakePath"
                , FakePath_function_type( &::FileFinder::FakePath )
                , ( bp::arg("fakeWhat"), bp::arg("rFakePath") ) );
        
        }
        { //::FileFinder::GetAbsolutePath
        
            typedef ::std::string ( ::FileFinder::*GetAbsolutePath_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetAbsolutePath"
                , GetAbsolutePath_function_type( &::FileFinder::GetAbsolutePath ) );
        
        }
        { //::FileFinder::GetExtension
        
            typedef ::std::string ( ::FileFinder::*GetExtension_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetExtension"
                , GetExtension_function_type( &::FileFinder::GetExtension ) );
        
        }
        { //::FileFinder::GetLeafName
        
            typedef ::std::string ( ::FileFinder::*GetLeafName_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetLeafName"
                , GetLeafName_function_type( &::FileFinder::GetLeafName ) );
        
        }
        { //::FileFinder::GetLeafNameNoExtension
        
            typedef ::std::string ( ::FileFinder::*GetLeafNameNoExtension_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetLeafNameNoExtension"
                , GetLeafNameNoExtension_function_type( &::FileFinder::GetLeafNameNoExtension ) );
        
        }
        { //::FileFinder::GetParent
        
            typedef ::FileFinder ( ::FileFinder::*GetParent_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "GetParent"
                , GetParent_function_type( &::FileFinder::GetParent ) );
        
        }
        { //::FileFinder::GetRelativePath
        
            typedef ::std::string ( ::FileFinder::*GetRelativePath_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "GetRelativePath"
                , GetRelativePath_function_type( &::FileFinder::GetRelativePath )
                , ( bp::arg("rBasePath") ) );
        
        }
        { //::FileFinder::IsAbsolutePath
        
            typedef bool ( *IsAbsolutePath_function_type )( ::std::string const & );
            
            FileFinder_exposer.def( 
                "IsAbsolutePath"
                , IsAbsolutePath_function_type( &::FileFinder::IsAbsolutePath )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::IsDir
        
            typedef bool ( ::FileFinder::*IsDir_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsDir"
                , IsDir_function_type( &::FileFinder::IsDir ) );
        
        }
        { //::FileFinder::IsEmpty
        
            typedef bool ( ::FileFinder::*IsEmpty_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsEmpty"
                , IsEmpty_function_type( &::FileFinder::IsEmpty ) );
        
        }
        { //::FileFinder::IsFile
        
            typedef bool ( ::FileFinder::*IsFile_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsFile"
                , IsFile_function_type( &::FileFinder::IsFile ) );
        
        }
        { //::FileFinder::IsNewerThan
        
            typedef bool ( ::FileFinder::*IsNewerThan_function_type)( ::FileFinder const & ) const;
            
            FileFinder_exposer.def( 
                "IsNewerThan"
                , IsNewerThan_function_type( &::FileFinder::IsNewerThan )
                , ( bp::arg("rOtherEntity") ) );
        
        }
        { //::FileFinder::IsPathSet
        
            typedef bool ( ::FileFinder::*IsPathSet_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "IsPathSet"
                , IsPathSet_function_type( &::FileFinder::IsPathSet ) );
        
        }
        { //::FileFinder::Remove
        
            typedef void ( ::FileFinder::*Remove_function_type)(  ) const;
            
            FileFinder_exposer.def( 
                "Remove"
                , Remove_function_type( &::FileFinder::Remove ) );
        
        }
        { //::FileFinder::ReplaceSpacesWithUnderscores
        
            typedef void ( *ReplaceSpacesWithUnderscores_function_type )( ::std::string & );
            
            FileFinder_exposer.def( 
                "ReplaceSpacesWithUnderscores"
                , ReplaceSpacesWithUnderscores_function_type( &::FileFinder::ReplaceSpacesWithUnderscores )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::ReplaceUnderscoresWithSpaces
        
            typedef void ( *ReplaceUnderscoresWithSpaces_function_type )( ::std::string & );
            
            FileFinder_exposer.def( 
                "ReplaceUnderscoresWithSpaces"
                , ReplaceUnderscoresWithSpaces_function_type( &::FileFinder::ReplaceUnderscoresWithSpaces )
                , ( bp::arg("rPath") ) );
        
        }
        { //::FileFinder::SetPath
        
            typedef void ( ::FileFinder::*SetPath_function_type)( ::std::string const &,::RelativeTo::Value ) ;
            typedef void ( FileFinder_wrapper::*default_SetPath_function_type)( ::std::string const &,::RelativeTo::Value ) ;
            
            FileFinder_exposer.def( 
                "SetPath"
                , SetPath_function_type(&::FileFinder::SetPath)
                , default_SetPath_function_type(&FileFinder_wrapper::default_SetPath)
                , ( bp::arg("rPath"), bp::arg("relativeTo") ) );
        
        }
        { //::FileFinder::SetPath
        
            typedef void ( ::FileFinder::*SetPath_function_type)( ::std::string const &,::FileFinder const & ) ;
            typedef void ( FileFinder_wrapper::*default_SetPath_function_type)( ::std::string const &,::FileFinder const & ) ;
            
            FileFinder_exposer.def( 
                "SetPath"
                , SetPath_function_type(&::FileFinder::SetPath)
                , default_SetPath_function_type(&FileFinder_wrapper::default_SetPath)
                , ( bp::arg("rLeafName"), bp::arg("rParentOrSibling") ) );
        
        }
        { //::FileFinder::StopFaking
        
            typedef void ( *StopFaking_function_type )(  );
            
            FileFinder_exposer.def( 
                "StopFaking"
                , StopFaking_function_type( &::FileFinder::StopFaking ) );
        
        }
        FileFinder_exposer.staticmethod( "FakePath" );
        FileFinder_exposer.staticmethod( "IsAbsolutePath" );
        FileFinder_exposer.staticmethod( "ReplaceSpacesWithUnderscores" );
        FileFinder_exposer.staticmethod( "ReplaceUnderscoresWithSpaces" );
        FileFinder_exposer.staticmethod( "StopFaking" );
    }

    { //::OutputFileHandler
        typedef bp::class_< OutputFileHandler, boost::noncopyable > OutputFileHandler_exposer_t;
        OutputFileHandler_exposer_t OutputFileHandler_exposer = OutputFileHandler_exposer_t( "OutputFileHandler", bp::init< std::string const &, bp::optional< bool > >(( bp::arg("rDirectory"), bp::arg("cleanOutputDirectory")=(bool)(true) )) );
        bp::scope OutputFileHandler_scope( OutputFileHandler_exposer );
        bp::implicitly_convertible< std::string const &, OutputFileHandler >();
        OutputFileHandler_exposer.def( bp::init< FileFinder const &, bp::optional< bool > >(( bp::arg("rDirectory"), bp::arg("cleanOutputDirectory")=(bool)(true) )) );
        bp::implicitly_convertible< FileFinder const &, OutputFileHandler >();
        { //::OutputFileHandler::CopyFileTo
        
            typedef ::FileFinder ( ::OutputFileHandler::*CopyFileTo_function_type)( ::FileFinder const & ) const;
            
            OutputFileHandler_exposer.def( 
                "CopyFileTo"
                , CopyFileTo_function_type( &::OutputFileHandler::CopyFileTo )
                , ( bp::arg("rSourceFile") ) );
        
        }
        { //::OutputFileHandler::FindFile
        
            typedef ::FileFinder ( ::OutputFileHandler::*FindFile_function_type)( ::std::string ) const;
            
            OutputFileHandler_exposer.def( 
                "FindFile"
                , FindFile_function_type( &::OutputFileHandler::FindFile )
                , ( bp::arg("leafName") ) );
        
        }
        { //::OutputFileHandler::GetChasteTestOutputDirectory
        
            typedef ::std::string ( *GetChasteTestOutputDirectory_function_type )(  );
            
            OutputFileHandler_exposer.def( 
                "GetChasteTestOutputDirectory"
                , GetChasteTestOutputDirectory_function_type( &::OutputFileHandler::GetChasteTestOutputDirectory ) );
        
        }
        { //::OutputFileHandler::GetOutputDirectoryFullPath
        
            typedef ::std::string ( ::OutputFileHandler::*GetOutputDirectoryFullPath_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "GetOutputDirectoryFullPath"
                , GetOutputDirectoryFullPath_function_type( &::OutputFileHandler::GetOutputDirectoryFullPath ) );
        
        }
        { //::OutputFileHandler::GetRelativePath
        
            typedef ::std::string ( ::OutputFileHandler::*GetRelativePath_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "GetRelativePath"
                , GetRelativePath_function_type( &::OutputFileHandler::GetRelativePath ) );
        
        }
        { //::OutputFileHandler::SetArchiveDirectory
        
            typedef void ( ::OutputFileHandler::*SetArchiveDirectory_function_type)(  ) const;
            
            OutputFileHandler_exposer.def( 
                "SetArchiveDirectory"
                , SetArchiveDirectory_function_type( &::OutputFileHandler::SetArchiveDirectory ) );
        
        }
        OutputFileHandler_exposer.def_readonly( "SIG_FILE_NAME", &OutputFileHandler::SIG_FILE_NAME );
        OutputFileHandler_exposer.staticmethod( "GetChasteTestOutputDirectory" );
    }
}
