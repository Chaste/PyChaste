// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "classes_to_be_wrapped.hpp"
#include "NodesOnlyMesh2.pypp.hpp"

namespace bp = boost::python;

struct NodesOnlyMesh_less__2__greater__wrapper : NodesOnlyMesh< 2 >, bp::wrapper< NodesOnlyMesh< 2 > > {

    NodesOnlyMesh_less__2__greater__wrapper( )
    : NodesOnlyMesh<2>( )
      , bp::wrapper< NodesOnlyMesh< 2 > >(){
        // null constructor
    
    }

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->NodesOnlyMesh< 2 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 2 > * pNewNode ) {
        return NodesOnlyMesh< 2 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void Clear(  ) {
        if( bp::override func_Clear = this->get_override( "Clear" ) )
            func_Clear(  );
        else{
            this->NodesOnlyMesh< 2 >::Clear(  );
        }
    }
    
    void default_Clear(  ) {
        NodesOnlyMesh< 2 >::Clear( );
    }

    void ClearBoxCollection(  ){
        NodesOnlyMesh< 2 >::ClearBoxCollection(  );
    }

    virtual void ConstructFromMeshReader( ::AbstractMeshReader< 2, 2 > & rMeshReader ) {
        if( bp::override func_ConstructFromMeshReader = this->get_override( "ConstructFromMeshReader" ) )
            func_ConstructFromMeshReader( boost::ref(rMeshReader) );
        else{
            this->NodesOnlyMesh< 2 >::ConstructFromMeshReader( boost::ref(rMeshReader) );
        }
    }
    
    void default_ConstructFromMeshReader( ::AbstractMeshReader< 2, 2 > & rMeshReader ) {
        NodesOnlyMesh< 2 >::ConstructFromMeshReader( boost::ref(rMeshReader) );
    }

    virtual void DeleteNode( unsigned int index ) {
        if( bp::override func_DeleteNode = this->get_override( "DeleteNode" ) )
            func_DeleteNode( index );
        else{
            this->NodesOnlyMesh< 2 >::DeleteNode( index );
        }
    }
    
    void default_DeleteNode( unsigned int index ) {
        NodesOnlyMesh< 2 >::DeleteNode( index );
    }

    ::DistributedBoxCollection< 2 > * GetBoxCollection(  ){
        return NodesOnlyMesh< 2 >::GetBoxCollection(  );
    }

    virtual unsigned int GetMaximumNodeIndex(  ) {
        if( bp::override func_GetMaximumNodeIndex = this->get_override( "GetMaximumNodeIndex" ) )
            return func_GetMaximumNodeIndex(  );
        else{
            return this->NodesOnlyMesh< 2 >::GetMaximumNodeIndex(  );
        }
    }
    
    unsigned int default_GetMaximumNodeIndex(  ) {
        return NodesOnlyMesh< 2 >::GetMaximumNodeIndex( );
    }

    virtual ::Node< 2 > * GetNodeOrHaloNode( unsigned int index ) const  {
        if( bp::override func_GetNodeOrHaloNode = this->get_override( "GetNodeOrHaloNode" ) )
            return func_GetNodeOrHaloNode( index );
        else{
            return this->NodesOnlyMesh< 2 >::GetNodeOrHaloNode( index );
        }
    }
    
    ::Node< 2 > * default_GetNodeOrHaloNode( unsigned int index ) const  {
        return NodesOnlyMesh< 2 >::GetNodeOrHaloNode( index );
    }

    virtual unsigned int GetNumNodes(  ) const  {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->NodesOnlyMesh< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) const  {
        return NodesOnlyMesh< 2 >::GetNumNodes( );
    }

    virtual double GetWidth( unsigned int const & rDimension ) const  {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->NodesOnlyMesh< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) const  {
        return NodesOnlyMesh< 2 >::GetWidth( rDimension );
    }

    virtual void ReMesh( ::NodeMap & rMap ) {
        if( bp::override func_ReMesh = this->get_override( "ReMesh" ) )
            func_ReMesh( boost::ref(rMap) );
        else{
            this->NodesOnlyMesh< 2 >::ReMesh( boost::ref(rMap) );
        }
    }
    
    void default_ReMesh( ::NodeMap & rMap ) {
        NodesOnlyMesh< 2 >::ReMesh( boost::ref(rMap) );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > point, bool concreteMove=false ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, point, concreteMove );
        else{
            this->NodesOnlyMesh< 2 >::SetNode( nodeIndex, point, concreteMove );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > point, bool concreteMove=false ) {
        NodesOnlyMesh< 2 >::SetNode( nodeIndex, point, concreteMove );
    }

    virtual void SetUpBoxCollection( double cutOffLength, ::boost::numeric::ublas::c_vector< double, 4 > domainSize, int numLocalRows=-1, bool isPeriodic=false ){
        if( bp::override func_SetUpBoxCollection = this->get_override( "SetUpBoxCollection" ) )
            func_SetUpBoxCollection( cutOffLength, domainSize, numLocalRows, isPeriodic );
        else{
            this->NodesOnlyMesh< 2 >::SetUpBoxCollection( cutOffLength, domainSize, numLocalRows, isPeriodic );
        }
    }
    
    virtual void default_SetUpBoxCollection( double cutOffLength, ::boost::numeric::ublas::c_vector< double, 4 > domainSize, int numLocalRows=-1, bool isPeriodic=false ){
        NodesOnlyMesh< 2 >::SetUpBoxCollection( cutOffLength, domainSize, numLocalRows, isPeriodic );
    }

    virtual unsigned int SolveNodeMapping( unsigned int index ) const  {
        if( bp::override func_SolveNodeMapping = this->get_override( "SolveNodeMapping" ) )
            return func_SolveNodeMapping( index );
        else{
            return this->NodesOnlyMesh< 2 >::SolveNodeMapping( index );
        }
    }
    
    unsigned int default_SolveNodeMapping( unsigned int index ) const  {
        return NodesOnlyMesh< 2 >::SolveNodeMapping( index );
    }

    ::ChasteCuboid< 2 > CalculateBoundingBox( ::std::vector< Node<2> * > const & rNodes ) const {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( boost::ref(rNodes) );
    }

    virtual ::ChasteCuboid< 2 > CalculateBoundingBox(  ) const  {
        if( bp::override func_CalculateBoundingBox = this->get_override( "CalculateBoundingBox" ) )
            return func_CalculateBoundingBox(  );
        else{
            return this->AbstractMesh< 2, 2 >::CalculateBoundingBox(  );
        }
    }
    
    ::ChasteCuboid< 2 > default_CalculateBoundingBox(  ) const  {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( );
    }

    virtual bool CalculateDesignatedOwnershipOfBoundaryElement( unsigned int faceIndex ) {
        if( bp::override func_CalculateDesignatedOwnershipOfBoundaryElement = this->get_override( "CalculateDesignatedOwnershipOfBoundaryElement" ) )
            return func_CalculateDesignatedOwnershipOfBoundaryElement( faceIndex );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfBoundaryElement( faceIndex );
        }
    }
    
    bool default_CalculateDesignatedOwnershipOfBoundaryElement( unsigned int faceIndex ) {
        return AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfBoundaryElement( faceIndex );
    }

    virtual bool CalculateDesignatedOwnershipOfElement( unsigned int elementIndex ) {
        if( bp::override func_CalculateDesignatedOwnershipOfElement = this->get_override( "CalculateDesignatedOwnershipOfElement" ) )
            return func_CalculateDesignatedOwnershipOfElement( elementIndex );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfElement( elementIndex );
        }
    }
    
    bool default_CalculateDesignatedOwnershipOfElement( unsigned int elementIndex ) {
        return AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfElement( elementIndex );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > CalculateMinMaxEdgeLengths(  ) {
        if( bp::override func_CalculateMinMaxEdgeLengths = this->get_override( "CalculateMinMaxEdgeLengths" ) )
            return func_CalculateMinMaxEdgeLengths(  );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::CalculateMinMaxEdgeLengths(  );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_CalculateMinMaxEdgeLengths(  ) {
        return AbstractTetrahedralMesh< 2, 2 >::CalculateMinMaxEdgeLengths( );
    }

    virtual void ConstructCuboid( unsigned int width, unsigned int height, unsigned int depth ) {
        if( bp::override func_ConstructCuboid = this->get_override( "ConstructCuboid" ) )
            func_ConstructCuboid( width, height, depth );
        else{
            this->AbstractTetrahedralMesh< 2, 2 >::ConstructCuboid( width, height, depth );
        }
    }
    
    void default_ConstructCuboid( unsigned int width, unsigned int height, unsigned int depth ) {
        AbstractTetrahedralMesh< 2, 2 >::ConstructCuboid( width, height, depth );
    }

    virtual void ConstructLinearMesh( unsigned int width ) {
        if( bp::override func_ConstructLinearMesh = this->get_override( "ConstructLinearMesh" ) )
            func_ConstructLinearMesh( width );
        else{
            this->AbstractTetrahedralMesh< 2, 2 >::ConstructLinearMesh( width );
        }
    }
    
    void default_ConstructLinearMesh( unsigned int width ) {
        AbstractTetrahedralMesh< 2, 2 >::ConstructLinearMesh( width );
    }

    virtual void ConstructRectangularMesh( unsigned int width, unsigned int height, bool stagger=true ) {
        if( bp::override func_ConstructRectangularMesh = this->get_override( "ConstructRectangularMesh" ) )
            func_ConstructRectangularMesh( width, height, stagger );
        else{
            this->AbstractTetrahedralMesh< 2, 2 >::ConstructRectangularMesh( width, height, stagger );
        }
    }
    
    void default_ConstructRectangularMesh( unsigned int width, unsigned int height, bool stagger=true ) {
        AbstractTetrahedralMesh< 2, 2 >::ConstructRectangularMesh( width, height, stagger );
    }

    virtual void DeleteElement( unsigned int index ) {
        if( bp::override func_DeleteElement = this->get_override( "DeleteElement" ) )
            func_DeleteElement( index );
        else{
            this->MutableMesh< 2, 2 >::DeleteElement( index );
        }
    }
    
    void default_DeleteElement( unsigned int index ) {
        MutableMesh< 2, 2 >::DeleteElement( index );
    }

    virtual ::DistributedVectorFactory * GetDistributedVectorFactory(  ) {
        if( bp::override func_GetDistributedVectorFactory = this->get_override( "GetDistributedVectorFactory" ) )
            return func_GetDistributedVectorFactory(  );
        else{
            return this->AbstractMesh< 2, 2 >::GetDistributedVectorFactory(  );
        }
    }
    
    ::DistributedVectorFactory * default_GetDistributedVectorFactory(  ) {
        return AbstractMesh< 2, 2 >::GetDistributedVectorFactory( );
    }

    virtual void GetHaloNodeIndices( ::std::vector< unsigned int > & rHaloIndices ) const  {
        if( bp::override func_GetHaloNodeIndices = this->get_override( "GetHaloNodeIndices" ) )
            func_GetHaloNodeIndices( boost::ref(rHaloIndices) );
        else{
            this->AbstractTetrahedralMesh< 2, 2 >::GetHaloNodeIndices( boost::ref(rHaloIndices) );
        }
    }
    
    void default_GetHaloNodeIndices( ::std::vector< unsigned int > & rHaloIndices ) const  {
        AbstractTetrahedralMesh< 2, 2 >::GetHaloNodeIndices( boost::ref(rHaloIndices) );
    }

    virtual void GetInverseJacobianForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rJacobian, double & rJacobianDeterminant, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rInverseJacobian ) const  {
        if( bp::override func_GetInverseJacobianForElement = this->get_override( "GetInverseJacobianForElement" ) )
            func_GetInverseJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant, boost::ref(rInverseJacobian) );
        else{
            this->TetrahedralMesh< 2, 2 >::GetInverseJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant, boost::ref(rInverseJacobian) );
        }
    }
    
    void default_GetInverseJacobianForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rJacobian, double & rJacobianDeterminant, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rInverseJacobian ) const  {
        TetrahedralMesh< 2, 2 >::GetInverseJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant, boost::ref(rInverseJacobian) );
    }

    virtual void GetJacobianForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rJacobian, double & rJacobianDeterminant ) const  {
        if( bp::override func_GetJacobianForElement = this->get_override( "GetJacobianForElement" ) )
            func_GetJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant );
        else{
            this->TetrahedralMesh< 2, 2 >::GetJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant );
        }
    }
    
    void default_GetJacobianForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_matrix< double, 2, 2 > & rJacobian, double & rJacobianDeterminant ) const  {
        TetrahedralMesh< 2, 2 >::GetJacobianForElement( elementIndex, boost::ref(rJacobian), rJacobianDeterminant );
    }

    virtual unsigned int GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        if( bp::override func_GetNearestNodeIndex = this->get_override( "GetNearestNodeIndex" ) )
            return func_GetNearestNodeIndex( boost::ref(rTestPoint) );
        else{
            return this->AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
        }
    }
    
    unsigned int default_GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        return AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
    }

    virtual unsigned int GetNumAllNodes(  ) const  {
        if( bp::override func_GetNumAllNodes = this->get_override( "GetNumAllNodes" ) )
            return func_GetNumAllNodes(  );
        else{
            return this->AbstractMesh< 2, 2 >::GetNumAllNodes(  );
        }
    }
    
    unsigned int default_GetNumAllNodes(  ) const  {
        return AbstractMesh< 2, 2 >::GetNumAllNodes( );
    }

    virtual unsigned int GetNumBoundaryElements(  ) const  {
        if( bp::override func_GetNumBoundaryElements = this->get_override( "GetNumBoundaryElements" ) )
            return func_GetNumBoundaryElements(  );
        else{
            return this->MutableMesh< 2, 2 >::GetNumBoundaryElements(  );
        }
    }
    
    unsigned int default_GetNumBoundaryElements(  ) const  {
        return MutableMesh< 2, 2 >::GetNumBoundaryElements( );
    }

    virtual unsigned int GetNumCableElements(  ) const  {
        if( bp::override func_GetNumCableElements = this->get_override( "GetNumCableElements" ) )
            return func_GetNumCableElements(  );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::GetNumCableElements(  );
        }
    }
    
    unsigned int default_GetNumCableElements(  ) const  {
        return AbstractTetrahedralMesh< 2, 2 >::GetNumCableElements( );
    }

    virtual unsigned int GetNumElements(  ) const  {
        if( bp::override func_GetNumElements = this->get_override( "GetNumElements" ) )
            return func_GetNumElements(  );
        else{
            return this->MutableMesh< 2, 2 >::GetNumElements(  );
        }
    }
    
    unsigned int default_GetNumElements(  ) const  {
        return MutableMesh< 2, 2 >::GetNumElements( );
    }

    virtual unsigned int GetNumLocalBoundaryElements(  ) const  {
        if( bp::override func_GetNumLocalBoundaryElements = this->get_override( "GetNumLocalBoundaryElements" ) )
            return func_GetNumLocalBoundaryElements(  );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::GetNumLocalBoundaryElements(  );
        }
    }
    
    unsigned int default_GetNumLocalBoundaryElements(  ) const  {
        return AbstractTetrahedralMesh< 2, 2 >::GetNumLocalBoundaryElements( );
    }

    virtual unsigned int GetNumLocalElements(  ) const  {
        if( bp::override func_GetNumLocalElements = this->get_override( "GetNumLocalElements" ) )
            return func_GetNumLocalElements(  );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::GetNumLocalElements(  );
        }
    }
    
    unsigned int default_GetNumLocalElements(  ) const  {
        return AbstractTetrahedralMesh< 2, 2 >::GetNumLocalElements( );
    }

    virtual unsigned int GetNumVertices(  ) const  {
        if( bp::override func_GetNumVertices = this->get_override( "GetNumVertices" ) )
            return func_GetNumVertices(  );
        else{
            return this->AbstractTetrahedralMesh< 2, 2 >::GetNumVertices(  );
        }
    }
    
    unsigned int default_GetNumVertices(  ) const  {
        return AbstractTetrahedralMesh< 2, 2 >::GetNumVertices( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationA, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationB ) {
        if( bp::override func_GetVectorFromAtoB = this->get_override( "GetVectorFromAtoB" ) )
            return func_GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
        else{
            return this->AbstractMesh< 2, 2 >::GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationA, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationB ) {
        return AbstractMesh< 2, 2 >::GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
    }

    virtual void GetWeightedDirectionForBoundaryElement( unsigned int elementIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rWeightedDirection, double & rJacobianDeterminant ) const  {
        if( bp::override func_GetWeightedDirectionForBoundaryElement = this->get_override( "GetWeightedDirectionForBoundaryElement" ) )
            func_GetWeightedDirectionForBoundaryElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
        else{
            this->TetrahedralMesh< 2, 2 >::GetWeightedDirectionForBoundaryElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
        }
    }
    
    void default_GetWeightedDirectionForBoundaryElement( unsigned int elementIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rWeightedDirection, double & rJacobianDeterminant ) const  {
        TetrahedralMesh< 2, 2 >::GetWeightedDirectionForBoundaryElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
    }

    virtual void GetWeightedDirectionForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rWeightedDirection, double & rJacobianDeterminant ) const  {
        if( bp::override func_GetWeightedDirectionForElement = this->get_override( "GetWeightedDirectionForElement" ) )
            func_GetWeightedDirectionForElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
        else{
            this->TetrahedralMesh< 2, 2 >::GetWeightedDirectionForElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
        }
    }
    
    void default_GetWeightedDirectionForElement( unsigned int elementIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rWeightedDirection, double & rJacobianDeterminant ) const  {
        TetrahedralMesh< 2, 2 >::GetWeightedDirectionForElement( elementIndex, boost::ref(rWeightedDirection), rJacobianDeterminant );
    }

    virtual void PermuteNodes(  ) {
        if( bp::override func_PermuteNodes = this->get_override( "PermuteNodes" ) )
            func_PermuteNodes(  );
        else{
            this->TetrahedralMesh< 2, 2 >::PermuteNodes(  );
        }
    }
    
    void default_PermuteNodes(  ) {
        TetrahedralMesh< 2, 2 >::PermuteNodes( );
    }

    virtual void ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        if( bp::override func_ReadNodesPerProcessorFile = this->get_override( "ReadNodesPerProcessorFile" ) )
            func_ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        else{
            this->TetrahedralMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        }
    }
    
    void default_ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        TetrahedralMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
    }

    virtual void RefreshJacobianCachedData(  ) {
        if( bp::override func_RefreshJacobianCachedData = this->get_override( "RefreshJacobianCachedData" ) )
            func_RefreshJacobianCachedData(  );
        else{
            this->TetrahedralMesh< 2, 2 >::RefreshJacobianCachedData(  );
        }
    }
    
    void default_RefreshJacobianCachedData(  ) {
        TetrahedralMesh< 2, 2 >::RefreshJacobianCachedData( );
    }

    virtual void RefreshMesh(  ) {
        if( bp::override func_RefreshMesh = this->get_override( "RefreshMesh" ) )
            func_RefreshMesh(  );
        else{
            this->TetrahedralMesh< 2, 2 >::RefreshMesh(  );
        }
    }
    
    void default_RefreshMesh(  ) {
        TetrahedralMesh< 2, 2 >::RefreshMesh( );
    }

    virtual void Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        if( bp::override func_Rotate = this->get_override( "Rotate" ) )
            func_Rotate( rotationMatrix );
        else{
            this->AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
        }
    }
    
    void default_Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
    }

    virtual void Scale( double const xFactor=1., double const yFactor=1., double const zFactor=1. ) {
        if( bp::override func_Scale = this->get_override( "Scale" ) )
            func_Scale( xFactor, yFactor, zFactor );
        else{
            this->AbstractMesh< 2, 2 >::Scale( xFactor, yFactor, zFactor );
        }
    }
    
    void default_Scale( double const xFactor=1., double const yFactor=1., double const zFactor=1. ) {
        AbstractMesh< 2, 2 >::Scale( xFactor, yFactor, zFactor );
    }

    virtual void SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        if( bp::override func_SetDistributedVectorFactory = this->get_override( "SetDistributedVectorFactory" ) )
            func_SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        else{
            this->AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        }
    }
    
    void default_SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
    }

    virtual void SetElementOwnerships(  ){
        if( bp::override func_SetElementOwnerships = this->get_override( "SetElementOwnerships" ) )
            func_SetElementOwnerships(  );
        else{
            this->AbstractTetrahedralMesh< 2, 2 >::SetElementOwnerships(  );
        }
    }
    
    virtual void default_SetElementOwnerships(  ){
        AbstractTetrahedralMesh< 2, 2 >::SetElementOwnerships( );
    }

    virtual unsigned int SolveBoundaryElementMapping( unsigned int index ) const {
        if( bp::override func_SolveBoundaryElementMapping = this->get_override( "SolveBoundaryElementMapping" ) )
            return func_SolveBoundaryElementMapping( index );
        else{
            return this->TetrahedralMesh< 2, 2 >::SolveBoundaryElementMapping( index );
        }
    }
    
    virtual unsigned int default_SolveBoundaryElementMapping( unsigned int index ) const {
        return TetrahedralMesh< 2, 2 >::SolveBoundaryElementMapping( index );
    }

    virtual unsigned int SolveElementMapping( unsigned int index ) const {
        if( bp::override func_SolveElementMapping = this->get_override( "SolveElementMapping" ) )
            return func_SolveElementMapping( index );
        else{
            return this->TetrahedralMesh< 2, 2 >::SolveElementMapping( index );
        }
    }
    
    virtual unsigned int default_SolveElementMapping( unsigned int index ) const {
        return TetrahedralMesh< 2, 2 >::SolveElementMapping( index );
    }

    virtual void Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        if( bp::override func_Translate = this->get_override( "Translate" ) )
            func_Translate( boost::ref(rDisplacement) );
        else{
            this->AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
        }
    }
    
    void default_Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
    }

};

void register_NodesOnlyMesh2_class(){

    bp::class_< NodesOnlyMesh_less__2__greater__wrapper, bp::bases< MutableMesh< 2, 2 > >, boost::noncopyable >( "NodesOnlyMesh2", bp::init< >() )    
        .def( 
            "AddHaloNode"
            , (void ( ::NodesOnlyMesh<2>::* )( ::boost::shared_ptr< Node< 2 > > ))( &::NodesOnlyMesh< 2 >::AddHaloNode )
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "AddHaloNodesToBoxes"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::AddHaloNodesToBoxes ) )    
        .def( 
            "AddMovedNode"
            , (void ( ::NodesOnlyMesh<2>::* )( ::boost::shared_ptr< Node< 2 > > ))( &::NodesOnlyMesh< 2 >::AddMovedNode )
            , ( bp::arg("pMovedNode") ) )    
        .def( 
            "AddNode"
            , (unsigned int ( ::NodesOnlyMesh<2>::* )( ::Node< 2 > * ))(&::NodesOnlyMesh< 2 >::AddNode)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::Node< 2 > * ))(&NodesOnlyMesh_less__2__greater__wrapper::default_AddNode)
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "AddNodesToBoxes"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::AddNodesToBoxes ) )    
        .def( 
            "CalculateBoundaryNodePairs"
            , (void ( ::NodesOnlyMesh<2>::* )( ::std::vector< std::pair<Node<2> *, Node<2> *> > & ))( &::NodesOnlyMesh< 2 >::CalculateBoundaryNodePairs )
            , ( bp::arg("rNodePairs") ) )    
        .def( 
            "CalculateInteriorNodePairs"
            , (void ( ::NodesOnlyMesh<2>::* )( ::std::vector< std::pair<Node<2> *, Node<2> *> > & ))( &::NodesOnlyMesh< 2 >::CalculateInteriorNodePairs )
            , ( bp::arg("rNodePairs") ) )    
        .def( 
            "CalculateNodesOutsideLocalDomain"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::CalculateNodesOutsideLocalDomain ) )    
        .def( 
            "Clear"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))(&::NodesOnlyMesh< 2 >::Clear)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_Clear) )    
        .def( 
            "ClearBoxCollection"
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::ClearBoxCollection) )    
        .def( 
            "ClearHaloNodes"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::ClearHaloNodes ) )    
        .def( 
            "ConstructFromMeshReader"
            , (void ( ::NodesOnlyMesh<2>::* )( ::AbstractMeshReader< 2, 2 > & ))(&::NodesOnlyMesh< 2 >::ConstructFromMeshReader)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::AbstractMeshReader< 2, 2 > & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ConstructFromMeshReader)
            , ( bp::arg("rMeshReader") ) )    
        .def( 
            "ConstructNodesWithoutMesh"
            , (void ( ::NodesOnlyMesh<2>::* )( ::std::vector< Node<2> * > const &,double ))( &::NodesOnlyMesh< 2 >::ConstructNodesWithoutMesh )
            , ( bp::arg("rNodes"), bp::arg("maxInteractionDistance") ) )    
        .def( 
            "ConstructNodesWithoutMesh"
            , (void ( ::NodesOnlyMesh<2>::* )( ::std::vector< boost::shared_ptr<Node<2> > > const &,double ))( &::NodesOnlyMesh< 2 >::ConstructNodesWithoutMesh )
            , ( bp::arg("rNodes"), bp::arg("maxInteractionDistance") ) )    
        .def( 
            "ConstructNodesWithoutMesh"
            , (void ( ::NodesOnlyMesh<2>::* )( ::AbstractMesh< 2, 2 > const &,double ))( &::NodesOnlyMesh< 2 >::ConstructNodesWithoutMesh )
            , ( bp::arg("rGeneratingMesh"), bp::arg("maxInteractionDistance") ) )    
        .def( 
            "DeleteMovedNode"
            , (void ( ::NodesOnlyMesh<2>::* )( unsigned int ))( &::NodesOnlyMesh< 2 >::DeleteMovedNode )
            , ( bp::arg("index") ) )    
        .def( 
            "DeleteNode"
            , (void ( ::NodesOnlyMesh<2>::* )( unsigned int ))(&::NodesOnlyMesh< 2 >::DeleteNode)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_DeleteNode)
            , ( bp::arg("index") ) )    
        .def( 
            "GetBoxCollection"
            , (::DistributedBoxCollection<2> * ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::GetBoxCollection)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetMaximumInteractionDistance"
            , (double ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::GetMaximumInteractionDistance ) )    
        .def( 
            "GetMaximumNodeIndex"
            , (unsigned int ( ::NodesOnlyMesh<2>::* )(  ))(&::NodesOnlyMesh< 2 >::GetMaximumNodeIndex)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_GetMaximumNodeIndex) )    
        .def( 
            "GetNodeOrHaloNode"
            , (::Node< 2 > * ( ::NodesOnlyMesh<2>::* )( unsigned int )const)(&::NodesOnlyMesh< 2 >::GetNodeOrHaloNode)
            , (::Node< 2 > * ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNodeOrHaloNode)
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetNumNodes"
            , (unsigned int ( ::NodesOnlyMesh<2>::* )(  )const)(&::NodesOnlyMesh< 2 >::GetNumNodes)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumNodes) )    
        .def( 
            "GetWidth"
            , (double ( ::NodesOnlyMesh<2>::* )( unsigned int const & )const)(&::NodesOnlyMesh< 2 >::GetWidth)
            , (double ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int const & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetWidth)
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsOwned"
            , (bool ( ::NodesOnlyMesh<2>::* )( ::boost::numeric::ublas::c_vector< double, 2 > & ))( &::NodesOnlyMesh< 2 >::IsOwned )
            , ( bp::arg("location") ) )    
        .def( 
            "LoadBalanceMesh"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::LoadBalanceMesh ) )    
        .def( 
            "ReMesh"
            , (void ( ::NodesOnlyMesh<2>::* )( ::NodeMap & ))(&::NodesOnlyMesh< 2 >::ReMesh)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::NodeMap & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ReMesh)
            , ( bp::arg("rMap") ) )    
        .def( 
            "ResizeBoxCollection"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::ResizeBoxCollection ) )    
        .def( 
            "SetCalculateNodeNeighbours"
            , (void ( ::NodesOnlyMesh<2>::* )( bool ))( &::NodesOnlyMesh< 2 >::SetCalculateNodeNeighbours )
            , ( bp::arg("calculateNodeNeighbours") ) )    
        .def( 
            "SetInitialBoxCollection"
            , (void ( ::NodesOnlyMesh<2>::* )( ::boost::numeric::ublas::c_vector< double, 4 > const,double ))( &::NodesOnlyMesh< 2 >::SetInitialBoxCollection )
            , ( bp::arg("domainSize"), bp::arg("maxInteractionDistance") ) )    
        .def( 
            "SetMaximumInteractionDistance"
            , (void ( ::NodesOnlyMesh<2>::* )( double ))( &::NodesOnlyMesh< 2 >::SetMaximumInteractionDistance )
            , ( bp::arg("maxDistance") ) )    
        .def( 
            "SetMinimumNodeDomainBoundarySeparation"
            , (void ( ::NodesOnlyMesh<2>::* )( double ))( &::NodesOnlyMesh< 2 >::SetMinimumNodeDomainBoundarySeparation )
            , ( bp::arg("separation") ) )    
        .def( 
            "SetNode"
            , (void ( ::NodesOnlyMesh<2>::* )( unsigned int,::ChastePoint< 2 >,bool ))(&::NodesOnlyMesh< 2 >::SetNode)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,::ChastePoint< 2 >,bool ))(&NodesOnlyMesh_less__2__greater__wrapper::default_SetNode)
            , ( bp::arg("nodeIndex"), bp::arg("point"), bp::arg("concreteMove")=(bool)(false) ) )    
        .def( 
            "SetUpBoxCollection"
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( double,::boost::numeric::ublas::c_vector< double, 4 >,int,bool ))(&NodesOnlyMesh_less__2__greater__wrapper::default_SetUpBoxCollection)
            , ( bp::arg("cutOffLength"), bp::arg("domainSize"), bp::arg("numLocalRows")=(int)(-1), bp::arg("isPeriodic")=(bool)(false) ) )    
        .def( 
            "SolveNodeMapping"
            , (unsigned int ( ::NodesOnlyMesh<2>::* )( unsigned int )const)(&::NodesOnlyMesh< 2 >::SolveNodeMapping)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_SolveNodeMapping)
            , ( bp::arg("index") ) )    
        .def( 
            "UpdateBoxCollection"
            , (void ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::UpdateBoxCollection ) )    
        .def( 
            "rGetHaloNodesToSendLeft"
            , (::std::vector< unsigned int > & ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::rGetHaloNodesToSendLeft )
            , bp::return_internal_reference< >() )    
        .def( 
            "rGetHaloNodesToSendRight"
            , (::std::vector< unsigned int > & ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::rGetHaloNodesToSendRight )
            , bp::return_internal_reference< >() )    
        .def( 
            "rGetInitiallyOwnedNodes"
            , (::std::vector< bool > & ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::rGetInitiallyOwnedNodes )
            , bp::return_internal_reference< >() )    
        .def( 
            "rGetNodesToSendLeft"
            , (::std::vector< unsigned int > & ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::rGetNodesToSendLeft )
            , bp::return_internal_reference< >() )    
        .def( 
            "rGetNodesToSendRight"
            , (::std::vector< unsigned int > & ( ::NodesOnlyMesh<2>::* )(  ))( &::NodesOnlyMesh< 2 >::rGetNodesToSendRight )
            , bp::return_internal_reference< >() )    
        .def( 
            "CalculateBoundingBox"
            , (::ChasteCuboid<2> ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::std::vector<Node<2> *, std::allocator<Node<2> *> > const & )const)(&NodesOnlyMesh_less__2__greater__wrapper::CalculateBoundingBox)
            , ( bp::arg("rNodes") ) )    
        .def( 
            "CalculateBoundingBox"
            , (::ChasteCuboid< 2 > ( ::AbstractMesh<2, 2>::* )(  )const)(&::AbstractMesh< 2, 2 >::CalculateBoundingBox)
            , (::ChasteCuboid< 2 > ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_CalculateBoundingBox) )    
        .def( 
            "CalculateDesignatedOwnershipOfBoundaryElement"
            , (bool ( ::AbstractTetrahedralMesh<2, 2>::* )( unsigned int ))(&::AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfBoundaryElement)
            , (bool ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_CalculateDesignatedOwnershipOfBoundaryElement)
            , ( bp::arg("faceIndex") ) )    
        .def( 
            "CalculateDesignatedOwnershipOfElement"
            , (bool ( ::AbstractTetrahedralMesh<2, 2>::* )( unsigned int ))(&::AbstractTetrahedralMesh< 2, 2 >::CalculateDesignatedOwnershipOfElement)
            , (bool ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_CalculateDesignatedOwnershipOfElement)
            , ( bp::arg("elementIndex") ) )    
        .def( 
            "CalculateMinMaxEdgeLengths"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractTetrahedralMesh<2, 2>::* )(  ))(&::AbstractTetrahedralMesh< 2, 2 >::CalculateMinMaxEdgeLengths)
            , (::boost::numeric::ublas::c_vector< double, 2 > ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_CalculateMinMaxEdgeLengths) )    
        .def( 
            "ConstructCuboid"
            , (void ( ::AbstractTetrahedralMesh<2, 2>::* )( unsigned int,unsigned int,unsigned int ))(&::AbstractTetrahedralMesh< 2, 2 >::ConstructCuboid)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,unsigned int,unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ConstructCuboid)
            , ( bp::arg("width"), bp::arg("height"), bp::arg("depth") ) )    
        .def( 
            "ConstructLinearMesh"
            , (void ( ::AbstractTetrahedralMesh<2, 2>::* )( unsigned int ))(&::AbstractTetrahedralMesh< 2, 2 >::ConstructLinearMesh)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ConstructLinearMesh)
            , ( bp::arg("width") ) )    
        .def( 
            "ConstructRectangularMesh"
            , (void ( ::AbstractTetrahedralMesh<2, 2>::* )( unsigned int,unsigned int,bool ))(&::AbstractTetrahedralMesh< 2, 2 >::ConstructRectangularMesh)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,unsigned int,bool ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ConstructRectangularMesh)
            , ( bp::arg("width"), bp::arg("height"), bp::arg("stagger")=(bool)(true) ) )    
        .def( 
            "DeleteElement"
            , (void ( ::MutableMesh<2, 2>::* )( unsigned int ))(&::MutableMesh< 2, 2 >::DeleteElement)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int ))(&NodesOnlyMesh_less__2__greater__wrapper::default_DeleteElement)
            , ( bp::arg("index") ) )    
        .def( 
            "GetDistributedVectorFactory"
            , (::DistributedVectorFactory * ( ::AbstractMesh<2, 2>::* )(  ))(&::AbstractMesh< 2, 2 >::GetDistributedVectorFactory)
            , (::DistributedVectorFactory * ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_GetDistributedVectorFactory)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetHaloNodeIndices"
            , (void ( ::AbstractTetrahedralMesh<2, 2>::* )( ::std::vector< unsigned int > & )const)(&::AbstractTetrahedralMesh< 2, 2 >::GetHaloNodeIndices)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::std::vector< unsigned int > & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetHaloNodeIndices)
            , ( bp::arg("rHaloIndices") ) )    
        .def( 
            "GetInverseJacobianForElement"
            , (void ( ::TetrahedralMesh<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_matrix< double, 2, 2 > &,double &,::boost::numeric::ublas::c_matrix< double, 2, 2 > & )const)(&::TetrahedralMesh< 2, 2 >::GetInverseJacobianForElement)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_matrix< double, 2, 2 > &,double &,::boost::numeric::ublas::c_matrix< double, 2, 2 > & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetInverseJacobianForElement)
            , ( bp::arg("elementIndex"), bp::arg("rJacobian"), bp::arg("rJacobianDeterminant"), bp::arg("rInverseJacobian") ) )    
        .def( 
            "GetJacobianForElement"
            , (void ( ::TetrahedralMesh<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_matrix< double, 2, 2 > &,double & )const)(&::TetrahedralMesh< 2, 2 >::GetJacobianForElement)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_matrix< double, 2, 2 > &,double & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetJacobianForElement)
            , ( bp::arg("elementIndex"), bp::arg("rJacobian"), bp::arg("rJacobianDeterminant") ) )    
        .def( 
            "GetNearestNodeIndex"
            , (unsigned int ( ::AbstractMesh<2, 2>::* )( ::ChastePoint< 2 > const & ))(&::AbstractMesh< 2, 2 >::GetNearestNodeIndex)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::ChastePoint< 2 > const & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNearestNodeIndex)
            , ( bp::arg("rTestPoint") ) )    
        .def( 
            "GetNumAllNodes"
            , (unsigned int ( ::AbstractMesh<2, 2>::* )(  )const)(&::AbstractMesh< 2, 2 >::GetNumAllNodes)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumAllNodes) )    
        .def( 
            "GetNumBoundaryElements"
            , (unsigned int ( ::MutableMesh<2, 2>::* )(  )const)(&::MutableMesh< 2, 2 >::GetNumBoundaryElements)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumBoundaryElements) )    
        .def( 
            "GetNumCableElements"
            , (unsigned int ( ::AbstractTetrahedralMesh<2, 2>::* )(  )const)(&::AbstractTetrahedralMesh< 2, 2 >::GetNumCableElements)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumCableElements) )    
        .def( 
            "GetNumElements"
            , (unsigned int ( ::MutableMesh<2, 2>::* )(  )const)(&::MutableMesh< 2, 2 >::GetNumElements)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumElements) )    
        .def( 
            "GetNumLocalBoundaryElements"
            , (unsigned int ( ::AbstractTetrahedralMesh<2, 2>::* )(  )const)(&::AbstractTetrahedralMesh< 2, 2 >::GetNumLocalBoundaryElements)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumLocalBoundaryElements) )    
        .def( 
            "GetNumLocalElements"
            , (unsigned int ( ::AbstractTetrahedralMesh<2, 2>::* )(  )const)(&::AbstractTetrahedralMesh< 2, 2 >::GetNumLocalElements)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumLocalElements) )    
        .def( 
            "GetNumVertices"
            , (unsigned int ( ::AbstractTetrahedralMesh<2, 2>::* )(  )const)(&::AbstractTetrahedralMesh< 2, 2 >::GetNumVertices)
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )(  )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetNumVertices) )    
        .def( 
            "GetVectorFromAtoB"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractMesh<2, 2>::* )( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ))(&::AbstractMesh< 2, 2 >::GetVectorFromAtoB)
            , (::boost::numeric::ublas::c_vector< double, 2 > ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_GetVectorFromAtoB)
            , ( bp::arg("rLocationA"), bp::arg("rLocationB") ) )    
        .def( 
            "GetWeightedDirectionForBoundaryElement"
            , (void ( ::TetrahedralMesh<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double & )const)(&::TetrahedralMesh< 2, 2 >::GetWeightedDirectionForBoundaryElement)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetWeightedDirectionForBoundaryElement)
            , ( bp::arg("elementIndex"), bp::arg("rWeightedDirection"), bp::arg("rJacobianDeterminant") ) )    
        .def( 
            "GetWeightedDirectionForElement"
            , (void ( ::TetrahedralMesh<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double & )const)(&::TetrahedralMesh< 2, 2 >::GetWeightedDirectionForElement)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double & )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_GetWeightedDirectionForElement)
            , ( bp::arg("elementIndex"), bp::arg("rWeightedDirection"), bp::arg("rJacobianDeterminant") ) )    
        .def( 
            "PermuteNodes"
            , (void ( ::TetrahedralMesh<2, 2>::* )(  ))(&::TetrahedralMesh< 2, 2 >::PermuteNodes)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_PermuteNodes) )    
        .def( 
            "PermuteNodes"
            , (void ( ::TetrahedralMesh<2, 2>::* )( ::std::vector< unsigned int > const & ))( &::TetrahedralMesh< 2, 2 >::PermuteNodes )
            , ( bp::arg("perm") ) )    
        .def( 
            "ReadNodesPerProcessorFile"
            , (void ( ::TetrahedralMesh<2, 2>::* )( ::std::string const & ))(&::TetrahedralMesh< 2, 2 >::ReadNodesPerProcessorFile)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::std::string const & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_ReadNodesPerProcessorFile)
            , ( bp::arg("rNodesPerProcessorFile") ) )    
        .def( 
            "RefreshJacobianCachedData"
            , (void ( ::TetrahedralMesh<2, 2>::* )(  ))(&::TetrahedralMesh< 2, 2 >::RefreshJacobianCachedData)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_RefreshJacobianCachedData) )    
        .def( 
            "RefreshMesh"
            , (void ( ::TetrahedralMesh<2, 2>::* )(  ))(&::TetrahedralMesh< 2, 2 >::RefreshMesh)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_RefreshMesh) )    
        .def( 
            "Rotate"
            , (void ( ::AbstractMesh<2, 2>::* )( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ))(&::AbstractMesh< 2, 2 >::Rotate)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ))(&NodesOnlyMesh_less__2__greater__wrapper::default_Rotate)
            , ( bp::arg("rotationMatrix") ) )    
        .def( 
            "Rotate"
            , (void ( ::AbstractMesh<2, 2>::* )( ::boost::numeric::ublas::c_vector< double, 3 >,double ))( &::AbstractMesh< 2, 2 >::Rotate )
            , ( bp::arg("axis"), bp::arg("angle") ) )    
        .def( 
            "Rotate"
            , (void ( ::AbstractMesh<2, 2>::* )( double ))( &::AbstractMesh< 2, 2 >::Rotate )
            , ( bp::arg("theta") ) )    
        .def( 
            "Scale"
            , (void ( ::AbstractMesh<2, 2>::* )( double const,double const,double const ))(&::AbstractMesh< 2, 2 >::Scale)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( double const,double const,double const ))(&NodesOnlyMesh_less__2__greater__wrapper::default_Scale)
            , ( bp::arg("xFactor")=1., bp::arg("yFactor")=1., bp::arg("zFactor")=1. ) )    
        .def( 
            "SetDistributedVectorFactory"
            , (void ( ::AbstractMesh<2, 2>::* )( ::DistributedVectorFactory * ))(&::AbstractMesh< 2, 2 >::SetDistributedVectorFactory)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::DistributedVectorFactory * ))(&NodesOnlyMesh_less__2__greater__wrapper::default_SetDistributedVectorFactory)
            , ( bp::arg("pFactory") ) )    
        .def( 
            "SetElementOwnerships"
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )(  ))(&NodesOnlyMesh_less__2__greater__wrapper::default_SetElementOwnerships) )    
        .def( 
            "SolveBoundaryElementMapping"
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_SolveBoundaryElementMapping)
            , ( bp::arg("index") ) )    
        .def( 
            "SolveElementMapping"
            , (unsigned int ( NodesOnlyMesh_less__2__greater__wrapper::* )( unsigned int )const)(&NodesOnlyMesh_less__2__greater__wrapper::default_SolveElementMapping)
            , ( bp::arg("index") ) )    
        .def( 
            "Translate"
            , (void ( ::AbstractMesh<2, 2>::* )( ::boost::numeric::ublas::c_vector< double, 2 > const & ))(&::AbstractMesh< 2, 2 >::Translate)
            , (void ( NodesOnlyMesh_less__2__greater__wrapper::* )( ::boost::numeric::ublas::c_vector< double, 2 > const & ))(&NodesOnlyMesh_less__2__greater__wrapper::default_Translate)
            , ( bp::arg("rDisplacement") ) )    
        .def( 
            "Translate"
            , (void ( ::AbstractMesh<2, 2>::* )( double const,double const,double const ))( &::AbstractMesh< 2, 2 >::Translate )
            , ( bp::arg("xMovement")=0., bp::arg("yMovement")=0., bp::arg("zMovement")=0. ) );

}
