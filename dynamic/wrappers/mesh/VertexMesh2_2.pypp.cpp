// This file has been generated by Py++.


/*

Copyright (c) 2005-2016, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "mesh_headers.hpp"
#include "VertexMesh2_2.pypp.hpp"

namespace bp = boost::python;

struct VertexMesh_less__2_comma__2__greater__wrapper : VertexMesh< 2, 2 >, bp::wrapper< VertexMesh< 2, 2 > > {

    VertexMesh_less__2_comma__2__greater__wrapper(::std::vector< Node<2> * > nodes, ::std::vector< VertexElement<2, 2> * > vertexElements )
    : VertexMesh<2, 2>( nodes, vertexElements )
      , bp::wrapper< VertexMesh< 2, 2 > >(){
        // constructor
    
    }

    VertexMesh_less__2_comma__2__greater__wrapper(::std::vector< Node<2> * > nodes, ::std::vector< VertexElement<1, 2> * > faces, ::std::vector< VertexElement<2, 2> * > vertexElements )
    : VertexMesh<2, 2>( nodes, faces, vertexElements )
      , bp::wrapper< VertexMesh< 2, 2 > >(){
        // constructor
    
    }

    VertexMesh_less__2_comma__2__greater__wrapper(::TetrahedralMesh< 2, 2 > & rMesh, bool isPeriodic=false )
    : VertexMesh<2, 2>( boost::ref(rMesh), isPeriodic )
      , bp::wrapper< VertexMesh< 2, 2 > >(){
        // constructor
    
    }

    VertexMesh_less__2_comma__2__greater__wrapper( )
    : VertexMesh<2, 2>( )
      , bp::wrapper< VertexMesh< 2, 2 > >(){
        // null constructor
    
    }

    virtual double CalculateAreaOfFace( ::VertexElement< 1, 2 > * pFace ) {
        if( bp::override func_CalculateAreaOfFace = this->get_override( "CalculateAreaOfFace" ) )
            return func_CalculateAreaOfFace( boost::python::ptr(pFace) );
        else{
            return this->VertexMesh< 2, 2 >::CalculateAreaOfFace( boost::python::ptr(pFace) );
        }
    }
    
    double default_CalculateAreaOfFace( ::VertexElement< 1, 2 > * pFace ) {
        return VertexMesh< 2, 2 >::CalculateAreaOfFace( boost::python::ptr(pFace) );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > CalculateMomentsOfElement( unsigned int index ) {
        if( bp::override func_CalculateMomentsOfElement = this->get_override( "CalculateMomentsOfElement" ) )
            return func_CalculateMomentsOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::CalculateMomentsOfElement( index );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_CalculateMomentsOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::CalculateMomentsOfElement( index );
    }

    virtual void Clear(  ) {
        if( bp::override func_Clear = this->get_override( "Clear" ) )
            func_Clear(  );
        else{
            this->VertexMesh< 2, 2 >::Clear(  );
        }
    }
    
    void default_Clear(  ) {
        VertexMesh< 2, 2 >::Clear( );
    }

    bool ElementIncludesPoint( ::boost::numeric::ublas::c_vector< double, 2 > const & rTestPoint, unsigned int elementIndex ){
        return VertexMesh< 2, 2 >::ElementIncludesPoint( boost::ref(rTestPoint), elementIndex );
    }

    void GenerateVerticesFromElementCircumcentres( ::TetrahedralMesh< 2, 2 > & rMesh ){
        VertexMesh< 2, 2 >::GenerateVerticesFromElementCircumcentres( boost::ref(rMesh) );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetCentroidOfElement( unsigned int index ) {
        if( bp::override func_GetCentroidOfElement = this->get_override( "GetCentroidOfElement" ) )
            return func_GetCentroidOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetCentroidOfElement( index );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetCentroidOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetCentroidOfElement( index );
    }

    unsigned int GetLocalIndexForElementEdgeClosestToPoint( ::boost::numeric::ublas::c_vector< double, 2 > const & rTestPoint, unsigned int elementIndex ){
        return VertexMesh< 2, 2 >::GetLocalIndexForElementEdgeClosestToPoint( boost::ref(rTestPoint), elementIndex );
    }

    virtual unsigned int GetNumElements(  ) const  {
        if( bp::override func_GetNumElements = this->get_override( "GetNumElements" ) )
            return func_GetNumElements(  );
        else{
            return this->VertexMesh< 2, 2 >::GetNumElements(  );
        }
    }
    
    unsigned int default_GetNumElements(  ) const  {
        return VertexMesh< 2, 2 >::GetNumElements( );
    }

    virtual unsigned int GetNumFaces(  ) const  {
        if( bp::override func_GetNumFaces = this->get_override( "GetNumFaces" ) )
            return func_GetNumFaces(  );
        else{
            return this->VertexMesh< 2, 2 >::GetNumFaces(  );
        }
    }
    
    unsigned int default_GetNumFaces(  ) const  {
        return VertexMesh< 2, 2 >::GetNumFaces( );
    }

    virtual unsigned int GetNumNodes(  ) const  {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->VertexMesh< 2, 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) const  {
        return VertexMesh< 2, 2 >::GetNumNodes( );
    }

    virtual double GetSurfaceAreaOfElement( unsigned int index ) {
        if( bp::override func_GetSurfaceAreaOfElement = this->get_override( "GetSurfaceAreaOfElement" ) )
            return func_GetSurfaceAreaOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetSurfaceAreaOfElement( index );
        }
    }
    
    double default_GetSurfaceAreaOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetSurfaceAreaOfElement( index );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationA, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationB ) {
        if( bp::override func_GetVectorFromAtoB = this->get_override( "GetVectorFromAtoB" ) )
            return func_GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
        else{
            return this->VertexMesh< 2, 2 >::GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationA, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocationB ) {
        return VertexMesh< 2, 2 >::GetVectorFromAtoB( boost::ref(rLocationA), boost::ref(rLocationB) );
    }

    virtual double GetVolumeOfElement( unsigned int index ) {
        if( bp::override func_GetVolumeOfElement = this->get_override( "GetVolumeOfElement" ) )
            return func_GetVolumeOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetVolumeOfElement( index );
        }
    }
    
    double default_GetVolumeOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetVolumeOfElement( index );
    }

    unsigned int SolveBoundaryElementMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveBoundaryElementMapping( index );
    }

    unsigned int SolveElementMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveElementMapping( index );
    }

    virtual unsigned int SolveNodeMapping( unsigned int index ) const {
        if( bp::override func_SolveNodeMapping = this->get_override( "SolveNodeMapping" ) )
            return func_SolveNodeMapping( index );
        else{
            return this->VertexMesh< 2, 2 >::SolveNodeMapping( index );
        }
    }
    
    virtual unsigned int default_SolveNodeMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveNodeMapping( index );
    }

    ::ChasteCuboid< 2 > CalculateBoundingBox( ::std::vector< Node<2> * > const & rNodes ) const {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( boost::ref(rNodes) );
    }

    virtual ::ChasteCuboid< 2 > CalculateBoundingBox(  ) const  {
        if( bp::override func_CalculateBoundingBox = this->get_override( "CalculateBoundingBox" ) )
            return func_CalculateBoundingBox(  );
        else{
            return this->AbstractMesh< 2, 2 >::CalculateBoundingBox(  );
        }
    }
    
    ::ChasteCuboid< 2 > default_CalculateBoundingBox(  ) const  {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( );
    }

    virtual unsigned int GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        if( bp::override func_GetNearestNodeIndex = this->get_override( "GetNearestNodeIndex" ) )
            return func_GetNearestNodeIndex( boost::ref(rTestPoint) );
        else{
            return this->AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
        }
    }
    
    unsigned int default_GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        return AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
    }

    virtual unsigned int GetNumAllNodes(  ) const  {
        if( bp::override func_GetNumAllNodes = this->get_override( "GetNumAllNodes" ) )
            return func_GetNumAllNodes(  );
        else{
            return this->AbstractMesh< 2, 2 >::GetNumAllNodes(  );
        }
    }
    
    unsigned int default_GetNumAllNodes(  ) const  {
        return AbstractMesh< 2, 2 >::GetNumAllNodes( );
    }

    virtual double GetWidth( unsigned int const & rDimension ) const  {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->AbstractMesh< 2, 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) const  {
        return AbstractMesh< 2, 2 >::GetWidth( rDimension );
    }

    virtual void PermuteNodes(  ) {
        if( bp::override func_PermuteNodes = this->get_override( "PermuteNodes" ) )
            func_PermuteNodes(  );
        else{
            this->AbstractMesh< 2, 2 >::PermuteNodes(  );
        }
    }
    
    void default_PermuteNodes(  ) {
        AbstractMesh< 2, 2 >::PermuteNodes( );
    }

    virtual void ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        if( bp::override func_ReadNodesPerProcessorFile = this->get_override( "ReadNodesPerProcessorFile" ) )
            func_ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        else{
            this->AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        }
    }
    
    void default_ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
    }

    virtual void RefreshMesh(  ) {
        if( bp::override func_RefreshMesh = this->get_override( "RefreshMesh" ) )
            func_RefreshMesh(  );
        else{
            this->AbstractMesh< 2, 2 >::RefreshMesh(  );
        }
    }
    
    void default_RefreshMesh(  ) {
        AbstractMesh< 2, 2 >::RefreshMesh( );
    }

    virtual void Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        if( bp::override func_Rotate = this->get_override( "Rotate" ) )
            func_Rotate( rotationMatrix );
        else{
            this->AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
        }
    }
    
    void default_Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
    }

    virtual void Scale( double const xFactor=1., double const yFactor=1., double const zFactor=1. ) {
        if( bp::override func_Scale = this->get_override( "Scale" ) )
            func_Scale( xFactor, yFactor, zFactor );
        else{
            this->AbstractMesh< 2, 2 >::Scale( xFactor, yFactor, zFactor );
        }
    }
    
    void default_Scale( double const xFactor=1., double const yFactor=1., double const zFactor=1. ) {
        AbstractMesh< 2, 2 >::Scale( xFactor, yFactor, zFactor );
    }

    virtual void SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        if( bp::override func_SetDistributedVectorFactory = this->get_override( "SetDistributedVectorFactory" ) )
            func_SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        else{
            this->AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        }
    }
    
    void default_SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
    }

    virtual void SetElementOwnerships(  ){
        if( bp::override func_SetElementOwnerships = this->get_override( "SetElementOwnerships" ) )
            func_SetElementOwnerships(  );
        else{
            this->AbstractMesh< 2, 2 >::SetElementOwnerships(  );
        }
    }
    
    virtual void default_SetElementOwnerships(  ){
        AbstractMesh< 2, 2 >::SetElementOwnerships( );
    }

    virtual void Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        if( bp::override func_Translate = this->get_override( "Translate" ) )
            func_Translate( boost::ref(rDisplacement) );
        else{
            this->AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
        }
    }
    
    void default_Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
    }

};

void register_VertexMesh2_2_class(){

    { //::VertexMesh< 2, 2 >
        typedef bp::class_< VertexMesh_less__2_comma__2__greater__wrapper, bp::bases< AbstractMesh< 2, 2 > >, boost::noncopyable > VertexMesh2_2_exposer_t;
        VertexMesh2_2_exposer_t VertexMesh2_2_exposer = VertexMesh2_2_exposer_t( "VertexMesh2_2", bp::init< std::vector< Node<2> * >, std::vector< VertexElement<2, 2> * > >(( bp::arg("nodes"), bp::arg("vertexElements") )) );
        bp::scope VertexMesh2_2_scope( VertexMesh2_2_exposer );
        VertexMesh2_2_exposer.def( bp::init< std::vector< Node<2> * >, std::vector< VertexElement<1, 2> * >, std::vector< VertexElement<2, 2> * > >(( bp::arg("nodes"), bp::arg("faces"), bp::arg("vertexElements") )) );
        VertexMesh2_2_exposer.def( bp::init< TetrahedralMesh< 2, 2 > &, bp::optional< bool > >(( bp::arg("rMesh"), bp::arg("isPeriodic")=(bool)(false) )) );
        bp::implicitly_convertible< TetrahedralMesh< 2, 2 > &, VertexMesh< 2, 2 > >();
        VertexMesh2_2_exposer.def( bp::init< >() );
        { //::VertexMesh< 2, 2 >::CalculateAreaOfFace
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*CalculateAreaOfFace_function_type)( ::VertexElement< 1, 2 > * ) ;
            typedef double ( VertexMesh_less__2_comma__2__greater__wrapper::*default_CalculateAreaOfFace_function_type)( ::VertexElement< 1, 2 > * ) ;
            
            VertexMesh2_2_exposer.def( 
                "CalculateAreaOfFace"
                , CalculateAreaOfFace_function_type(&::VertexMesh< 2, 2 >::CalculateAreaOfFace)
                , default_CalculateAreaOfFace_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_CalculateAreaOfFace)
                , ( bp::arg("pFace") ) );
        
        }
        { //::VertexMesh< 2, 2 >::CalculateMomentsOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*CalculateMomentsOfElement_function_type)( unsigned int ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( VertexMesh_less__2_comma__2__greater__wrapper::*default_CalculateMomentsOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "CalculateMomentsOfElement"
                , CalculateMomentsOfElement_function_type(&::VertexMesh< 2, 2 >::CalculateMomentsOfElement)
                , default_CalculateMomentsOfElement_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_CalculateMomentsOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::CalculateUnitNormalToFaceWithArea
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*CalculateUnitNormalToFaceWithArea_function_type)( ::VertexElement< 1, 2 > *,::boost::numeric::ublas::c_vector< double, 2 > & ) ;
            
            VertexMesh2_2_exposer.def( 
                "CalculateUnitNormalToFaceWithArea"
                , CalculateUnitNormalToFaceWithArea_function_type( &::VertexMesh< 2, 2 >::CalculateUnitNormalToFaceWithArea )
                , ( bp::arg("pFace"), bp::arg("rNormal") ) );
        
        }
        { //::VertexMesh< 2, 2 >::Clear
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_Clear_function_type)(  ) ;
            
            VertexMesh2_2_exposer.def( 
                "Clear"
                , Clear_function_type(&::VertexMesh< 2, 2 >::Clear)
                , default_Clear_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_Clear) );
        
        }
        { //::VertexMesh< 2, 2 >::ConstructFromMeshReader
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*ConstructFromMeshReader_function_type)( ::AbstractMeshReader< 2, 2 > & ) ;
            
            VertexMesh2_2_exposer.def( 
                "ConstructFromMeshReader"
                , ConstructFromMeshReader_function_type( &::VertexMesh< 2, 2 >::ConstructFromMeshReader )
                , ( bp::arg("rMeshReader") ) );
        
        }
        { //::VertexMesh< 2, 2 >::ElementIncludesPoint
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef bool ( VertexMesh_less__2_comma__2__greater__wrapper::*ElementIncludesPoint_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "ElementIncludesPoint"
                , ElementIncludesPoint_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::ElementIncludesPoint )
                , ( bp::arg("rTestPoint"), bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GenerateVerticesFromElementCircumcentres
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*GenerateVerticesFromElementCircumcentres_function_type)( ::TetrahedralMesh< 2, 2 > & ) ;
            
            VertexMesh2_2_exposer.def( 
                "GenerateVerticesFromElementCircumcentres"
                , GenerateVerticesFromElementCircumcentres_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::GenerateVerticesFromElementCircumcentres )
                , ( bp::arg("rMesh") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetAreaGradientOfElementAtNode
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetAreaGradientOfElementAtNode_function_type)( ::VertexElement< 2, 2 > *,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetAreaGradientOfElementAtNode"
                , GetAreaGradientOfElementAtNode_function_type( &::VertexMesh< 2, 2 >::GetAreaGradientOfElementAtNode )
                , ( bp::arg("pElement"), bp::arg("localIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetCentroidOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetCentroidOfElement_function_type)( unsigned int ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetCentroidOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetCentroidOfElement"
                , GetCentroidOfElement_function_type(&::VertexMesh< 2, 2 >::GetCentroidOfElement)
                , default_GetCentroidOfElement_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetCentroidOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetDelaunayNodeIndexCorrespondingToVoronoiElementIndex
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetDelaunayNodeIndexCorrespondingToVoronoiElementIndex_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetDelaunayNodeIndexCorrespondingToVoronoiElementIndex"
                , GetDelaunayNodeIndexCorrespondingToVoronoiElementIndex_function_type( &::VertexMesh< 2, 2 >::GetDelaunayNodeIndexCorrespondingToVoronoiElementIndex )
                , ( bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetEdgeLength
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetEdgeLength_function_type)( unsigned int,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetEdgeLength"
                , GetEdgeLength_function_type( &::VertexMesh< 2, 2 >::GetEdgeLength )
                , ( bp::arg("elementIndex1"), bp::arg("elementIndex2") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::VertexElement< 2, 2 > * ( exported_class_t::*GetElement_function_type)( unsigned int ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetElement"
                , GetElement_function_type( &::VertexMesh< 2, 2 >::GetElement )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::VertexMesh< 2, 2 >::GetElementIteratorBegin
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::VertexMesh< 2, 2 >::VertexElementIterator ( exported_class_t::*GetElementIteratorBegin_function_type)( bool ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetElementIteratorBegin"
                , GetElementIteratorBegin_function_type( &::VertexMesh< 2, 2 >::GetElementIteratorBegin )
                , ( bp::arg("skipDeletedElements")=(bool)(true) ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetElementIteratorEnd
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::VertexMesh< 2, 2 >::VertexElementIterator ( exported_class_t::*GetElementIteratorEnd_function_type)(  ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetElementIteratorEnd"
                , GetElementIteratorEnd_function_type( &::VertexMesh< 2, 2 >::GetElementIteratorEnd ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetElongationShapeFactorOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetElongationShapeFactorOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetElongationShapeFactorOfElement"
                , GetElongationShapeFactorOfElement_function_type( &::VertexMesh< 2, 2 >::GetElongationShapeFactorOfElement )
                , ( bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetLocalIndexForElementEdgeClosestToPoint
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*GetLocalIndexForElementEdgeClosestToPoint_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetLocalIndexForElementEdgeClosestToPoint"
                , GetLocalIndexForElementEdgeClosestToPoint_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::GetLocalIndexForElementEdgeClosestToPoint )
                , ( bp::arg("rTestPoint"), bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNeighbouringElementIndices
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringElementIndices_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetNeighbouringElementIndices"
                , GetNeighbouringElementIndices_function_type( &::VertexMesh< 2, 2 >::GetNeighbouringElementIndices )
                , ( bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNeighbouringNodeIndices
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type( &::VertexMesh< 2, 2 >::GetNeighbouringNodeIndices )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNeighbouringNodeNotAlsoInElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeNotAlsoInElement_function_type)( unsigned int,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetNeighbouringNodeNotAlsoInElement"
                , GetNeighbouringNodeNotAlsoInElement_function_type( &::VertexMesh< 2, 2 >::GetNeighbouringNodeNotAlsoInElement )
                , ( bp::arg("nodeIndex"), bp::arg("elemIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNextEdgeGradientOfElementAtNode
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetNextEdgeGradientOfElementAtNode_function_type)( ::VertexElement< 2, 2 > *,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetNextEdgeGradientOfElementAtNode"
                , GetNextEdgeGradientOfElementAtNode_function_type( &::VertexMesh< 2, 2 >::GetNextEdgeGradientOfElementAtNode )
                , ( bp::arg("pElement"), bp::arg("localIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNumAllElements
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllElements_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetNumAllElements"
                , GetNumAllElements_function_type( &::VertexMesh< 2, 2 >::GetNumAllElements ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNumElements
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) const;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetNumElements_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type(&::VertexMesh< 2, 2 >::GetNumElements)
                , default_GetNumElements_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetNumElements) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNumFaces
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumFaces_function_type)(  ) const;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetNumFaces_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetNumFaces"
                , GetNumFaces_function_type(&::VertexMesh< 2, 2 >::GetNumFaces)
                , default_GetNumFaces_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetNumFaces) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNumNodes
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) const;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::VertexMesh< 2, 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::VertexMesh< 2, 2 >::GetPerimeterGradientOfElementAtNode
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetPerimeterGradientOfElementAtNode_function_type)( ::VertexElement< 2, 2 > *,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetPerimeterGradientOfElementAtNode"
                , GetPerimeterGradientOfElementAtNode_function_type( &::VertexMesh< 2, 2 >::GetPerimeterGradientOfElementAtNode )
                , ( bp::arg("pElement"), bp::arg("localIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetPreviousEdgeGradientOfElementAtNode
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetPreviousEdgeGradientOfElementAtNode_function_type)( ::VertexElement< 2, 2 > *,unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetPreviousEdgeGradientOfElementAtNode"
                , GetPreviousEdgeGradientOfElementAtNode_function_type( &::VertexMesh< 2, 2 >::GetPreviousEdgeGradientOfElementAtNode )
                , ( bp::arg("pElement"), bp::arg("localIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetRosetteRankOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetRosetteRankOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetRosetteRankOfElement"
                , GetRosetteRankOfElement_function_type( &::VertexMesh< 2, 2 >::GetRosetteRankOfElement )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetShortAxisOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetShortAxisOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetShortAxisOfElement"
                , GetShortAxisOfElement_function_type( &::VertexMesh< 2, 2 >::GetShortAxisOfElement )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetSurfaceAreaOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            typedef double ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetSurfaceAreaOfElement"
                , GetSurfaceAreaOfElement_function_type(&::VertexMesh< 2, 2 >::GetSurfaceAreaOfElement)
                , default_GetSurfaceAreaOfElement_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetSurfaceAreaOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetVectorFromAtoB
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetVectorFromAtoB_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetVectorFromAtoB_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetVectorFromAtoB"
                , GetVectorFromAtoB_function_type(&::VertexMesh< 2, 2 >::GetVectorFromAtoB)
                , default_GetVectorFromAtoB_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetVectorFromAtoB)
                , ( bp::arg("rLocationA"), bp::arg("rLocationB") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetVolumeOfElement
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfElement_function_type)( unsigned int ) ;
            typedef double ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetVolumeOfElement_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetVolumeOfElement"
                , GetVolumeOfElement_function_type(&::VertexMesh< 2, 2 >::GetVolumeOfElement)
                , default_GetVolumeOfElement_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetVolumeOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetVoronoiElementIndexCorrespondingToDelaunayNodeIndex
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetVoronoiElementIndexCorrespondingToDelaunayNodeIndex_function_type)( unsigned int ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetVoronoiElementIndexCorrespondingToDelaunayNodeIndex"
                , GetVoronoiElementIndexCorrespondingToDelaunayNodeIndex_function_type( &::VertexMesh< 2, 2 >::GetVoronoiElementIndexCorrespondingToDelaunayNodeIndex )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveBoundaryElementMapping
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*SolveBoundaryElementMapping_function_type)( unsigned int ) const;
            
            VertexMesh2_2_exposer.def( 
                "SolveBoundaryElementMapping"
                , SolveBoundaryElementMapping_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::SolveBoundaryElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveElementMapping
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*SolveElementMapping_function_type)( unsigned int ) const;
            
            VertexMesh2_2_exposer.def( 
                "SolveElementMapping"
                , SolveElementMapping_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::SolveElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveNodeMapping
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*SolveNodeMapping_function_type)( unsigned int ) const;
            
            VertexMesh2_2_exposer.def( 
                "SolveNodeMapping"
                , SolveNodeMapping_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::default_SolveNodeMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::CalculateBoundingBox
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::ChasteCuboid< 2 > ( VertexMesh_less__2_comma__2__greater__wrapper::*CalculateBoundingBox_function_type)( ::std::vector< Node<2> * > const & ) const;
            
            VertexMesh2_2_exposer.def( 
                "CalculateBoundingBox"
                , CalculateBoundingBox_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::CalculateBoundingBox )
                , ( bp::arg("rNodes") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::CalculateBoundingBox
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef ::ChasteCuboid< 2 > ( exported_class_t::*CalculateBoundingBox_function_type)(  ) const;
            typedef ::ChasteCuboid< 2 > ( VertexMesh_less__2_comma__2__greater__wrapper::*default_CalculateBoundingBox_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "CalculateBoundingBox"
                , CalculateBoundingBox_function_type(&::AbstractMesh< 2, 2 >::CalculateBoundingBox)
                , default_CalculateBoundingBox_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_CalculateBoundingBox) );
        
        }
        { //::AbstractMesh< 2, 2 >::GetNearestNodeIndex
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNearestNodeIndex_function_type)( ::ChastePoint< 2 > const & ) ;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetNearestNodeIndex_function_type)( ::ChastePoint< 2 > const & ) ;
            
            VertexMesh2_2_exposer.def( 
                "GetNearestNodeIndex"
                , GetNearestNodeIndex_function_type(&::AbstractMesh< 2, 2 >::GetNearestNodeIndex)
                , default_GetNearestNodeIndex_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetNearestNodeIndex)
                , ( bp::arg("rTestPoint") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::GetNumAllNodes
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllNodes_function_type)(  ) const;
            typedef unsigned int ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetNumAllNodes_function_type)(  ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetNumAllNodes"
                , GetNumAllNodes_function_type(&::AbstractMesh< 2, 2 >::GetNumAllNodes)
                , default_GetNumAllNodes_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetNumAllNodes) );
        
        }
        { //::AbstractMesh< 2, 2 >::GetWidth
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) const;
            typedef double ( VertexMesh_less__2_comma__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) const;
            
            VertexMesh2_2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::AbstractMesh< 2, 2 >::GetWidth)
                , default_GetWidth_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::PermuteNodes
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*PermuteNodes_function_type)(  ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_PermuteNodes_function_type)(  ) ;
            
            VertexMesh2_2_exposer.def( 
                "PermuteNodes"
                , PermuteNodes_function_type(&::AbstractMesh< 2, 2 >::PermuteNodes)
                , default_PermuteNodes_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_PermuteNodes) );
        
        }
        { //::AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*ReadNodesPerProcessorFile_function_type)( ::std::string const & ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_ReadNodesPerProcessorFile_function_type)( ::std::string const & ) ;
            
            VertexMesh2_2_exposer.def( 
                "ReadNodesPerProcessorFile"
                , ReadNodesPerProcessorFile_function_type(&::AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile)
                , default_ReadNodesPerProcessorFile_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_ReadNodesPerProcessorFile)
                , ( bp::arg("rNodesPerProcessorFile") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::RefreshMesh
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*RefreshMesh_function_type)(  ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_RefreshMesh_function_type)(  ) ;
            
            VertexMesh2_2_exposer.def( 
                "RefreshMesh"
                , RefreshMesh_function_type(&::AbstractMesh< 2, 2 >::RefreshMesh)
                , default_RefreshMesh_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_RefreshMesh) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_Rotate_function_type)( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ) ;
            
            VertexMesh2_2_exposer.def( 
                "Rotate"
                , Rotate_function_type(&::AbstractMesh< 2, 2 >::Rotate)
                , default_Rotate_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_Rotate)
                , ( bp::arg("rotationMatrix") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( ::boost::numeric::ublas::c_vector< double, 3 >,double ) ;
            
            VertexMesh2_2_exposer.def( 
                "Rotate"
                , Rotate_function_type( &::AbstractMesh< 2, 2 >::Rotate )
                , ( bp::arg("axis"), bp::arg("angle") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( double ) ;
            
            VertexMesh2_2_exposer.def( 
                "Rotate"
                , Rotate_function_type( &::AbstractMesh< 2, 2 >::Rotate )
                , ( bp::arg("theta") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Scale
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Scale_function_type)( double const,double const,double const ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_Scale_function_type)( double const,double const,double const ) ;
            
            VertexMesh2_2_exposer.def( 
                "Scale"
                , Scale_function_type(&::AbstractMesh< 2, 2 >::Scale)
                , default_Scale_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_Scale)
                , ( bp::arg("xFactor")=1., bp::arg("yFactor")=1., bp::arg("zFactor")=1. ) );
        
        }
        { //::AbstractMesh< 2, 2 >::SetDistributedVectorFactory
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDistributedVectorFactory_function_type)( ::DistributedVectorFactory * ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_SetDistributedVectorFactory_function_type)( ::DistributedVectorFactory * ) ;
            
            VertexMesh2_2_exposer.def( 
                "SetDistributedVectorFactory"
                , SetDistributedVectorFactory_function_type(&::AbstractMesh< 2, 2 >::SetDistributedVectorFactory)
                , default_SetDistributedVectorFactory_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_SetDistributedVectorFactory)
                , ( bp::arg("pFactory") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::SetElementOwnerships
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*SetElementOwnerships_function_type)(  ) ;
            
            VertexMesh2_2_exposer.def( 
                "SetElementOwnerships"
                , SetElementOwnerships_function_type( &VertexMesh_less__2_comma__2__greater__wrapper::default_SetElementOwnerships ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Translate
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            typedef void ( VertexMesh_less__2_comma__2__greater__wrapper::*default_Translate_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            
            VertexMesh2_2_exposer.def( 
                "Translate"
                , Translate_function_type(&::AbstractMesh< 2, 2 >::Translate)
                , default_Translate_function_type(&VertexMesh_less__2_comma__2__greater__wrapper::default_Translate)
                , ( bp::arg("rDisplacement") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Translate
        
            typedef VertexMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( double const,double const,double const ) ;
            
            VertexMesh2_2_exposer.def( 
                "Translate"
                , Translate_function_type( &::AbstractMesh< 2, 2 >::Translate )
                , ( bp::arg("xMovement")=0., bp::arg("yMovement")=0., bp::arg("zMovement")=0. ) );
        
        }
    }

}
