// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "mesh_headers.hpp"
#include "Cylindrical2dVertexMesh.pypp.hpp"

namespace bp = boost::python;

struct Cylindrical2dVertexMesh_wrapper : Cylindrical2dVertexMesh, bp::wrapper< Cylindrical2dVertexMesh > {

    Cylindrical2dVertexMesh_wrapper(double width, ::std::vector< Node<2> * > nodes, ::std::vector< VertexElement<2, 2> * > vertexElements, double cellRearrangementThreshold=0.01, double t2Threshold=0.001 )
    : Cylindrical2dVertexMesh( width, nodes, vertexElements, cellRearrangementThreshold, t2Threshold )
      , bp::wrapper< Cylindrical2dVertexMesh >(){
        // constructor
    
    }

    Cylindrical2dVertexMesh_wrapper(::Cylindrical2dMesh & rMesh )
    : Cylindrical2dVertexMesh( boost::ref(rMesh) )
      , bp::wrapper< Cylindrical2dVertexMesh >(){
        // constructor
    
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocation1, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocation2 ) {
        if( bp::override func_GetVectorFromAtoB = this->get_override( "GetVectorFromAtoB" ) )
            return func_GetVectorFromAtoB( boost::ref(rLocation1), boost::ref(rLocation2) );
        else{
            return this->Cylindrical2dVertexMesh::GetVectorFromAtoB( boost::ref(rLocation1), boost::ref(rLocation2) );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetVectorFromAtoB( ::boost::numeric::ublas::c_vector< double, 2 > const & rLocation1, ::boost::numeric::ublas::c_vector< double, 2 > const & rLocation2 ) {
        return Cylindrical2dVertexMesh::GetVectorFromAtoB( boost::ref(rLocation1), boost::ref(rLocation2) );
    }

    virtual double GetWidth( unsigned int const & rDimension ) const  {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->Cylindrical2dVertexMesh::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) const  {
        return Cylindrical2dVertexMesh::GetWidth( rDimension );
    }

    virtual void Scale( double const xScale=1., double const yScale=1., double const zScale=1. ) {
        if( bp::override func_Scale = this->get_override( "Scale" ) )
            func_Scale( xScale, yScale, zScale );
        else{
            this->Cylindrical2dVertexMesh::Scale( xScale, yScale, zScale );
        }
    }
    
    void default_Scale( double const xScale=1., double const yScale=1., double const zScale=1. ) {
        Cylindrical2dVertexMesh::Scale( xScale, yScale, zScale );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > point ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, point );
        else{
            this->Cylindrical2dVertexMesh::SetNode( nodeIndex, point );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > point ) {
        Cylindrical2dVertexMesh::SetNode( nodeIndex, point );
    }

    virtual double CalculateAreaOfFace( ::VertexElement< 1, 2 > * pFace ) {
        if( bp::override func_CalculateAreaOfFace = this->get_override( "CalculateAreaOfFace" ) )
            return func_CalculateAreaOfFace( boost::python::ptr(pFace) );
        else{
            return this->VertexMesh< 2, 2 >::CalculateAreaOfFace( boost::python::ptr(pFace) );
        }
    }
    
    double default_CalculateAreaOfFace( ::VertexElement< 1, 2 > * pFace ) {
        return VertexMesh< 2, 2 >::CalculateAreaOfFace( boost::python::ptr(pFace) );
    }

    ::ChasteCuboid< 2 > CalculateBoundingBox( ::std::vector< Node<2> * > const & rNodes ) const {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( boost::ref(rNodes) );
    }

    virtual ::ChasteCuboid< 2 > CalculateBoundingBox(  ) const  {
        if( bp::override func_CalculateBoundingBox = this->get_override( "CalculateBoundingBox" ) )
            return func_CalculateBoundingBox(  );
        else{
            return this->AbstractMesh< 2, 2 >::CalculateBoundingBox(  );
        }
    }
    
    ::ChasteCuboid< 2 > default_CalculateBoundingBox(  ) const  {
        return AbstractMesh< 2, 2 >::CalculateBoundingBox( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > CalculateMomentsOfElement( unsigned int index ) {
        if( bp::override func_CalculateMomentsOfElement = this->get_override( "CalculateMomentsOfElement" ) )
            return func_CalculateMomentsOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::CalculateMomentsOfElement( index );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_CalculateMomentsOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::CalculateMomentsOfElement( index );
    }

    bool CheckForIntersections(  ){
        return MutableVertexMesh< 2, 2 >::CheckForIntersections(  );
    }

    void CheckForRosettes(  ){
        MutableVertexMesh< 2, 2 >::CheckForRosettes(  );
    }

    bool CheckForSwapsFromShortEdges(  ){
        return MutableVertexMesh< 2, 2 >::CheckForSwapsFromShortEdges(  );
    }

    virtual void Clear(  ) {
        if( bp::override func_Clear = this->get_override( "Clear" ) )
            func_Clear(  );
        else{
            this->MutableVertexMesh< 2, 2 >::Clear(  );
        }
    }
    
    void default_Clear(  ) {
        MutableVertexMesh< 2, 2 >::Clear( );
    }

    unsigned int DivideElement( ::VertexElement< 2, 2 > * pElement, unsigned int nodeAIndex, unsigned int nodeBIndex, bool placeOriginalElementBelow=false ){
        return MutableVertexMesh< 2, 2 >::DivideElement( boost::python::ptr(pElement), nodeAIndex, nodeBIndex, placeOriginalElementBelow );
    }

    bool ElementIncludesPoint( ::boost::numeric::ublas::c_vector< double, 2 > const & rTestPoint, unsigned int elementIndex ){
        return VertexMesh< 2, 2 >::ElementIncludesPoint( boost::ref(rTestPoint), elementIndex );
    }

    void GenerateVerticesFromElementCircumcentres( ::TetrahedralMesh< 2, 2 > & rMesh ){
        VertexMesh< 2, 2 >::GenerateVerticesFromElementCircumcentres( boost::ref(rMesh) );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetCentroidOfElement( unsigned int index ) {
        if( bp::override func_GetCentroidOfElement = this->get_override( "GetCentroidOfElement" ) )
            return func_GetCentroidOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetCentroidOfElement( index );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetCentroidOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetCentroidOfElement( index );
    }

    unsigned int GetLocalIndexForElementEdgeClosestToPoint( ::boost::numeric::ublas::c_vector< double, 2 > const & rTestPoint, unsigned int elementIndex ){
        return VertexMesh< 2, 2 >::GetLocalIndexForElementEdgeClosestToPoint( boost::ref(rTestPoint), elementIndex );
    }

    virtual unsigned int GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        if( bp::override func_GetNearestNodeIndex = this->get_override( "GetNearestNodeIndex" ) )
            return func_GetNearestNodeIndex( boost::ref(rTestPoint) );
        else{
            return this->AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
        }
    }
    
    unsigned int default_GetNearestNodeIndex( ::ChastePoint< 2 > const & rTestPoint ) {
        return AbstractMesh< 2, 2 >::GetNearestNodeIndex( boost::ref(rTestPoint) );
    }

    virtual unsigned int GetNumAllNodes(  ) const  {
        if( bp::override func_GetNumAllNodes = this->get_override( "GetNumAllNodes" ) )
            return func_GetNumAllNodes(  );
        else{
            return this->AbstractMesh< 2, 2 >::GetNumAllNodes(  );
        }
    }
    
    unsigned int default_GetNumAllNodes(  ) const  {
        return AbstractMesh< 2, 2 >::GetNumAllNodes( );
    }

    virtual unsigned int GetNumElements(  ) const  {
        if( bp::override func_GetNumElements = this->get_override( "GetNumElements" ) )
            return func_GetNumElements(  );
        else{
            return this->MutableVertexMesh< 2, 2 >::GetNumElements(  );
        }
    }
    
    unsigned int default_GetNumElements(  ) const  {
        return MutableVertexMesh< 2, 2 >::GetNumElements( );
    }

    virtual unsigned int GetNumFaces(  ) const  {
        if( bp::override func_GetNumFaces = this->get_override( "GetNumFaces" ) )
            return func_GetNumFaces(  );
        else{
            return this->VertexMesh< 2, 2 >::GetNumFaces(  );
        }
    }
    
    unsigned int default_GetNumFaces(  ) const  {
        return VertexMesh< 2, 2 >::GetNumFaces( );
    }

    virtual unsigned int GetNumNodes(  ) const  {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->MutableVertexMesh< 2, 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) const  {
        return MutableVertexMesh< 2, 2 >::GetNumNodes( );
    }

    virtual double GetSurfaceAreaOfElement( unsigned int index ) {
        if( bp::override func_GetSurfaceAreaOfElement = this->get_override( "GetSurfaceAreaOfElement" ) )
            return func_GetSurfaceAreaOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetSurfaceAreaOfElement( index );
        }
    }
    
    double default_GetSurfaceAreaOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetSurfaceAreaOfElement( index );
    }

    virtual double GetVolumeOfElement( unsigned int index ) {
        if( bp::override func_GetVolumeOfElement = this->get_override( "GetVolumeOfElement" ) )
            return func_GetVolumeOfElement( index );
        else{
            return this->VertexMesh< 2, 2 >::GetVolumeOfElement( index );
        }
    }
    
    double default_GetVolumeOfElement( unsigned int index ) {
        return VertexMesh< 2, 2 >::GetVolumeOfElement( index );
    }

    virtual void HandleHighOrderJunctions( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        if( bp::override func_HandleHighOrderJunctions = this->get_override( "HandleHighOrderJunctions" ) )
            func_HandleHighOrderJunctions( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
        else{
            this->MutableVertexMesh< 2, 2 >::HandleHighOrderJunctions( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
        }
    }
    
    virtual void default_HandleHighOrderJunctions( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        MutableVertexMesh< 2, 2 >::HandleHighOrderJunctions( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
    }

    virtual void IdentifySwapType( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        if( bp::override func_IdentifySwapType = this->get_override( "IdentifySwapType" ) )
            func_IdentifySwapType( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
        else{
            this->MutableVertexMesh< 2, 2 >::IdentifySwapType( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
        }
    }
    
    virtual void default_IdentifySwapType( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        MutableVertexMesh< 2, 2 >::IdentifySwapType( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
    }

    void PerformIntersectionSwap( ::Node< 2 > * pNode, unsigned int elementIndex ){
        MutableVertexMesh< 2, 2 >::PerformIntersectionSwap( boost::python::ptr(pNode), elementIndex );
    }

    void PerformNodeMerge( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        MutableVertexMesh< 2, 2 >::PerformNodeMerge( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
    }

    void PerformProtorosetteResolution( ::Node< 2 > * pProtorosetteNode ){
        MutableVertexMesh< 2, 2 >::PerformProtorosetteResolution( boost::python::ptr(pProtorosetteNode) );
    }

    void PerformRosetteRankDecrease( ::Node< 2 > * pRosetteNode ){
        MutableVertexMesh< 2, 2 >::PerformRosetteRankDecrease( boost::python::ptr(pRosetteNode) );
    }

    void PerformRosetteRankIncrease( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB ){
        MutableVertexMesh< 2, 2 >::PerformRosetteRankIncrease( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB) );
    }

    void PerformT1Swap( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB, ::std::set< unsigned int > & rElementsContainingNodes ){
        MutableVertexMesh< 2, 2 >::PerformT1Swap( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rElementsContainingNodes) );
    }

    void PerformT2Swap( ::VertexElement< 2, 2 > & rElement ){
        MutableVertexMesh< 2, 2 >::PerformT2Swap( boost::ref(rElement) );
    }

    void PerformT3Swap( ::Node< 2 > * pNode, unsigned int elementIndex ){
        MutableVertexMesh< 2, 2 >::PerformT3Swap( boost::python::ptr(pNode), elementIndex );
    }

    void PerformVoidRemoval( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB, ::Node< 2 > * pNodeC ){
        MutableVertexMesh< 2, 2 >::PerformVoidRemoval( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::python::ptr(pNodeC) );
    }

    virtual void PermuteNodes(  ) {
        if( bp::override func_PermuteNodes = this->get_override( "PermuteNodes" ) )
            func_PermuteNodes(  );
        else{
            this->AbstractMesh< 2, 2 >::PermuteNodes(  );
        }
    }
    
    void default_PermuteNodes(  ) {
        AbstractMesh< 2, 2 >::PermuteNodes( );
    }

    virtual void ReMesh( ::VertexElementMap & rElementMap ) {
        if( bp::override func_ReMesh = this->get_override( "ReMesh" ) )
            func_ReMesh( boost::ref(rElementMap) );
        else{
            this->MutableVertexMesh< 2, 2 >::ReMesh( boost::ref(rElementMap) );
        }
    }
    
    void default_ReMesh( ::VertexElementMap & rElementMap ) {
        MutableVertexMesh< 2, 2 >::ReMesh( boost::ref(rElementMap) );
    }

    virtual void ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        if( bp::override func_ReadNodesPerProcessorFile = this->get_override( "ReadNodesPerProcessorFile" ) )
            func_ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        else{
            this->AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
        }
    }
    
    void default_ReadNodesPerProcessorFile( ::std::string const & rNodesPerProcessorFile ) {
        AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile( rNodesPerProcessorFile );
    }

    virtual void RefreshMesh(  ) {
        if( bp::override func_RefreshMesh = this->get_override( "RefreshMesh" ) )
            func_RefreshMesh(  );
        else{
            this->AbstractMesh< 2, 2 >::RefreshMesh(  );
        }
    }
    
    void default_RefreshMesh(  ) {
        AbstractMesh< 2, 2 >::RefreshMesh( );
    }

    virtual void Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        if( bp::override func_Rotate = this->get_override( "Rotate" ) )
            func_Rotate( rotationMatrix );
        else{
            this->AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
        }
    }
    
    void default_Rotate( ::boost::numeric::ublas::c_matrix< double, 2, 2 > rotationMatrix ) {
        AbstractMesh< 2, 2 >::Rotate( rotationMatrix );
    }

    virtual void SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        if( bp::override func_SetDistributedVectorFactory = this->get_override( "SetDistributedVectorFactory" ) )
            func_SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        else{
            this->AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
        }
    }
    
    void default_SetDistributedVectorFactory( ::DistributedVectorFactory * pFactory ) {
        AbstractMesh< 2, 2 >::SetDistributedVectorFactory( boost::python::ptr(pFactory) );
    }

    virtual void SetElementOwnerships(  ){
        if( bp::override func_SetElementOwnerships = this->get_override( "SetElementOwnerships" ) )
            func_SetElementOwnerships(  );
        else{
            this->AbstractMesh< 2, 2 >::SetElementOwnerships(  );
        }
    }
    
    virtual void default_SetElementOwnerships(  ){
        AbstractMesh< 2, 2 >::SetElementOwnerships( );
    }

    unsigned int SolveBoundaryElementMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveBoundaryElementMapping( index );
    }

    unsigned int SolveElementMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveElementMapping( index );
    }

    virtual unsigned int SolveNodeMapping( unsigned int index ) const {
        if( bp::override func_SolveNodeMapping = this->get_override( "SolveNodeMapping" ) )
            return func_SolveNodeMapping( index );
        else{
            return this->VertexMesh< 2, 2 >::SolveNodeMapping( index );
        }
    }
    
    virtual unsigned int default_SolveNodeMapping( unsigned int index ) const {
        return VertexMesh< 2, 2 >::SolveNodeMapping( index );
    }

    virtual void Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        if( bp::override func_Translate = this->get_override( "Translate" ) )
            func_Translate( boost::ref(rDisplacement) );
        else{
            this->AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
        }
    }
    
    void default_Translate( ::boost::numeric::ublas::c_vector< double, 2 > const & rDisplacement ) {
        AbstractMesh< 2, 2 >::Translate( boost::ref(rDisplacement) );
    }

    ::boost::numeric::ublas::c_vector< double, 2 > WidenEdgeOrCorrectIntersectionLocationIfNecessary( unsigned int indexA, unsigned int indexB, ::boost::numeric::ublas::c_vector< double, 2 > intersection ){
        return MutableVertexMesh< 2, 2 >::WidenEdgeOrCorrectIntersectionLocationIfNecessary( indexA, indexB, intersection );
    }

};

void register_Cylindrical2dVertexMesh_class(){

    { //::Cylindrical2dVertexMesh
        typedef bp::class_< Cylindrical2dVertexMesh_wrapper, bp::bases< MutableVertexMesh< 2, 2 > >, boost::noncopyable > Cylindrical2dVertexMesh_exposer_t;
        Cylindrical2dVertexMesh_exposer_t Cylindrical2dVertexMesh_exposer = Cylindrical2dVertexMesh_exposer_t( "Cylindrical2dVertexMesh", bp::init< double, std::vector< Node<2> * >, std::vector< VertexElement<2, 2> * >, bp::optional< double, double > >(( bp::arg("width"), bp::arg("nodes"), bp::arg("vertexElements"), bp::arg("cellRearrangementThreshold")=0.01, bp::arg("t2Threshold")=0.001 )) );
        bp::scope Cylindrical2dVertexMesh_scope( Cylindrical2dVertexMesh_exposer );
        Cylindrical2dVertexMesh_exposer.def( bp::init< Cylindrical2dMesh & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< Cylindrical2dMesh &, Cylindrical2dVertexMesh >();
        { //::Cylindrical2dVertexMesh::AddNode
        
            typedef unsigned int ( ::Cylindrical2dVertexMesh::*AddNode_function_type)( ::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "AddNode"
                , AddNode_function_type( &::Cylindrical2dVertexMesh::AddNode )
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::Cylindrical2dVertexMesh::GetVectorFromAtoB
        
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( ::Cylindrical2dVertexMesh::*GetVectorFromAtoB_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( Cylindrical2dVertexMesh_wrapper::*default_GetVectorFromAtoB_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetVectorFromAtoB"
                , GetVectorFromAtoB_function_type(&::Cylindrical2dVertexMesh::GetVectorFromAtoB)
                , default_GetVectorFromAtoB_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetVectorFromAtoB)
                , ( bp::arg("rLocation1"), bp::arg("rLocation2") ) );
        
        }
        { //::Cylindrical2dVertexMesh::GetWidth
        
            typedef double ( ::Cylindrical2dVertexMesh::*GetWidth_function_type)( unsigned int const & ) const;
            typedef double ( Cylindrical2dVertexMesh_wrapper::*default_GetWidth_function_type)( unsigned int const & ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::Cylindrical2dVertexMesh::GetWidth)
                , default_GetWidth_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::Cylindrical2dVertexMesh::Scale
        
            typedef void ( ::Cylindrical2dVertexMesh::*Scale_function_type)( double const,double const,double const ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_Scale_function_type)( double const,double const,double const ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Scale"
                , Scale_function_type(&::Cylindrical2dVertexMesh::Scale)
                , default_Scale_function_type(&Cylindrical2dVertexMesh_wrapper::default_Scale)
                , ( bp::arg("xScale")=1., bp::arg("yScale")=1., bp::arg("zScale")=1. ) );
        
        }
        { //::Cylindrical2dVertexMesh::SetNode
        
            typedef void ( ::Cylindrical2dVertexMesh::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::Cylindrical2dVertexMesh::SetNode)
                , default_SetNode_function_type(&Cylindrical2dVertexMesh_wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("point") ) );
        
        }
        { //::VertexMesh< 2, 2 >::CalculateAreaOfFace
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef double ( exported_class_t::*CalculateAreaOfFace_function_type)( ::VertexElement< 1, 2 > * ) ;
            typedef double ( Cylindrical2dVertexMesh_wrapper::*default_CalculateAreaOfFace_function_type)( ::VertexElement< 1, 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CalculateAreaOfFace"
                , CalculateAreaOfFace_function_type(&::VertexMesh< 2, 2 >::CalculateAreaOfFace)
                , default_CalculateAreaOfFace_function_type(&Cylindrical2dVertexMesh_wrapper::default_CalculateAreaOfFace)
                , ( bp::arg("pFace") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::CalculateBoundingBox
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef ::ChasteCuboid< 2 > ( Cylindrical2dVertexMesh_wrapper::*CalculateBoundingBox_function_type)( ::std::vector< Node<2> * > const & ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CalculateBoundingBox"
                , CalculateBoundingBox_function_type( &Cylindrical2dVertexMesh_wrapper::CalculateBoundingBox )
                , ( bp::arg("rNodes") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::CalculateBoundingBox
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef ::ChasteCuboid< 2 > ( exported_class_t::*CalculateBoundingBox_function_type)(  ) const;
            typedef ::ChasteCuboid< 2 > ( Cylindrical2dVertexMesh_wrapper::*default_CalculateBoundingBox_function_type)(  ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CalculateBoundingBox"
                , CalculateBoundingBox_function_type(&::AbstractMesh< 2, 2 >::CalculateBoundingBox)
                , default_CalculateBoundingBox_function_type(&Cylindrical2dVertexMesh_wrapper::default_CalculateBoundingBox) );
        
        }
        { //::VertexMesh< 2, 2 >::CalculateMomentsOfElement
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*CalculateMomentsOfElement_function_type)( unsigned int ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( Cylindrical2dVertexMesh_wrapper::*default_CalculateMomentsOfElement_function_type)( unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CalculateMomentsOfElement"
                , CalculateMomentsOfElement_function_type(&::VertexMesh< 2, 2 >::CalculateMomentsOfElement)
                , default_CalculateMomentsOfElement_function_type(&Cylindrical2dVertexMesh_wrapper::default_CalculateMomentsOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::CheckForIntersections
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef bool ( Cylindrical2dVertexMesh_wrapper::*CheckForIntersections_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CheckForIntersections"
                , CheckForIntersections_function_type( &Cylindrical2dVertexMesh_wrapper::CheckForIntersections ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::CheckForRosettes
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*CheckForRosettes_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CheckForRosettes"
                , CheckForRosettes_function_type( &Cylindrical2dVertexMesh_wrapper::CheckForRosettes ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::CheckForSwapsFromShortEdges
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef bool ( Cylindrical2dVertexMesh_wrapper::*CheckForSwapsFromShortEdges_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "CheckForSwapsFromShortEdges"
                , CheckForSwapsFromShortEdges_function_type( &Cylindrical2dVertexMesh_wrapper::CheckForSwapsFromShortEdges ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::Clear
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_Clear_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Clear"
                , Clear_function_type(&::MutableVertexMesh< 2, 2 >::Clear)
                , default_Clear_function_type(&Cylindrical2dVertexMesh_wrapper::default_Clear) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::DivideElement
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*DivideElement_function_type)( ::VertexElement< 2, 2 > *,unsigned int,unsigned int,bool ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "DivideElement"
                , DivideElement_function_type( &Cylindrical2dVertexMesh_wrapper::DivideElement )
                , ( bp::arg("pElement"), bp::arg("nodeAIndex"), bp::arg("nodeBIndex"), bp::arg("placeOriginalElementBelow")=(bool)(false) ) );
        
        }
        { //::VertexMesh< 2, 2 >::ElementIncludesPoint
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef bool ( Cylindrical2dVertexMesh_wrapper::*ElementIncludesPoint_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "ElementIncludesPoint"
                , ElementIncludesPoint_function_type( &Cylindrical2dVertexMesh_wrapper::ElementIncludesPoint )
                , ( bp::arg("rTestPoint"), bp::arg("elementIndex") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GenerateVerticesFromElementCircumcentres
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*GenerateVerticesFromElementCircumcentres_function_type)( ::TetrahedralMesh< 2, 2 > & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GenerateVerticesFromElementCircumcentres"
                , GenerateVerticesFromElementCircumcentres_function_type( &Cylindrical2dVertexMesh_wrapper::GenerateVerticesFromElementCircumcentres )
                , ( bp::arg("rMesh") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetCentroidOfElement
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetCentroidOfElement_function_type)( unsigned int ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( Cylindrical2dVertexMesh_wrapper::*default_GetCentroidOfElement_function_type)( unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetCentroidOfElement"
                , GetCentroidOfElement_function_type(&::VertexMesh< 2, 2 >::GetCentroidOfElement)
                , default_GetCentroidOfElement_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetCentroidOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetLocalIndexForElementEdgeClosestToPoint
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*GetLocalIndexForElementEdgeClosestToPoint_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const &,unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetLocalIndexForElementEdgeClosestToPoint"
                , GetLocalIndexForElementEdgeClosestToPoint_function_type( &Cylindrical2dVertexMesh_wrapper::GetLocalIndexForElementEdgeClosestToPoint )
                , ( bp::arg("rTestPoint"), bp::arg("elementIndex") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::GetNearestNodeIndex
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNearestNodeIndex_function_type)( ::ChastePoint< 2 > const & ) ;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*default_GetNearestNodeIndex_function_type)( ::ChastePoint< 2 > const & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetNearestNodeIndex"
                , GetNearestNodeIndex_function_type(&::AbstractMesh< 2, 2 >::GetNearestNodeIndex)
                , default_GetNearestNodeIndex_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetNearestNodeIndex)
                , ( bp::arg("rTestPoint") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::GetNumAllNodes
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllNodes_function_type)(  ) const;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*default_GetNumAllNodes_function_type)(  ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetNumAllNodes"
                , GetNumAllNodes_function_type(&::AbstractMesh< 2, 2 >::GetNumAllNodes)
                , default_GetNumAllNodes_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetNumAllNodes) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::GetNumElements
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) const;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*default_GetNumElements_function_type)(  ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type(&::MutableVertexMesh< 2, 2 >::GetNumElements)
                , default_GetNumElements_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetNumElements) );
        
        }
        { //::VertexMesh< 2, 2 >::GetNumFaces
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumFaces_function_type)(  ) const;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*default_GetNumFaces_function_type)(  ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetNumFaces"
                , GetNumFaces_function_type(&::VertexMesh< 2, 2 >::GetNumFaces)
                , default_GetNumFaces_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetNumFaces) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::GetNumNodes
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) const;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*default_GetNumNodes_function_type)(  ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::MutableVertexMesh< 2, 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetNumNodes) );
        
        }
        { //::VertexMesh< 2, 2 >::GetSurfaceAreaOfElement
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef double ( exported_class_t::*GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            typedef double ( Cylindrical2dVertexMesh_wrapper::*default_GetSurfaceAreaOfElement_function_type)( unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetSurfaceAreaOfElement"
                , GetSurfaceAreaOfElement_function_type(&::VertexMesh< 2, 2 >::GetSurfaceAreaOfElement)
                , default_GetSurfaceAreaOfElement_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetSurfaceAreaOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::GetVolumeOfElement
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfElement_function_type)( unsigned int ) ;
            typedef double ( Cylindrical2dVertexMesh_wrapper::*default_GetVolumeOfElement_function_type)( unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "GetVolumeOfElement"
                , GetVolumeOfElement_function_type(&::VertexMesh< 2, 2 >::GetVolumeOfElement)
                , default_GetVolumeOfElement_function_type(&Cylindrical2dVertexMesh_wrapper::default_GetVolumeOfElement)
                , ( bp::arg("index") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::HandleHighOrderJunctions
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*HandleHighOrderJunctions_function_type)( ::Node< 2 > *,::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "HandleHighOrderJunctions"
                , HandleHighOrderJunctions_function_type( &Cylindrical2dVertexMesh_wrapper::default_HandleHighOrderJunctions )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::IdentifySwapType
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*IdentifySwapType_function_type)( ::Node< 2 > *,::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "IdentifySwapType"
                , IdentifySwapType_function_type( &Cylindrical2dVertexMesh_wrapper::default_IdentifySwapType )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformIntersectionSwap
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformIntersectionSwap_function_type)( ::Node< 2 > *,unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformIntersectionSwap"
                , PerformIntersectionSwap_function_type( &Cylindrical2dVertexMesh_wrapper::PerformIntersectionSwap )
                , ( bp::arg("pNode"), bp::arg("elementIndex") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformNodeMerge
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformNodeMerge_function_type)( ::Node< 2 > *,::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformNodeMerge"
                , PerformNodeMerge_function_type( &Cylindrical2dVertexMesh_wrapper::PerformNodeMerge )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformProtorosetteResolution
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformProtorosetteResolution_function_type)( ::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformProtorosetteResolution"
                , PerformProtorosetteResolution_function_type( &Cylindrical2dVertexMesh_wrapper::PerformProtorosetteResolution )
                , ( bp::arg("pProtorosetteNode") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformRosetteRankDecrease
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformRosetteRankDecrease_function_type)( ::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformRosetteRankDecrease"
                , PerformRosetteRankDecrease_function_type( &Cylindrical2dVertexMesh_wrapper::PerformRosetteRankDecrease )
                , ( bp::arg("pRosetteNode") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformRosetteRankIncrease
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformRosetteRankIncrease_function_type)( ::Node< 2 > *,::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformRosetteRankIncrease"
                , PerformRosetteRankIncrease_function_type( &Cylindrical2dVertexMesh_wrapper::PerformRosetteRankIncrease )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformT1Swap
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformT1Swap_function_type)( ::Node< 2 > *,::Node< 2 > *,::std::set< unsigned int > & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformT1Swap"
                , PerformT1Swap_function_type( &Cylindrical2dVertexMesh_wrapper::PerformT1Swap )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB"), bp::arg("rElementsContainingNodes") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformT2Swap
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformT2Swap_function_type)( ::VertexElement< 2, 2 > & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformT2Swap"
                , PerformT2Swap_function_type( &Cylindrical2dVertexMesh_wrapper::PerformT2Swap )
                , ( bp::arg("rElement") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformT3Swap
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformT3Swap_function_type)( ::Node< 2 > *,unsigned int ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformT3Swap"
                , PerformT3Swap_function_type( &Cylindrical2dVertexMesh_wrapper::PerformT3Swap )
                , ( bp::arg("pNode"), bp::arg("elementIndex") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::PerformVoidRemoval
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*PerformVoidRemoval_function_type)( ::Node< 2 > *,::Node< 2 > *,::Node< 2 > * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PerformVoidRemoval"
                , PerformVoidRemoval_function_type( &Cylindrical2dVertexMesh_wrapper::PerformVoidRemoval )
                , ( bp::arg("pNodeA"), bp::arg("pNodeB"), bp::arg("pNodeC") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::PermuteNodes
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*PermuteNodes_function_type)(  ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_PermuteNodes_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "PermuteNodes"
                , PermuteNodes_function_type(&::AbstractMesh< 2, 2 >::PermuteNodes)
                , default_PermuteNodes_function_type(&Cylindrical2dVertexMesh_wrapper::default_PermuteNodes) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::ReMesh
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*ReMesh_function_type)( ::VertexElementMap & ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_ReMesh_function_type)( ::VertexElementMap & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "ReMesh"
                , ReMesh_function_type(&::MutableVertexMesh< 2, 2 >::ReMesh)
                , default_ReMesh_function_type(&Cylindrical2dVertexMesh_wrapper::default_ReMesh)
                , ( bp::arg("rElementMap") ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::ReMesh
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*ReMesh_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "ReMesh"
                , ReMesh_function_type( &::MutableVertexMesh< 2, 2 >::ReMesh ) );
        
        }
        { //::AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*ReadNodesPerProcessorFile_function_type)( ::std::string const & ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_ReadNodesPerProcessorFile_function_type)( ::std::string const & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "ReadNodesPerProcessorFile"
                , ReadNodesPerProcessorFile_function_type(&::AbstractMesh< 2, 2 >::ReadNodesPerProcessorFile)
                , default_ReadNodesPerProcessorFile_function_type(&Cylindrical2dVertexMesh_wrapper::default_ReadNodesPerProcessorFile)
                , ( bp::arg("rNodesPerProcessorFile") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::RefreshMesh
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*RefreshMesh_function_type)(  ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_RefreshMesh_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "RefreshMesh"
                , RefreshMesh_function_type(&::AbstractMesh< 2, 2 >::RefreshMesh)
                , default_RefreshMesh_function_type(&Cylindrical2dVertexMesh_wrapper::default_RefreshMesh) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_Rotate_function_type)( ::boost::numeric::ublas::c_matrix< double, 2, 2 > ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Rotate"
                , Rotate_function_type(&::AbstractMesh< 2, 2 >::Rotate)
                , default_Rotate_function_type(&Cylindrical2dVertexMesh_wrapper::default_Rotate)
                , ( bp::arg("rotationMatrix") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( ::boost::numeric::ublas::c_vector< double, 3 >,double ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Rotate"
                , Rotate_function_type( &::AbstractMesh< 2, 2 >::Rotate )
                , ( bp::arg("axis"), bp::arg("angle") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Rotate
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Rotate_function_type)( double ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Rotate"
                , Rotate_function_type( &::AbstractMesh< 2, 2 >::Rotate )
                , ( bp::arg("theta") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::SetDistributedVectorFactory
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*SetDistributedVectorFactory_function_type)( ::DistributedVectorFactory * ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_SetDistributedVectorFactory_function_type)( ::DistributedVectorFactory * ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SetDistributedVectorFactory"
                , SetDistributedVectorFactory_function_type(&::AbstractMesh< 2, 2 >::SetDistributedVectorFactory)
                , default_SetDistributedVectorFactory_function_type(&Cylindrical2dVertexMesh_wrapper::default_SetDistributedVectorFactory)
                , ( bp::arg("pFactory") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::SetElementOwnerships
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*SetElementOwnerships_function_type)(  ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SetElementOwnerships"
                , SetElementOwnerships_function_type( &Cylindrical2dVertexMesh_wrapper::default_SetElementOwnerships ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveBoundaryElementMapping
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*SolveBoundaryElementMapping_function_type)( unsigned int ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SolveBoundaryElementMapping"
                , SolveBoundaryElementMapping_function_type( &Cylindrical2dVertexMesh_wrapper::SolveBoundaryElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveElementMapping
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*SolveElementMapping_function_type)( unsigned int ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SolveElementMapping"
                , SolveElementMapping_function_type( &Cylindrical2dVertexMesh_wrapper::SolveElementMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::VertexMesh< 2, 2 >::SolveNodeMapping
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef unsigned int ( Cylindrical2dVertexMesh_wrapper::*SolveNodeMapping_function_type)( unsigned int ) const;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "SolveNodeMapping"
                , SolveNodeMapping_function_type( &Cylindrical2dVertexMesh_wrapper::default_SolveNodeMapping )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Translate
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            typedef void ( Cylindrical2dVertexMesh_wrapper::*default_Translate_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > const & ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Translate"
                , Translate_function_type(&::AbstractMesh< 2, 2 >::Translate)
                , default_Translate_function_type(&Cylindrical2dVertexMesh_wrapper::default_Translate)
                , ( bp::arg("rDisplacement") ) );
        
        }
        { //::AbstractMesh< 2, 2 >::Translate
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( double const,double const,double const ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "Translate"
                , Translate_function_type( &::AbstractMesh< 2, 2 >::Translate )
                , ( bp::arg("xMovement")=0., bp::arg("yMovement")=0., bp::arg("zMovement")=0. ) );
        
        }
        { //::MutableVertexMesh< 2, 2 >::WidenEdgeOrCorrectIntersectionLocationIfNecessary
        
            typedef Cylindrical2dVertexMesh exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( Cylindrical2dVertexMesh_wrapper::*WidenEdgeOrCorrectIntersectionLocationIfNecessary_function_type)( unsigned int,unsigned int,::boost::numeric::ublas::c_vector< double, 2 > ) ;
            
            Cylindrical2dVertexMesh_exposer.def( 
                "WidenEdgeOrCorrectIntersectionLocationIfNecessary"
                , WidenEdgeOrCorrectIntersectionLocationIfNecessary_function_type( &Cylindrical2dVertexMesh_wrapper::WidenEdgeOrCorrectIntersectionLocationIfNecessary )
                , ( bp::arg("indexA"), bp::arg("indexB"), bp::arg("intersection") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< Cylindrical2dVertexMesh > >();
        bp::implicitly_convertible< boost::shared_ptr< Cylindrical2dVertexMesh >, boost::shared_ptr< VertexMesh< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< Cylindrical2dVertexMesh >, boost::shared_ptr< AbstractMesh< 2, 2 > > >();
    }

}
