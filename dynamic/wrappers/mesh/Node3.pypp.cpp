// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "Node3.pypp.hpp"

namespace bp = boost::python;

void register_Node3_class(){

    { //::Node< 3 >
        typedef bp::class_< Node< 3 > > Node3_exposer_t;
        Node3_exposer_t Node3_exposer = Node3_exposer_t( "Node3", bp::init< unsigned int, ChastePoint< 3 >, bp::optional< bool > >(( bp::arg("index"), bp::arg("point"), bp::arg("isBoundaryNode")=(bool)(false) )) );
        bp::scope Node3_scope( Node3_exposer );
        { //::Node< 3 >::ContainingBoundaryElementIterator
            typedef bp::class_< Node< 3 >::ContainingBoundaryElementIterator > ContainingBoundaryElementIterator_exposer_t;
            ContainingBoundaryElementIterator_exposer_t ContainingBoundaryElementIterator_exposer = ContainingBoundaryElementIterator_exposer_t( "ContainingBoundaryElementIterator", bp::init< std::set< unsigned int >::const_iterator >(( bp::arg("indexIterator") )) );
            bp::scope ContainingBoundaryElementIterator_scope( ContainingBoundaryElementIterator_exposer );
            bp::implicitly_convertible< std::set< unsigned int >::const_iterator, Node< 3 >::ContainingBoundaryElementIterator >();
            ContainingBoundaryElementIterator_exposer.def( bp::self != bp::self );
            ContainingBoundaryElementIterator_exposer.def( bp::self == bp::self );
        }
        { //::Node< 3 >::ContainingElementIterator
            typedef bp::class_< Node< 3 >::ContainingElementIterator > ContainingElementIterator_exposer_t;
            ContainingElementIterator_exposer_t ContainingElementIterator_exposer = ContainingElementIterator_exposer_t( "ContainingElementIterator", bp::init< std::set< unsigned int >::const_iterator >(( bp::arg("indexIterator") )) );
            bp::scope ContainingElementIterator_scope( ContainingElementIterator_exposer );
            bp::implicitly_convertible< std::set< unsigned int >::const_iterator, Node< 3 >::ContainingElementIterator >();
            ContainingElementIterator_exposer.def( bp::self != bp::self );
            ContainingElementIterator_exposer.def( bp::self == bp::self );
        }
        Node3_exposer.def( bp::init< unsigned int, std::vector< double >, bp::optional< bool > >(( bp::arg("index"), bp::arg("coords"), bp::arg("isBoundaryNode")=(bool)(false) )) );
        Node3_exposer.def( bp::init< unsigned int, boost::numeric::ublas::c_vector< double, 3 >, bp::optional< bool > >(( bp::arg("index"), bp::arg("location"), bp::arg("isBoundaryNode")=(bool)(false) )) );
        Node3_exposer.def( bp::init< unsigned int, bp::optional< bool, double, double, double > >(( bp::arg("index"), bp::arg("isBoundaryNode")=(bool)(false), bp::arg("v1")=0, bp::arg("v2")=0, bp::arg("v3")=0 )) );
        bp::implicitly_convertible< unsigned int, Node< 3 > >();
        Node3_exposer.def( bp::init< unsigned int, double *, bp::optional< bool > >(( bp::arg("index"), bp::arg("location"), bp::arg("isBoundaryNode")=(bool)(false) )) );
        { //::Node< 3 >::AddAppliedForceContribution
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddAppliedForceContribution_function_type)( ::boost::numeric::ublas::c_vector< double, 3 > & ) ;
            
            Node3_exposer.def( 
                "AddAppliedForceContribution"
                , AddAppliedForceContribution_function_type( &::Node< 3 >::AddAppliedForceContribution )
                , ( bp::arg("forceContribution") ) );
        
        }
        { //::Node< 3 >::AddBoundaryElement
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddBoundaryElement_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "AddBoundaryElement"
                , AddBoundaryElement_function_type( &::Node< 3 >::AddBoundaryElement )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::AddElement
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddElement_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "AddElement"
                , AddElement_function_type( &::Node< 3 >::AddElement )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::AddNeighbour
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddNeighbour_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "AddNeighbour"
                , AddNeighbour_function_type( &::Node< 3 >::AddNeighbour )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::AddNodeAttribute
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddNodeAttribute_function_type)( double ) ;
            
            Node3_exposer.def( 
                "AddNodeAttribute"
                , AddNodeAttribute_function_type( &::Node< 3 >::AddNodeAttribute )
                , ( bp::arg("attribute") ) );
        
        }
        { //::Node< 3 >::ClearAppliedForce
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*ClearAppliedForce_function_type)(  ) ;
            
            Node3_exposer.def( 
                "ClearAppliedForce"
                , ClearAppliedForce_function_type( &::Node< 3 >::ClearAppliedForce ) );
        
        }
        { //::Node< 3 >::ClearNeighbours
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*ClearNeighbours_function_type)(  ) ;
            
            Node3_exposer.def( 
                "ClearNeighbours"
                , ClearNeighbours_function_type( &::Node< 3 >::ClearNeighbours ) );
        
        }
        { //::Node< 3 >::ContainingBoundaryElementsBegin
        
            typedef Node< 3 > exported_class_t;
            typedef ::Node< 3 >::ContainingBoundaryElementIterator ( exported_class_t::*ContainingBoundaryElementsBegin_function_type)(  ) const;
            
            Node3_exposer.def( 
                "ContainingBoundaryElementsBegin"
                , ContainingBoundaryElementsBegin_function_type( &::Node< 3 >::ContainingBoundaryElementsBegin ) );
        
        }
        { //::Node< 3 >::ContainingBoundaryElementsEnd
        
            typedef Node< 3 > exported_class_t;
            typedef ::Node< 3 >::ContainingBoundaryElementIterator ( exported_class_t::*ContainingBoundaryElementsEnd_function_type)(  ) const;
            
            Node3_exposer.def( 
                "ContainingBoundaryElementsEnd"
                , ContainingBoundaryElementsEnd_function_type( &::Node< 3 >::ContainingBoundaryElementsEnd ) );
        
        }
        { //::Node< 3 >::ContainingElementsBegin
        
            typedef Node< 3 > exported_class_t;
            typedef ::Node< 3 >::ContainingElementIterator ( exported_class_t::*ContainingElementsBegin_function_type)(  ) const;
            
            Node3_exposer.def( 
                "ContainingElementsBegin"
                , ContainingElementsBegin_function_type( &::Node< 3 >::ContainingElementsBegin ) );
        
        }
        { //::Node< 3 >::ContainingElementsEnd
        
            typedef Node< 3 > exported_class_t;
            typedef ::Node< 3 >::ContainingElementIterator ( exported_class_t::*ContainingElementsEnd_function_type)(  ) const;
            
            Node3_exposer.def( 
                "ContainingElementsEnd"
                , ContainingElementsEnd_function_type( &::Node< 3 >::ContainingElementsEnd ) );
        
        }
        { //::Node< 3 >::GetIndex
        
            typedef Node< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetIndex_function_type)(  ) const;
            
            Node3_exposer.def( 
                "GetIndex"
                , GetIndex_function_type( &::Node< 3 >::GetIndex ) );
        
        }
        { //::Node< 3 >::GetNeighboursSetUp
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetNeighboursSetUp_function_type)(  ) ;
            
            Node3_exposer.def( 
                "GetNeighboursSetUp"
                , GetNeighboursSetUp_function_type( &::Node< 3 >::GetNeighboursSetUp ) );
        
        }
        { //::Node< 3 >::GetNumBoundaryElements
        
            typedef Node< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumBoundaryElements_function_type)(  ) const;
            
            Node3_exposer.def( 
                "GetNumBoundaryElements"
                , GetNumBoundaryElements_function_type( &::Node< 3 >::GetNumBoundaryElements ) );
        
        }
        { //::Node< 3 >::GetNumContainingElements
        
            typedef Node< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumContainingElements_function_type)(  ) const;
            
            Node3_exposer.def( 
                "GetNumContainingElements"
                , GetNumContainingElements_function_type( &::Node< 3 >::GetNumContainingElements ) );
        
        }
        { //::Node< 3 >::GetNumNodeAttributes
        
            typedef Node< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodeAttributes_function_type)(  ) ;
            
            Node3_exposer.def( 
                "GetNumNodeAttributes"
                , GetNumNodeAttributes_function_type( &::Node< 3 >::GetNumNodeAttributes ) );
        
        }
        { //::Node< 3 >::GetPoint
        
            typedef Node< 3 > exported_class_t;
            typedef ::ChastePoint< 3 > ( exported_class_t::*GetPoint_function_type)(  ) const;
            
            Node3_exposer.def( 
                "GetPoint"
                , GetPoint_function_type( &::Node< 3 >::GetPoint ) );
        
        }
        { //::Node< 3 >::GetRadius
        
            typedef Node< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetRadius_function_type)(  ) ;
            
            Node3_exposer.def( 
                "GetRadius"
                , GetRadius_function_type( &::Node< 3 >::GetRadius ) );
        
        }
        { //::Node< 3 >::GetRegion
        
            typedef Node< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetRegion_function_type)(  ) const;
            
            Node3_exposer.def( 
                "GetRegion"
                , GetRegion_function_type( &::Node< 3 >::GetRegion ) );
        
        }
        { //::Node< 3 >::HasNodeAttributes
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*HasNodeAttributes_function_type)(  ) ;
            
            Node3_exposer.def( 
                "HasNodeAttributes"
                , HasNodeAttributes_function_type( &::Node< 3 >::HasNodeAttributes ) );
        
        }
        { //::Node< 3 >::IsBoundaryNode
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsBoundaryNode_function_type)(  ) const;
            
            Node3_exposer.def( 
                "IsBoundaryNode"
                , IsBoundaryNode_function_type( &::Node< 3 >::IsBoundaryNode ) );
        
        }
        { //::Node< 3 >::IsDeleted
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsDeleted_function_type)(  ) const;
            
            Node3_exposer.def( 
                "IsDeleted"
                , IsDeleted_function_type( &::Node< 3 >::IsDeleted ) );
        
        }
        { //::Node< 3 >::IsInternal
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsInternal_function_type)(  ) const;
            
            Node3_exposer.def( 
                "IsInternal"
                , IsInternal_function_type( &::Node< 3 >::IsInternal ) );
        
        }
        { //::Node< 3 >::IsParticle
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)(  ) ;
            
            Node3_exposer.def( 
                "IsParticle"
                , IsParticle_function_type( &::Node< 3 >::IsParticle ) );
        
        }
        { //::Node< 3 >::MarkAsDeleted
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*MarkAsDeleted_function_type)(  ) ;
            
            Node3_exposer.def( 
                "MarkAsDeleted"
                , MarkAsDeleted_function_type( &::Node< 3 >::MarkAsDeleted ) );
        
        }
        { //::Node< 3 >::MarkAsInternal
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*MarkAsInternal_function_type)(  ) ;
            
            Node3_exposer.def( 
                "MarkAsInternal"
                , MarkAsInternal_function_type( &::Node< 3 >::MarkAsInternal ) );
        
        }
        { //::Node< 3 >::NeighboursIsEmpty
        
            typedef Node< 3 > exported_class_t;
            typedef bool ( exported_class_t::*NeighboursIsEmpty_function_type)(  ) ;
            
            Node3_exposer.def( 
                "NeighboursIsEmpty"
                , NeighboursIsEmpty_function_type( &::Node< 3 >::NeighboursIsEmpty ) );
        
        }
        { //::Node< 3 >::RemoveBoundaryElement
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveBoundaryElement_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "RemoveBoundaryElement"
                , RemoveBoundaryElement_function_type( &::Node< 3 >::RemoveBoundaryElement )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::RemoveDuplicateNeighbours
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveDuplicateNeighbours_function_type)(  ) ;
            
            Node3_exposer.def( 
                "RemoveDuplicateNeighbours"
                , RemoveDuplicateNeighbours_function_type( &::Node< 3 >::RemoveDuplicateNeighbours ) );
        
        }
        { //::Node< 3 >::RemoveElement
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveElement_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "RemoveElement"
                , RemoveElement_function_type( &::Node< 3 >::RemoveElement )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::SetAsBoundaryNode
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAsBoundaryNode_function_type)( bool ) ;
            
            Node3_exposer.def( 
                "SetAsBoundaryNode"
                , SetAsBoundaryNode_function_type( &::Node< 3 >::SetAsBoundaryNode )
                , ( bp::arg("value")=(bool)(true) ) );
        
        }
        { //::Node< 3 >::SetIndex
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetIndex_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "SetIndex"
                , SetIndex_function_type( &::Node< 3 >::SetIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::Node< 3 >::SetIsParticle
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetIsParticle_function_type)( bool ) ;
            
            Node3_exposer.def( 
                "SetIsParticle"
                , SetIsParticle_function_type( &::Node< 3 >::SetIsParticle )
                , ( bp::arg("isParticle") ) );
        
        }
        { //::Node< 3 >::SetNeighboursSetUp
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNeighboursSetUp_function_type)( bool ) ;
            
            Node3_exposer.def( 
                "SetNeighboursSetUp"
                , SetNeighboursSetUp_function_type( &::Node< 3 >::SetNeighboursSetUp )
                , ( bp::arg("flag") ) );
        
        }
        { //::Node< 3 >::SetPoint
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetPoint_function_type)( ::ChastePoint< 3 > ) ;
            
            Node3_exposer.def( 
                "SetPoint"
                , SetPoint_function_type( &::Node< 3 >::SetPoint )
                , ( bp::arg("point") ) );
        
        }
        { //::Node< 3 >::SetRadius
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRadius_function_type)( double ) ;
            
            Node3_exposer.def( 
                "SetRadius"
                , SetRadius_function_type( &::Node< 3 >::SetRadius )
                , ( bp::arg("radius") ) );
        
        }
        { //::Node< 3 >::SetRegion
        
            typedef Node< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegion_function_type)( unsigned int ) ;
            
            Node3_exposer.def( 
                "SetRegion"
                , SetRegion_function_type( &::Node< 3 >::SetRegion )
                , ( bp::arg("region") ) );
        
        }
        { //::Node< 3 >::rGetAppliedForce
        
            typedef Node< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > & ( exported_class_t::*rGetAppliedForce_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetAppliedForce"
                , rGetAppliedForce_function_type( &::Node< 3 >::rGetAppliedForce )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetContainingBoundaryElementIndices
        
            typedef Node< 3 > exported_class_t;
            typedef ::std::set< unsigned int > & ( exported_class_t::*rGetContainingBoundaryElementIndices_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetContainingBoundaryElementIndices"
                , rGetContainingBoundaryElementIndices_function_type( &::Node< 3 >::rGetContainingBoundaryElementIndices )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetContainingElementIndices
        
            typedef Node< 3 > exported_class_t;
            typedef ::std::set< unsigned int > & ( exported_class_t::*rGetContainingElementIndices_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetContainingElementIndices"
                , rGetContainingElementIndices_function_type( &::Node< 3 >::rGetContainingElementIndices )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetLocation
        
            typedef Node< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > const & ( exported_class_t::*rGetLocation_function_type)(  ) const;
            
            Node3_exposer.def( 
                "rGetLocation"
                , rGetLocation_function_type( &::Node< 3 >::rGetLocation )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetModifiableLocation
        
            typedef Node< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > & ( exported_class_t::*rGetModifiableLocation_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetModifiableLocation"
                , rGetModifiableLocation_function_type( &::Node< 3 >::rGetModifiableLocation )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetNeighbours
        
            typedef Node< 3 > exported_class_t;
            typedef ::std::vector< unsigned int > & ( exported_class_t::*rGetNeighbours_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetNeighbours"
                , rGetNeighbours_function_type( &::Node< 3 >::rGetNeighbours )
                , bp::return_internal_reference< >() );
        
        }
        { //::Node< 3 >::rGetNodeAttributes
        
            typedef Node< 3 > exported_class_t;
            typedef ::std::vector< double > & ( exported_class_t::*rGetNodeAttributes_function_type)(  ) ;
            
            Node3_exposer.def( 
                "rGetNodeAttributes"
                , rGetNodeAttributes_function_type( &::Node< 3 >::rGetNodeAttributes )
                , bp::return_internal_reference< >() );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< Node<3> > >();
    }

}
