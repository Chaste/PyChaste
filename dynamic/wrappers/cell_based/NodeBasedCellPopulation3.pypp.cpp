// This file has been generated by Py++.


/*

Copyright (c) 2005-2016, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "cell_based_headers.hpp"
#include "NodeBasedCellPopulation3.pypp.hpp"

namespace bp = boost::python;

struct NodeBasedCellPopulation_less__3__greater__wrapper : NodeBasedCellPopulation< 3 >, bp::wrapper< NodeBasedCellPopulation< 3 > > {

    NodeBasedCellPopulation_less__3__greater__wrapper(::NodesOnlyMesh< 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, bool validate=true )
    : NodeBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, validate )
      , bp::wrapper< NodeBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    NodeBasedCellPopulation_less__3__greater__wrapper(::NodesOnlyMesh< 3 > & rMesh )
    : NodeBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< NodeBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        NodeBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        NodeBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->NodeBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return NodeBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex( index );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ) {
        if( bp::override func_GetNode = this->get_override( "GetNode" ) )
            return func_GetNode( index );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetNode( index );
        }
    }
    
    ::Node< 3 > * default_GetNode( unsigned int index ) {
        return NodeBasedCellPopulation< 3 >::GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return NodeBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return NodeBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return NodeBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->NodeBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return NodeBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->NodeBasedCellPopulation< 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        NodeBasedCellPopulation< 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->NodeBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        NodeBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        if( bp::override func_UpdateParticlesAfterReMesh = this->get_override( "UpdateParticlesAfterReMesh" ) )
            func_UpdateParticlesAfterReMesh( boost::ref(rMap) );
        else{
            this->NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    virtual void default_UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
    }

    virtual void Validate(  ){
        if( bp::override func_Validate = this->get_override( "Validate" ) )
            func_Validate(  );
        else{
            this->NodeBasedCellPopulation< 3 >::Validate(  );
        }
    }
    
    virtual void default_Validate(  ){
        NodeBasedCellPopulation< 3 >::Validate( );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

void register_NodeBasedCellPopulation3_class(){

    { //::NodeBasedCellPopulation< 3 >
        typedef bp::class_< NodeBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractCentreBasedCellPopulation< 3, 3 > >, boost::noncopyable > NodeBasedCellPopulation3_exposer_t;
        NodeBasedCellPopulation3_exposer_t NodeBasedCellPopulation3_exposer = NodeBasedCellPopulation3_exposer_t( "NodeBasedCellPopulation3", bp::init< NodesOnlyMesh< 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true) )) );
        bp::scope NodeBasedCellPopulation3_scope( NodeBasedCellPopulation3_exposer );
        NodeBasedCellPopulation3_exposer.def( bp::init< NodesOnlyMesh< 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< NodesOnlyMesh< 3 > &, NodeBasedCellPopulation< 3 > >();
        { //::NodeBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AddCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::NodeBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AddReceivedCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddReceivedCells"
                , AddReceivedCells_function_type( &::NodeBasedCellPopulation< 3 >::AddReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Clear
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Clear"
                , Clear_function_type( &::NodeBasedCellPopulation< 3 >::Clear ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetCellNodePair
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::pair< boost::shared_ptr< Cell >, Node< 3 > > ( exported_class_t::*GetCellNodePair_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellNodePair"
                , GetCellNodePair_function_type( &::NodeBasedCellPopulation< 3 >::GetCellNodePair )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetMechanicsCutOffLength
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetMechanicsCutOffLength_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetMechanicsCutOffLength"
                , GetMechanicsCutOffLength_function_type( &::NodeBasedCellPopulation< 3 >::GetMechanicsCutOffLength ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::Node< 3 > * ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            typedef ::Node< 3 > * ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNode_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNode"
                , GetNode_function_type(&::NodeBasedCellPopulation< 3 >::GetNode)
                , default_GetNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNode)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNodesWithinNeighbourhoodRadius
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNodesWithinNeighbourhoodRadius_function_type)( unsigned int,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNodesWithinNeighbourhoodRadius"
                , GetNodesWithinNeighbourhoodRadius_function_type( &::NodeBasedCellPopulation< 3 >::GetNodesWithinNeighbourhoodRadius )
                , ( bp::arg("index"), bp::arg("neighbourhoodRadius") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNumNodes
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::NodeBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetReceivedCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*GetReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetReceivedCells"
                , GetReceivedCells_function_type( &::NodeBasedCellPopulation< 3 >::GetReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetSizeOfCellPopulation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::NodeBasedCellPopulation< 3 >::GetSizeOfCellPopulation ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetUseVariableRadii_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetUseVariableRadii"
                , GetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 3 >::GetUseVariableRadii ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::NodeBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetWidth
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::NodeBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::NonBlockingSendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*NonBlockingSendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "NonBlockingSendCellsToNeighbourProcesses"
                , NonBlockingSendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 3 >::NonBlockingSendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::NodeBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SendCellsToNeighbourProcesses"
                , SendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 3 >::SendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetLoadBalanceFrequency
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceFrequency_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetLoadBalanceFrequency"
                , SetLoadBalanceFrequency_function_type( &::NodeBasedCellPopulation< 3 >::SetLoadBalanceFrequency )
                , ( bp::arg("loadBalanceFrequency") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetLoadBalanceMesh
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceMesh_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetLoadBalanceMesh"
                , SetLoadBalanceMesh_function_type( &::NodeBasedCellPopulation< 3 >::SetLoadBalanceMesh )
                , ( bp::arg("loadBalanceMesh") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::NodeBasedCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUseVariableRadii_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetUseVariableRadii"
                , SetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 3 >::SetUseVariableRadii )
                , ( bp::arg("useVariableRadii")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Update
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::NodeBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*UpdateParticlesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateParticlesAfterReMesh"
                , UpdateParticlesAfterReMesh_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateParticlesAfterReMesh )
                , ( bp::arg("rMap") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Validate
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*Validate_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Validate"
                , Validate_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_Validate ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode)
                , default_IsGhostNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle)
                , default_IsParticle_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OpenWritersFiles
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

}
