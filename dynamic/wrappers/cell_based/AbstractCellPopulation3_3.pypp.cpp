// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "classes_to_be_wrapped.hpp"
#include "AbstractCellPopulation3_3.pypp.hpp"

namespace bp = boost::python;

struct AbstractCellPopulation_less__3_comma__3__greater__wrapper : AbstractCellPopulation< 3, 3 >, bp::wrapper< AbstractCellPopulation< 3, 3 > > {

    AbstractCellPopulation_less__3_comma__3__greater__wrapper(::AbstractMesh< 3, 3 > & rMesh )
    : AbstractCellPopulation<3, 3>( boost::ref(rMesh) )
      , bp::wrapper< AbstractCellPopulation< 3, 3 > >(){
        // constructor
    
    }

    AbstractCellPopulation_less__3_comma__3__greater__wrapper(::AbstractMesh< 3, 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : AbstractCellPopulation<3, 3>( boost::ref(rMesh), boost::ref(rCells), locationIndices )
      , bp::wrapper< AbstractCellPopulation< 3, 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" );
        func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

void register_AbstractCellPopulation3_3_class(){

    { //::AbstractCellPopulation< 3, 3 >
        typedef bp::class_< AbstractCellPopulation_less__3_comma__3__greater__wrapper, boost::noncopyable > AbstractCellPopulation3_3_exposer_t;
        AbstractCellPopulation3_3_exposer_t AbstractCellPopulation3_3_exposer = AbstractCellPopulation3_3_exposer_t( "AbstractCellPopulation3_3", bp::init< AbstractMesh< 3, 3 > & >(( bp::arg("rMesh") )) );
        bp::scope AbstractCellPopulation3_3_scope( AbstractCellPopulation3_3_exposer );
        bp::class_< AbstractCellPopulation< 3, 3 >::Iterator, boost::noncopyable >( "Iterator", bp::init< AbstractCellPopulation< 3, 3 > &, std::list< boost::shared_ptr<Cell> >::iterator >(( bp::arg("rCellPopulation"), bp::arg("cellIter") )) )    
            .def( bp::self != bp::self );
        AbstractCellPopulation3_3_exposer.def( bp::init< AbstractMesh< 3, 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr<AbstractCellWriter<3, 3> >,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptCellWriter"
                , bp::pure_virtual( AcceptCellWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationCountWriter<3, 3> > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptPopulationCountWriter"
                , bp::pure_virtual( AcceptPopulationCountWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationWriter<3, 3> > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptPopulationWriter"
                , bp::pure_virtual( AcceptPopulationWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCell"
                , bp::pure_virtual( AddCell_function_type(&::AbstractCellPopulation< 3, 3 >::AddCell) )
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellPopulationCountWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellPopulationCountWriter"
                , AddCellPopulationCountWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddCellPopulationCountWriter )
                , ( bp::arg("pCellPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellWriter"
                , AddCellWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddCellWriter )
                , ( bp::arg("pCellWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddPopulationWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddPopulationWriter"
                , AddPopulationWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddPopulationWriter )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Begin
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 >::Iterator ( exported_class_t::*Begin_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Begin"
                , Begin_function_type( &::AbstractCellPopulation< 3, 3 >::Begin ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::CloseWritersFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CloseWritersFiles_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "CloseWritersFiles"
                , CloseWritersFiles_function_type( &::AbstractCellPopulation< 3, 3 >::CloseWritersFiles ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::CreateOrderedPair
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::pair< unsigned int, unsigned int > ( exported_class_t::*CreateOrderedPair_function_type)( unsigned int,unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "CreateOrderedPair"
                , CreateOrderedPair_function_type( &::AbstractCellPopulation< 3, 3 >::CreateOrderedPair )
                , ( bp::arg("index1"), bp::arg("index2") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::End
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 >::Iterator ( exported_class_t::*End_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "End"
                , End_function_type( &::AbstractCellPopulation< 3, 3 >::End ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellAncestors
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetCellAncestors_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellAncestors"
                , GetCellAncestors_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellAncestors ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellCyclePhaseCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellCyclePhaseCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellCyclePhaseCount"
                , GetCellCyclePhaseCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellCyclePhaseCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , bp::pure_virtual( GetCellDataItemAtPdeNode_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellMutationStateCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellMutationStateCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellMutationStateCount"
                , GetCellMutationStateCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellMutationStateCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellProliferativeTypeCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellProliferativeTypeCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellProliferativeTypeCount"
                , GetCellProliferativeTypeCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellProliferativeTypeCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellPropertyRegistry
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< CellPropertyRegistry > ( exported_class_t::*GetCellPropertyRegistry_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellPropertyRegistry"
                , GetCellPropertyRegistry_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellPropertyRegistry ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellsUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< boost::shared_ptr<Cell> > ( exported_class_t::*GetCellsUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellsUsingLocationIndex"
                , GetCellsUsingLocationIndex_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellsUsingLocationIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCentroidOfCellPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetCentroidOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCentroidOfCellPopulation"
                , GetCentroidOfCellPopulation_function_type( &::AbstractCellPopulation< 3, 3 >::GetCentroidOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetDefaultTimeStep"
                , bp::pure_virtual( GetDefaultTimeStep_function_type(&::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetLocationIndexUsingCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetLocationIndexUsingCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetLocationIndexUsingCell"
                , GetLocationIndexUsingCell_function_type( &::AbstractCellPopulation< 3, 3 >::GetLocationIndexUsingCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector<double, 3> ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetLocationOfCellCentre"
                , bp::pure_virtual( GetLocationOfCellCentre_function_type(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , bp::pure_virtual( GetNeighbouringLocationIndices_function_type(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , bp::pure_virtual( GetNeighbouringNodeIndices_function_type(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices) )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNode
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::Node<3> * ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNode"
                , bp::pure_virtual( GetNode_function_type(&::AbstractCellPopulation< 3, 3 >::GetNode) )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumAllCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumAllCells"
                , GetNumAllCells_function_type( &::AbstractCellPopulation< 3, 3 >::GetNumAllCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumNodes
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumNodes"
                , bp::pure_virtual( GetNumNodes_function_type(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumRealCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumRealCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumRealCells"
                , GetNumRealCells_function_type( &::AbstractCellPopulation< 3, 3 >::GetNumRealCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputResultsForChasteVisualizer_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetOutputResultsForChasteVisualizer"
                , GetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 3, 3 >::GetOutputResultsForChasteVisualizer ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetSizeOfCellPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::AbstractCellPopulation< 3, 3 >::GetSizeOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetTetrahedralMeshForPdeModifier
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::TetrahedralMesh<3, 3> * ( exported_class_t::*GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetTetrahedralMeshForPdeModifier"
                , bp::pure_virtual( GetTetrahedralMeshForPdeModifier_function_type(&::AbstractCellPopulation< 3, 3 >::GetTetrahedralMeshForPdeModifier) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetVolumeOfCell"
                , bp::pure_virtual( GetVolumeOfCell_function_type(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetWidth
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetWidth"
                , bp::pure_virtual( GetWidth_function_type(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::InitialiseCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*InitialiseCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "InitialiseCells"
                , InitialiseCells_function_type( &::AbstractCellPopulation< 3, 3 >::InitialiseCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , bp::pure_virtual( IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::MoveCellInLocationMap
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*MoveCellInLocationMap_function_type)( ::CellPtr,unsigned int,unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "MoveCellInLocationMap"
                , MoveCellInLocationMap_function_type( &::AbstractCellPopulation< 3, 3 >::MoveCellInLocationMap )
                , ( bp::arg("pCell"), bp::arg("old_index"), bp::arg("new_index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OpenWritersFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OutputCellPopulationInfo
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OutputCellPopulationInfo"
                , OutputCellPopulationInfo_function_type( &::AbstractCellPopulation< 3, 3 >::OutputCellPopulationInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OutputCellPopulationParameters
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OutputCellPopulationParameters"
                , bp::pure_virtual( OutputCellPopulationParameters_function_type(&::AbstractCellPopulation< 3, 3 >::OutputCellPopulationParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveDeadCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "RemoveDeadCells"
                , bp::pure_virtual( RemoveDeadCells_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetCellAncestorsToLocationIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellAncestorsToLocationIndices_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetCellAncestorsToLocationIndices"
                , SetCellAncestorsToLocationIndices_function_type( &::AbstractCellPopulation< 3, 3 >::SetCellAncestorsToLocationIndices ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetCellUsingLocationIndex"
                , SetCellUsingLocationIndex_function_type( &::AbstractCellPopulation< 3, 3 >::SetCellUsingLocationIndex )
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetDataOnAllCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDataOnAllCells_function_type)( ::std::string const &,double ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetDataOnAllCells"
                , SetDataOnAllCells_function_type( &::AbstractCellPopulation< 3, 3 >::SetDataOnAllCells )
                , ( bp::arg("rDataName"), bp::arg("dataValue") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetDefaultCellMutationStateAndProliferativeTypeOrdering"
                , SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type( &::AbstractCellPopulation< 3, 3 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetNode
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint<3> & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetNode"
                , bp::pure_virtual( SetNode_function_type(&::AbstractCellPopulation< 3, 3 >::SetNode) )
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputResultsForChasteVisualizer_function_type)( bool ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetOutputResultsForChasteVisualizer"
                , SetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 3, 3 >::SetOutputResultsForChasteVisualizer )
                , ( bp::arg("outputResultsForChasteVisualizer") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Update
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Update"
                , bp::pure_virtual( Update_function_type(&::AbstractCellPopulation< 3, 3 >::Update) )
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Validate
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*Validate_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Validate"
                , Validate_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::Validate ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteVtkResultsToFile
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::WriteVtkResultsToFile )
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::rGetMesh
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::AbstractMesh< 3, 3 > & ( exported_class_t::*rGetMesh_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "rGetMesh"
                , rGetMesh_function_type( &::AbstractCellPopulation< 3, 3 >::rGetMesh )
                , bp::return_internal_reference< >() );
        
        }
    }

}
