// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "PottsBasedCellPopulation2.pypp.hpp"

namespace bp = boost::python;

struct PottsBasedCellPopulation_less__2__greater__wrapper : PottsBasedCellPopulation< 2 >, bp::wrapper< PottsBasedCellPopulation< 2 > > {

    PottsBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, bool deleteMesh=false, bool validate=true, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : PottsBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), deleteMesh, validate, locationIndices )
      , bp::wrapper< PottsBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    PottsBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh )
    : PottsBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< PottsBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        PottsBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        PottsBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return PottsBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->PottsBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        PottsBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ) {
        if( bp::override func_GetNode = this->get_override( "GetNode" ) )
            return func_GetNode( index );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNode( index );
        }
    }
    
    ::Node< 2 > * default_GetNode( unsigned int index ) {
        return PottsBasedCellPopulation< 2 >::GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return PottsBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return PottsBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->PottsBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        PottsBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( rParamsFile );
        else{
            this->PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters( rParamsFile );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters( rParamsFile );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->PottsBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return PottsBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->PottsBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        PottsBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->PottsBasedCellPopulation< 2 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        PottsBasedCellPopulation< 2 >::UpdateCellLocations( dt );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->PottsBasedCellPopulation< 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        PottsBasedCellPopulation< 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection( );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( pVizSetupFile );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( pVizSetupFile );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( pVizSetupFile );
    }

};

void register_PottsBasedCellPopulation2_class(){

    { //::PottsBasedCellPopulation< 2 >
        typedef bp::class_< PottsBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 2 > >, boost::noncopyable > PottsBasedCellPopulation2_exposer_t;
        PottsBasedCellPopulation2_exposer_t PottsBasedCellPopulation2_exposer = PottsBasedCellPopulation2_exposer_t( "PottsBasedCellPopulation2", bp::init< PottsMesh< 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< bool, bool, std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        bp::scope PottsBasedCellPopulation2_scope( PottsBasedCellPopulation2_exposer );
        PottsBasedCellPopulation2_exposer.def( bp::init< PottsMesh< 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 2 > &, PottsBasedCellPopulation< 2 > >();
        { //::PottsBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AddCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::PottsBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AddUpdateRule
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::PottsBasedCellPopulation< 2 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::CreateElementTessellation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CreateElementTessellation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "CreateElementTessellation"
                , CreateElementTessellation_function_type( &::PottsBasedCellPopulation< 2 >::CreateElementTessellation ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::CreateMutableMesh
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CreateMutableMesh_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "CreateMutableMesh"
                , CreateMutableMesh_function_type( &::PottsBasedCellPopulation< 2 >::CreateMutableMesh ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::Node< 2 > * ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            typedef ::Node< 2 > * ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNode_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNode"
                , GetNode_function_type(&::PottsBasedCellPopulation< 2 >::GetNode)
                , default_GetNode_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNode)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumElements
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type( &::PottsBasedCellPopulation< 2 >::GetNumElements ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumNodes
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::PottsBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumSweepsPerTimestep_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumSweepsPerTimestep"
                , GetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 2 >::GetNumSweepsPerTimestep ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetTemperature
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetTemperature_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetTemperature"
                , GetTemperature_function_type( &::PottsBasedCellPopulation< 2 >::GetTemperature ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::PottsBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetWidth
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::PottsBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::OpenWritersFiles
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::PottsBasedCellPopulation< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::PottsBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::SetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNumSweepsPerTimestep_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetNumSweepsPerTimestep"
                , SetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 2 >::SetNumSweepsPerTimestep )
                , ( bp::arg("numSweepsPerTimestep") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::SetTemperature
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTemperature_function_type)( double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetTemperature"
                , SetTemperature_function_type( &::PottsBasedCellPopulation< 2 >::SetTemperature )
                , ( bp::arg("temperature") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::Update
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::PottsBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::UpdateCellLocations
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::PottsBasedCellPopulation< 2 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::WriteResultsToFiles
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::PottsBasedCellPopulation< 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::SetNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 2 >::SetNode)
                , default_SetNode_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        PottsBasedCellPopulation2_exposer.def("AddCellWriterCellLabelWriter", &PottsBasedCellPopulation<2 >::AddCellWriter<CellLabelWriter>);
        PottsBasedCellPopulation2_exposer.def("AddPopulationWriterVoronoiDataWriter", &PottsBasedCellPopulation<2 >::AddPopulationWriter<VoronoiDataWriter>);
    }

}
