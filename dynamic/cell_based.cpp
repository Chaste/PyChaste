// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "indexing_suite/set.hpp"

#include "indexing_suite/map.hpp"

#include "cell_based_headers.hpp"

namespace bp = boost::python;

struct AbstractUpdateRule_less__2__greater__wrapper : AbstractUpdateRule< 2 >, bp::wrapper< AbstractUpdateRule< 2 > > {

    AbstractUpdateRule_less__2__greater__wrapper( )
    : AbstractUpdateRule<2>( )
      , bp::wrapper< AbstractUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" );
        func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCaUpdateRule_less__2__greater__wrapper : AbstractCaUpdateRule< 2 >, bp::wrapper< AbstractCaUpdateRule< 2 > > {

    AbstractCaUpdateRule_less__2__greater__wrapper( )
    : AbstractCaUpdateRule<2>( )
      , bp::wrapper< AbstractCaUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ){
        bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" );
        return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractUpdateRule_less__3__greater__wrapper : AbstractUpdateRule< 3 >, bp::wrapper< AbstractUpdateRule< 3 > > {

    AbstractUpdateRule_less__3__greater__wrapper( )
    : AbstractUpdateRule<3>( )
      , bp::wrapper< AbstractUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" );
        func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCaUpdateRule_less__3__greater__wrapper : AbstractCaUpdateRule< 3 >, bp::wrapper< AbstractCaUpdateRule< 3 > > {

    AbstractCaUpdateRule_less__3__greater__wrapper( )
    : AbstractCaUpdateRule<3>( )
      , bp::wrapper< AbstractCaUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 3 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ){
        bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" );
        return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractCaUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AbstractCaUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper : AbstractCellBasedSimulation< 2, 2 >, bp::wrapper< AbstractCellBasedSimulation< 2, 2 > > {

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval(  );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    virtual void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        AbstractCellBasedSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" );
        func_OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 2, 2 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" );
        func_UpdateCellLocationsAndTopology(  );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile( );
    }

};

struct AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper : AbstractCellBasedSimulation< 3, 3 >, bp::wrapper< AbstractCellBasedSimulation< 3, 3 > > {

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval(  );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    virtual void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        AbstractCellBasedSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" );
        func_OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 3, 3 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" );
        func_UpdateCellLocationsAndTopology(  );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile( );
    }

};

struct AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper : AbstractCellBasedSimulationModifier< 2, 2 >, bp::wrapper< AbstractCellBasedSimulationModifier< 2, 2 > > {

    AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper( )
    : AbstractCellBasedSimulationModifier<2, 2>( )
      , bp::wrapper< AbstractCellBasedSimulationModifier< 2, 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" );
        func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper : AbstractCellBasedSimulationModifier< 3, 3 >, bp::wrapper< AbstractCellBasedSimulationModifier< 3, 3 > > {

    AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper( )
    : AbstractCellBasedSimulationModifier<3, 3>( )
      , bp::wrapper< AbstractCellBasedSimulationModifier< 3, 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" );
        func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractCellCycleModel_wrapper : AbstractCellCycleModel, bp::wrapper< AbstractCellCycleModel > {

    AbstractCellCycleModel_wrapper(::AbstractCellCycleModel const & rModel )
    : AbstractCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractCellCycleModel >(){
        // copy constructor
    
    }

    AbstractCellCycleModel_wrapper( )
    : AbstractCellCycleModel( )
      , bp::wrapper< AbstractCellCycleModel >(){
        // null constructor
    
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual double GetAverageStemCellCycleTime(  ){
        bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" );
        return func_GetAverageStemCellCycleTime(  );
    }

    virtual double GetAverageTransitCellCycleTime(  ){
        bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" );
        return func_GetAverageTransitCellCycleTime(  );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" );
        func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual bool ReadyToDivide(  ){
        bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" );
        return func_ReadyToDivide(  );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractCellCycleModel::ResetForDivision( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

struct AbstractCellKiller_less__2__greater__wrapper : AbstractCellKiller< 2 >, bp::wrapper< AbstractCellKiller< 2 > > {

    AbstractCellKiller_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation )
    : AbstractCellKiller<2>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< AbstractCellKiller< 2 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ){
        bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" );
        func_CheckAndLabelCellsForApoptosisOrDeath(  );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" );
        func_OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCellKiller_less__3__greater__wrapper : AbstractCellKiller< 3 >, bp::wrapper< AbstractCellKiller< 3 > > {

    AbstractCellKiller_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation )
    : AbstractCellKiller<3>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< AbstractCellKiller< 3 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ){
        bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" );
        func_CheckAndLabelCellsForApoptosisOrDeath(  );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" );
        func_OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCellPopulation_less__2_comma__2__greater__wrapper : AbstractCellPopulation< 2, 2 >, bp::wrapper< AbstractCellPopulation< 2, 2 > > {

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" );
        func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractCellPopulation_less__3_comma__3__greater__wrapper : AbstractCellPopulation< 3, 3 >, bp::wrapper< AbstractCellPopulation< 3, 3 > > {

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" );
        func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractCellPopulationBoundaryCondition_less__2_comma__2__greater__wrapper : AbstractCellPopulationBoundaryCondition< 2, 2 >, bp::wrapper< AbstractCellPopulationBoundaryCondition< 2, 2 > > {

    AbstractCellPopulationBoundaryCondition_less__2_comma__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation )
    : AbstractCellPopulationBoundaryCondition<2, 2>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< AbstractCellPopulationBoundaryCondition< 2, 2 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & rOldLocations ){
        bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" );
        func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" );
        func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ){
        bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" );
        return func_VerifyBoundaryCondition(  );
    }

};

struct AbstractCellPopulationBoundaryCondition_less__3_comma__3__greater__wrapper : AbstractCellPopulationBoundaryCondition< 3, 3 >, bp::wrapper< AbstractCellPopulationBoundaryCondition< 3, 3 > > {

    AbstractCellPopulationBoundaryCondition_less__3_comma__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation )
    : AbstractCellPopulationBoundaryCondition<3, 3>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< AbstractCellPopulationBoundaryCondition< 3, 3 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & rOldLocations ){
        bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" );
        func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" );
        func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ){
        bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" );
        return func_VerifyBoundaryCondition(  );
    }

};

struct AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper : AbstractOffLatticeCellPopulation< 2, 2 >, bp::wrapper< AbstractOffLatticeCellPopulation< 2, 2 > > {

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ){
        bp::override func_AddNode = this->get_override( "AddNode" );
        return func_AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ){
        bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" );
        func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ){
        bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" );
        return func_GetDampingConstant( nodeIndex );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper : AbstractCentreBasedCellPopulation< 2, 2 >, bp::wrapper< AbstractCentreBasedCellPopulation< 2, 2 > > {

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractCentreBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

    virtual ::std::vector< std::pair<Node<2> *, Node<2> *> > & rGetNodePairs(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ){
        bp::override func_AddNode = this->get_override( "AddNode" );
        return func_AddNode( boost::python::ptr(pNewNode) );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper : AbstractOffLatticeCellPopulation< 3, 3 >, bp::wrapper< AbstractOffLatticeCellPopulation< 3, 3 > > {

    virtual unsigned int AddNode( ::Node< 3 > * pNewNode ){
        bp::override func_AddNode = this->get_override( "AddNode" );
        return func_AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ){
        bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" );
        func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ){
        bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" );
        return func_GetDampingConstant( nodeIndex );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper : AbstractCentreBasedCellPopulation< 3, 3 >, bp::wrapper< AbstractCentreBasedCellPopulation< 3, 3 > > {

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

    virtual ::std::vector< std::pair<Node<3> *, Node<3> *> > & rGetNodePairs(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int AddNode( ::Node< 3 > * pNewNode ){
        bp::override func_AddNode = this->get_override( "AddNode" );
        return func_AddNode( boost::python::ptr(pNewNode) );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct AbstractPdeModifier_less__2__greater__wrapper : AbstractPdeModifier< 2 >, bp::wrapper< AbstractPdeModifier< 2 > > {

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractPdeModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractPdeModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractPdeModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractPdeModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ){
        bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" );
        func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractGrowingDomainPdeModifier_less__2__greater__wrapper : AbstractGrowingDomainPdeModifier< 2 >, bp::wrapper< AbstractGrowingDomainPdeModifier< 2 > > {

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractGrowingDomainPdeModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractGrowingDomainPdeModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractPdeModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractPdeModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractPdeModifier_less__3__greater__wrapper : AbstractPdeModifier< 3 >, bp::wrapper< AbstractPdeModifier< 3 > > {

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractPdeModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractPdeModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractPdeModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractPdeModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ){
        bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" );
        func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractGrowingDomainPdeModifier_less__3__greater__wrapper : AbstractGrowingDomainPdeModifier< 3 >, bp::wrapper< AbstractGrowingDomainPdeModifier< 3 > > {

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractGrowingDomainPdeModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractGrowingDomainPdeModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractPdeModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractPdeModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractOnLatticeCellPopulation_less__2__greater__wrapper : AbstractOnLatticeCellPopulation< 2 >, bp::wrapper< AbstractOnLatticeCellPopulation< 2 > > {

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ){
        bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" );
        func_AddUpdateRule( pUpdateRule );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection( );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractOnLatticeCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules( );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void UpdateCellLocations( double dt ){
        bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" );
        func_UpdateCellLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractOnLatticeCellPopulation_less__3__greater__wrapper : AbstractOnLatticeCellPopulation< 3 >, bp::wrapper< AbstractOnLatticeCellPopulation< 3 > > {

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ){
        bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" );
        func_AddUpdateRule( pUpdateRule );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection( );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules( );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void UpdateCellLocations( double dt ){
        bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" );
        func_UpdateCellLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractPhaseBasedCellCycleModel_wrapper : AbstractPhaseBasedCellCycleModel, bp::wrapper< AbstractPhaseBasedCellCycleModel > {

    AbstractPhaseBasedCellCycleModel_wrapper(::AbstractPhaseBasedCellCycleModel const & rModel )
    : AbstractPhaseBasedCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractPhaseBasedCellCycleModel >(){
        // copy constructor
    
    }

    AbstractPhaseBasedCellCycleModel_wrapper( )
    : AbstractPhaseBasedCellCycleModel( )
      , bp::wrapper< AbstractPhaseBasedCellCycleModel >(){
        // null constructor
    
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual double GetG1Duration(  ) const  {
        if( bp::override func_GetG1Duration = this->get_override( "GetG1Duration" ) )
            return func_GetG1Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG1Duration(  );
        }
    }
    
    double default_GetG1Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG1Duration( );
    }

    virtual double GetG2Duration(  ) const  {
        if( bp::override func_GetG2Duration = this->get_override( "GetG2Duration" ) )
            return func_GetG2Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG2Duration(  );
        }
    }
    
    double default_GetG2Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG2Duration( );
    }

    virtual double GetMDuration(  ) const  {
        if( bp::override func_GetMDuration = this->get_override( "GetMDuration" ) )
            return func_GetMDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetMDuration(  );
        }
    }
    
    double default_GetMDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetMDuration( );
    }

    virtual double GetSDuration(  ) const  {
        if( bp::override func_GetSDuration = this->get_override( "GetSDuration" ) )
            return func_GetSDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetSDuration(  );
        }
    }
    
    double default_GetSDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetSDuration( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" );
        func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractPhaseBasedCellCycleModel::ReadyToDivide( );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractPhaseBasedCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractPhaseBasedCellCycleModel::ResetForDivision( );
    }

    virtual void SetStemCellG1Duration( double stemCellG1Duration ) {
        if( bp::override func_SetStemCellG1Duration = this->get_override( "SetStemCellG1Duration" ) )
            func_SetStemCellG1Duration( stemCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
        }
    }
    
    void default_SetStemCellG1Duration( double stemCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
    }

    virtual void SetTransitCellG1Duration( double transitCellG1Duration ) {
        if( bp::override func_SetTransitCellG1Duration = this->get_override( "SetTransitCellG1Duration" ) )
            func_SetTransitCellG1Duration( transitCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
        }
    }
    
    void default_SetTransitCellG1Duration( double transitCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
    }

    virtual void UpdateCellCyclePhase(  ){
        bp::override func_UpdateCellCyclePhase = this->get_override( "UpdateCellCyclePhase" );
        func_UpdateCellCyclePhase(  );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

struct AbstractPottsUpdateRule_less__2__greater__wrapper : AbstractPottsUpdateRule< 2 >, bp::wrapper< AbstractPottsUpdateRule< 2 > > {

    AbstractPottsUpdateRule_less__2__greater__wrapper( )
    : AbstractPottsUpdateRule<2>( )
      , bp::wrapper< AbstractPottsUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ){
        bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" );
        return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AbstractPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractPottsUpdateRule_less__3__greater__wrapper : AbstractPottsUpdateRule< 3 >, bp::wrapper< AbstractPottsUpdateRule< 3 > > {

    AbstractPottsUpdateRule_less__3__greater__wrapper( )
    : AbstractPottsUpdateRule<3>( )
      , bp::wrapper< AbstractPottsUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ){
        bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" );
        return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AbstractPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractSimpleCellCycleModel_wrapper : AbstractSimpleCellCycleModel, bp::wrapper< AbstractSimpleCellCycleModel > {

    AbstractSimpleCellCycleModel_wrapper(::AbstractSimpleCellCycleModel const & rModel )
    : AbstractSimpleCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractSimpleCellCycleModel >(){
        // copy constructor
    
    }

    AbstractSimpleCellCycleModel_wrapper( )
    : AbstractSimpleCellCycleModel( )
      , bp::wrapper< AbstractSimpleCellCycleModel >(){
        // null constructor
    
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimpleCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimpleCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimpleCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimpleCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" );
        func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractSimpleCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractSimpleCellCycleModel::ReadyToDivide( );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimpleCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimpleCellCycleModel::ResetForDivision( );
    }

    virtual void SetCellCycleDuration(  ){
        bp::override func_SetCellCycleDuration = this->get_override( "SetCellCycleDuration" );
        func_SetCellCycleDuration(  );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual double GetAverageStemCellCycleTime(  ){
        bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" );
        return func_GetAverageStemCellCycleTime(  );
    }

    virtual double GetAverageTransitCellCycleTime(  ){
        bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" );
        return func_GetAverageTransitCellCycleTime(  );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

struct AbstractSimplePhaseBasedCellCycleModel_wrapper : AbstractSimplePhaseBasedCellCycleModel, bp::wrapper< AbstractSimplePhaseBasedCellCycleModel > {

    AbstractSimplePhaseBasedCellCycleModel_wrapper(::AbstractSimplePhaseBasedCellCycleModel const & rModel )
    : AbstractSimplePhaseBasedCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractSimplePhaseBasedCellCycleModel >(){
        // copy constructor
    
    }

    AbstractSimplePhaseBasedCellCycleModel_wrapper( )
    : AbstractSimplePhaseBasedCellCycleModel( )
      , bp::wrapper< AbstractSimplePhaseBasedCellCycleModel >(){
        // null constructor
    
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimplePhaseBasedCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        AbstractSimplePhaseBasedCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimplePhaseBasedCellCycleModel::ResetForDivision( );
    }

    virtual void SetG1Duration(  ){
        if( bp::override func_SetG1Duration = this->get_override( "SetG1Duration" ) )
            func_SetG1Duration(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::SetG1Duration(  );
        }
    }
    
    virtual void default_SetG1Duration(  ){
        AbstractSimplePhaseBasedCellCycleModel::SetG1Duration( );
    }

    virtual void UpdateCellCyclePhase(  ) {
        if( bp::override func_UpdateCellCyclePhase = this->get_override( "UpdateCellCyclePhase" ) )
            func_UpdateCellCyclePhase(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase(  );
        }
    }
    
    void default_UpdateCellCyclePhase(  ) {
        AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual double GetG1Duration(  ) const  {
        if( bp::override func_GetG1Duration = this->get_override( "GetG1Duration" ) )
            return func_GetG1Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG1Duration(  );
        }
    }
    
    double default_GetG1Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG1Duration( );
    }

    virtual double GetG2Duration(  ) const  {
        if( bp::override func_GetG2Duration = this->get_override( "GetG2Duration" ) )
            return func_GetG2Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG2Duration(  );
        }
    }
    
    double default_GetG2Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG2Duration( );
    }

    virtual double GetMDuration(  ) const  {
        if( bp::override func_GetMDuration = this->get_override( "GetMDuration" ) )
            return func_GetMDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetMDuration(  );
        }
    }
    
    double default_GetMDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetMDuration( );
    }

    virtual double GetSDuration(  ) const  {
        if( bp::override func_GetSDuration = this->get_override( "GetSDuration" ) )
            return func_GetSDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetSDuration(  );
        }
    }
    
    double default_GetSDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetSDuration( );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractPhaseBasedCellCycleModel::ReadyToDivide( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

    virtual void SetStemCellG1Duration( double stemCellG1Duration ) {
        if( bp::override func_SetStemCellG1Duration = this->get_override( "SetStemCellG1Duration" ) )
            func_SetStemCellG1Duration( stemCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
        }
    }
    
    void default_SetStemCellG1Duration( double stemCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
    }

    virtual void SetTransitCellG1Duration( double transitCellG1Duration ) {
        if( bp::override func_SetTransitCellG1Duration = this->get_override( "SetTransitCellG1Duration" ) )
            func_SetTransitCellG1Duration( transitCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
        }
    }
    
    void default_SetTransitCellG1Duration( double transitCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
    }

};

struct AbstractSimpleGenerationalCellCycleModel_wrapper : AbstractSimpleGenerationalCellCycleModel, bp::wrapper< AbstractSimpleGenerationalCellCycleModel > {

    AbstractSimpleGenerationalCellCycleModel_wrapper(::AbstractSimpleGenerationalCellCycleModel const & rModel )
    : AbstractSimpleGenerationalCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractSimpleGenerationalCellCycleModel >(){
        // copy constructor
    
    }

    AbstractSimpleGenerationalCellCycleModel_wrapper( )
    : AbstractSimpleGenerationalCellCycleModel( )
      , bp::wrapper< AbstractSimpleGenerationalCellCycleModel >(){
        // null constructor
    
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractSimpleGenerationalCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        AbstractSimpleGenerationalCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimpleGenerationalCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimpleGenerationalCellCycleModel::ResetForDivision( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual double GetG1Duration(  ) const  {
        if( bp::override func_GetG1Duration = this->get_override( "GetG1Duration" ) )
            return func_GetG1Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG1Duration(  );
        }
    }
    
    double default_GetG1Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG1Duration( );
    }

    virtual double GetG2Duration(  ) const  {
        if( bp::override func_GetG2Duration = this->get_override( "GetG2Duration" ) )
            return func_GetG2Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG2Duration(  );
        }
    }
    
    double default_GetG2Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG2Duration( );
    }

    virtual double GetMDuration(  ) const  {
        if( bp::override func_GetMDuration = this->get_override( "GetMDuration" ) )
            return func_GetMDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetMDuration(  );
        }
    }
    
    double default_GetMDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetMDuration( );
    }

    virtual double GetSDuration(  ) const  {
        if( bp::override func_GetSDuration = this->get_override( "GetSDuration" ) )
            return func_GetSDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetSDuration(  );
        }
    }
    
    double default_GetSDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetSDuration( );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimplePhaseBasedCellCycleModel::Initialise( );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractPhaseBasedCellCycleModel::ReadyToDivide( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

    virtual void SetG1Duration(  ){
        if( bp::override func_SetG1Duration = this->get_override( "SetG1Duration" ) )
            func_SetG1Duration(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::SetG1Duration(  );
        }
    }
    
    virtual void default_SetG1Duration(  ){
        AbstractSimplePhaseBasedCellCycleModel::SetG1Duration( );
    }

    virtual void SetStemCellG1Duration( double stemCellG1Duration ) {
        if( bp::override func_SetStemCellG1Duration = this->get_override( "SetStemCellG1Duration" ) )
            func_SetStemCellG1Duration( stemCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
        }
    }
    
    void default_SetStemCellG1Duration( double stemCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
    }

    virtual void SetTransitCellG1Duration( double transitCellG1Duration ) {
        if( bp::override func_SetTransitCellG1Duration = this->get_override( "SetTransitCellG1Duration" ) )
            func_SetTransitCellG1Duration( transitCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
        }
    }
    
    void default_SetTransitCellG1Duration( double transitCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
    }

    virtual void UpdateCellCyclePhase(  ) {
        if( bp::override func_UpdateCellCyclePhase = this->get_override( "UpdateCellCyclePhase" ) )
            func_UpdateCellCyclePhase(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase(  );
        }
    }
    
    void default_UpdateCellCyclePhase(  ) {
        AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase( );
    }

};

struct AbstractTargetAreaModifier_less__2__greater__wrapper : AbstractTargetAreaModifier< 2 >, bp::wrapper< AbstractTargetAreaModifier< 2 > > {

    AbstractTargetAreaModifier_less__2__greater__wrapper( )
    : AbstractTargetAreaModifier<2>( )
      , bp::wrapper< AbstractTargetAreaModifier< 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractTargetAreaModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractTargetAreaModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractTargetAreaModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractTargetAreaModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateTargetAreaOfCell( ::CellPtr const pCell ){
        bp::override func_UpdateTargetAreaOfCell = this->get_override( "UpdateTargetAreaOfCell" );
        func_UpdateTargetAreaOfCell( pCell );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct AbstractTargetAreaModifier_less__3__greater__wrapper : AbstractTargetAreaModifier< 3 >, bp::wrapper< AbstractTargetAreaModifier< 3 > > {

    AbstractTargetAreaModifier_less__3__greater__wrapper( )
    : AbstractTargetAreaModifier<3>( )
      , bp::wrapper< AbstractTargetAreaModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractTargetAreaModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        AbstractTargetAreaModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractTargetAreaModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractTargetAreaModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateTargetAreaOfCell( ::CellPtr const pCell ){
        bp::override func_UpdateTargetAreaOfCell = this->get_override( "UpdateTargetAreaOfCell" );
        func_UpdateTargetAreaOfCell( pCell );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper : AbstractTwoBodyInteractionForce< 2, 2 >, bp::wrapper< AbstractTwoBodyInteractionForce< 2, 2 > > {

    AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper( )
    : AbstractTwoBodyInteractionForce<2, 2>( )
      , bp::wrapper< AbstractTwoBodyInteractionForce< 2, 2 > >(){
        // null constructor
    
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 2, 2 > & rCellPopulation ){
        bp::override func_CalculateForceBetweenNodes = this->get_override( "CalculateForceBetweenNodes" );
        return func_CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 2, 2 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        AbstractTwoBodyInteractionForce< 2, 2 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

};

struct AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper : AbstractTwoBodyInteractionForce< 3, 3 >, bp::wrapper< AbstractTwoBodyInteractionForce< 3, 3 > > {

    AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper( )
    : AbstractTwoBodyInteractionForce<3, 3>( )
      , bp::wrapper< AbstractTwoBodyInteractionForce< 3, 3 > >(){
        // null constructor
    
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 3, 3 > & rCellPopulation ){
        bp::override func_CalculateForceBetweenNodes = this->get_override( "CalculateForceBetweenNodes" );
        return func_CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 3, 3 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        AbstractTwoBodyInteractionForce< 3, 3 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

};

struct AdhesionPottsUpdateRule_less__2__greater__wrapper : AdhesionPottsUpdateRule< 2 >, bp::wrapper< AdhesionPottsUpdateRule< 2 > > {

    AdhesionPottsUpdateRule_less__2__greater__wrapper(AdhesionPottsUpdateRule<2> const & arg )
    : AdhesionPottsUpdateRule<2>( arg )
      , bp::wrapper< AdhesionPottsUpdateRule< 2 > >(){
        // copy constructor
        
    }

    AdhesionPottsUpdateRule_less__2__greater__wrapper( )
    : AdhesionPottsUpdateRule<2>( )
      , bp::wrapper< AdhesionPottsUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        return AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual double GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        if( bp::override func_GetCellBoundaryAdhesionEnergy = this->get_override( "GetCellBoundaryAdhesionEnergy" ) )
            return func_GetCellBoundaryAdhesionEnergy( pCell );
        else{
            return this->AdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy( pCell );
        }
    }
    
    double default_GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        return AdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy( pCell );
    }

    virtual double GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        if( bp::override func_GetCellCellAdhesionEnergy = this->get_override( "GetCellCellAdhesionEnergy" ) )
            return func_GetCellCellAdhesionEnergy( pCellA, pCellB );
        else{
            return this->AdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
        }
    }
    
    double default_GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        return AdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AdhesionPottsUpdateRule_less__3__greater__wrapper : AdhesionPottsUpdateRule< 3 >, bp::wrapper< AdhesionPottsUpdateRule< 3 > > {

    AdhesionPottsUpdateRule_less__3__greater__wrapper(AdhesionPottsUpdateRule<3> const & arg )
    : AdhesionPottsUpdateRule<3>( arg )
      , bp::wrapper< AdhesionPottsUpdateRule< 3 > >(){
        // copy constructor
        
    }

    AdhesionPottsUpdateRule_less__3__greater__wrapper( )
    : AdhesionPottsUpdateRule<3>( )
      , bp::wrapper< AdhesionPottsUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        return AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual double GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        if( bp::override func_GetCellBoundaryAdhesionEnergy = this->get_override( "GetCellBoundaryAdhesionEnergy" ) )
            return func_GetCellBoundaryAdhesionEnergy( pCell );
        else{
            return this->AdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy( pCell );
        }
    }
    
    double default_GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        return AdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy( pCell );
    }

    virtual double GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        if( bp::override func_GetCellCellAdhesionEnergy = this->get_override( "GetCellCellAdhesionEnergy" ) )
            return func_GetCellCellAdhesionEnergy( pCellA, pCellB );
        else{
            return this->AdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
        }
    }
    
    double default_GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        return AdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct ApoptoticCellKiller_less__2__greater__wrapper : ApoptoticCellKiller< 2 >, bp::wrapper< ApoptoticCellKiller< 2 > > {

    ApoptoticCellKiller_less__2__greater__wrapper(ApoptoticCellKiller<2> const & arg )
    : ApoptoticCellKiller<2>( arg )
      , bp::wrapper< ApoptoticCellKiller< 2 > >(){
        // copy constructor
        
    }

    ApoptoticCellKiller_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation )
    : ApoptoticCellKiller<2>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< ApoptoticCellKiller< 2 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->ApoptoticCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        ApoptoticCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->ApoptoticCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        ApoptoticCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct ApoptoticCellKiller_less__3__greater__wrapper : ApoptoticCellKiller< 3 >, bp::wrapper< ApoptoticCellKiller< 3 > > {

    ApoptoticCellKiller_less__3__greater__wrapper(ApoptoticCellKiller<3> const & arg )
    : ApoptoticCellKiller<3>( arg )
      , bp::wrapper< ApoptoticCellKiller< 3 > >(){
        // copy constructor
        
    }

    ApoptoticCellKiller_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation )
    : ApoptoticCellKiller<3>( boost::python::ptr(pCellPopulation) )
      , bp::wrapper< ApoptoticCellKiller< 3 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->ApoptoticCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        ApoptoticCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->ApoptoticCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        ApoptoticCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct CaBasedCellPopulation_less__2__greater__wrapper : CaBasedCellPopulation< 2 >, bp::wrapper< CaBasedCellPopulation< 2 > > {

    CaBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices, unsigned int latticeCarryingCapacity=1U, bool deleteMesh=false, bool validate=false )
    : CaBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), locationIndices, latticeCarryingCapacity, deleteMesh, validate )
      , bp::wrapper< CaBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    CaBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh )
    : CaBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< CaBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        CaBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->CaBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return CaBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->CaBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        CaBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
    }

    virtual double EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        if( bp::override func_EvaluateDivisionPropensity = this->get_override( "EvaluateDivisionPropensity" ) )
            return func_EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        }
    }
    
    double default_EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->CaBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return CaBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->CaBasedCellPopulation< 2 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const default_GetUpdateRuleCollection(  ) const  {
        return CaBasedCellPopulation< 2 >::GetUpdateRuleCollection( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->CaBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return CaBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsRoomToDivide( pCell );
    }

    virtual bool IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_IsSiteAvailable = this->get_override( "IsSiteAvailable" ) )
            return func_IsSiteAvailable( index, pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsSiteAvailable( index, pCell );
        }
    }
    
    bool default_IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsSiteAvailable( index, pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->CaBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        CaBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->CaBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        CaBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->CaBasedCellPopulation< 2 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        CaBasedCellPopulation< 2 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->CaBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return CaBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->CaBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        CaBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->CaBasedCellPopulation< 2 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        CaBasedCellPopulation< 2 >::UpdateCellLocations( dt );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct CaBasedCellPopulation_less__3__greater__wrapper : CaBasedCellPopulation< 3 >, bp::wrapper< CaBasedCellPopulation< 3 > > {

    CaBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices, unsigned int latticeCarryingCapacity=1U, bool deleteMesh=false, bool validate=false )
    : CaBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, latticeCarryingCapacity, deleteMesh, validate )
      , bp::wrapper< CaBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    CaBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh )
    : CaBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< CaBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        CaBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->CaBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return CaBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->CaBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        CaBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
    }

    virtual double EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        if( bp::override func_EvaluateDivisionPropensity = this->get_override( "EvaluateDivisionPropensity" ) )
            return func_EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        }
    }
    
    double default_EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->CaBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return CaBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->CaBasedCellPopulation< 3 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const default_GetUpdateRuleCollection(  ) const  {
        return CaBasedCellPopulation< 3 >::GetUpdateRuleCollection( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->CaBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return CaBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsRoomToDivide( pCell );
    }

    virtual bool IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_IsSiteAvailable = this->get_override( "IsSiteAvailable" ) )
            return func_IsSiteAvailable( index, pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsSiteAvailable( index, pCell );
        }
    }
    
    bool default_IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsSiteAvailable( index, pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->CaBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        CaBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->CaBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        CaBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->CaBasedCellPopulation< 3 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        CaBasedCellPopulation< 3 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->CaBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return CaBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->CaBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        CaBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->CaBasedCellPopulation< 3 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        CaBasedCellPopulation< 3 >::UpdateCellLocations( dt );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct CellwiseSourceEllipticPde_less__2__greater__wrapper : CellwiseSourceEllipticPde< 2 >, bp::wrapper< CellwiseSourceEllipticPde< 2 > > {

    CellwiseSourceEllipticPde_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > & rCellPopulation, double sourceCoefficient=0. )
    : CellwiseSourceEllipticPde<2>( boost::ref(rCellPopulation), sourceCoefficient )
      , bp::wrapper< CellwiseSourceEllipticPde< 2 > >(){
        // constructor
    
    }

    virtual double ComputeConstantInUSourceTerm( ::ChastePoint< 2 > const & rX, ::Element< 2, 2 > * pElement ) {
        if( bp::override func_ComputeConstantInUSourceTerm = this->get_override( "ComputeConstantInUSourceTerm" ) )
            return func_ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        else{
            return this->CellwiseSourceEllipticPde< 2 >::ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        }
    }
    
    double default_ComputeConstantInUSourceTerm( ::ChastePoint< 2 > const & rX, ::Element< 2, 2 > * pElement ) {
        return CellwiseSourceEllipticPde< 2 >::ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
    }

    virtual ::boost::numeric::ublas::c_matrix< double, 2, 2 > ComputeDiffusionTerm( ::ChastePoint< 2 > const & rX ) {
        if( bp::override func_ComputeDiffusionTerm = this->get_override( "ComputeDiffusionTerm" ) )
            return func_ComputeDiffusionTerm( boost::ref(rX) );
        else{
            return this->CellwiseSourceEllipticPde< 2 >::ComputeDiffusionTerm( boost::ref(rX) );
        }
    }
    
    ::boost::numeric::ublas::c_matrix< double, 2, 2 > default_ComputeDiffusionTerm( ::ChastePoint< 2 > const & rX ) {
        return CellwiseSourceEllipticPde< 2 >::ComputeDiffusionTerm( boost::ref(rX) );
    }

    virtual double ComputeLinearInUCoeffInSourceTerm( ::ChastePoint< 2 > const & rX, ::Element< 2, 2 > * pElement ) {
        if( bp::override func_ComputeLinearInUCoeffInSourceTerm = this->get_override( "ComputeLinearInUCoeffInSourceTerm" ) )
            return func_ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        else{
            return this->CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        }
    }
    
    double default_ComputeLinearInUCoeffInSourceTerm( ::ChastePoint< 2 > const & rX, ::Element< 2, 2 > * pElement ) {
        return CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
    }

    virtual double ComputeLinearInUCoeffInSourceTermAtNode( ::Node< 2 > const & rNode ) {
        if( bp::override func_ComputeLinearInUCoeffInSourceTermAtNode = this->get_override( "ComputeLinearInUCoeffInSourceTermAtNode" ) )
            return func_ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
        else{
            return this->CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
        }
    }
    
    double default_ComputeLinearInUCoeffInSourceTermAtNode( ::Node< 2 > const & rNode ) {
        return CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
    }

};

struct CellwiseSourceEllipticPde_less__3__greater__wrapper : CellwiseSourceEllipticPde< 3 >, bp::wrapper< CellwiseSourceEllipticPde< 3 > > {

    CellwiseSourceEllipticPde_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > & rCellPopulation, double sourceCoefficient=0. )
    : CellwiseSourceEllipticPde<3>( boost::ref(rCellPopulation), sourceCoefficient )
      , bp::wrapper< CellwiseSourceEllipticPde< 3 > >(){
        // constructor
    
    }

    virtual double ComputeConstantInUSourceTerm( ::ChastePoint< 3 > const & rX, ::Element< 3, 3 > * pElement ) {
        if( bp::override func_ComputeConstantInUSourceTerm = this->get_override( "ComputeConstantInUSourceTerm" ) )
            return func_ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        else{
            return this->CellwiseSourceEllipticPde< 3 >::ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        }
    }
    
    double default_ComputeConstantInUSourceTerm( ::ChastePoint< 3 > const & rX, ::Element< 3, 3 > * pElement ) {
        return CellwiseSourceEllipticPde< 3 >::ComputeConstantInUSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
    }

    virtual ::boost::numeric::ublas::c_matrix< double, 3, 3 > ComputeDiffusionTerm( ::ChastePoint< 3 > const & rX ) {
        if( bp::override func_ComputeDiffusionTerm = this->get_override( "ComputeDiffusionTerm" ) )
            return func_ComputeDiffusionTerm( boost::ref(rX) );
        else{
            return this->CellwiseSourceEllipticPde< 3 >::ComputeDiffusionTerm( boost::ref(rX) );
        }
    }
    
    ::boost::numeric::ublas::c_matrix< double, 3, 3 > default_ComputeDiffusionTerm( ::ChastePoint< 3 > const & rX ) {
        return CellwiseSourceEllipticPde< 3 >::ComputeDiffusionTerm( boost::ref(rX) );
    }

    virtual double ComputeLinearInUCoeffInSourceTerm( ::ChastePoint< 3 > const & rX, ::Element< 3, 3 > * pElement ) {
        if( bp::override func_ComputeLinearInUCoeffInSourceTerm = this->get_override( "ComputeLinearInUCoeffInSourceTerm" ) )
            return func_ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        else{
            return this->CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
        }
    }
    
    double default_ComputeLinearInUCoeffInSourceTerm( ::ChastePoint< 3 > const & rX, ::Element< 3, 3 > * pElement ) {
        return CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTerm( boost::ref(rX), boost::python::ptr(pElement) );
    }

    virtual double ComputeLinearInUCoeffInSourceTermAtNode( ::Node< 3 > const & rNode ) {
        if( bp::override func_ComputeLinearInUCoeffInSourceTermAtNode = this->get_override( "ComputeLinearInUCoeffInSourceTermAtNode" ) )
            return func_ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
        else{
            return this->CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
        }
    }
    
    double default_ComputeLinearInUCoeffInSourceTermAtNode( ::Node< 3 > const & rNode ) {
        return CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTermAtNode( boost::ref(rNode) );
    }

};

struct DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper : DifferentialAdhesionPottsUpdateRule< 2 >, bp::wrapper< DifferentialAdhesionPottsUpdateRule< 2 > > {

    DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper(DifferentialAdhesionPottsUpdateRule<2> const & arg )
    : DifferentialAdhesionPottsUpdateRule<2>( arg )
      , bp::wrapper< DifferentialAdhesionPottsUpdateRule< 2 > >(){
        // copy constructor
        
    }

    DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper( )
    : DifferentialAdhesionPottsUpdateRule<2>( )
      , bp::wrapper< DifferentialAdhesionPottsUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        if( bp::override func_GetCellBoundaryAdhesionEnergy = this->get_override( "GetCellBoundaryAdhesionEnergy" ) )
            return func_GetCellBoundaryAdhesionEnergy( pCell );
        else{
            return this->DifferentialAdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy( pCell );
        }
    }
    
    double default_GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        return DifferentialAdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy( pCell );
    }

    virtual double GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        if( bp::override func_GetCellCellAdhesionEnergy = this->get_override( "GetCellCellAdhesionEnergy" ) )
            return func_GetCellCellAdhesionEnergy( pCellA, pCellB );
        else{
            return this->DifferentialAdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
        }
    }
    
    double default_GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        return DifferentialAdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->DifferentialAdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        DifferentialAdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        return AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

};

struct DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper : DifferentialAdhesionPottsUpdateRule< 3 >, bp::wrapper< DifferentialAdhesionPottsUpdateRule< 3 > > {

    DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper(DifferentialAdhesionPottsUpdateRule<3> const & arg )
    : DifferentialAdhesionPottsUpdateRule<3>( arg )
      , bp::wrapper< DifferentialAdhesionPottsUpdateRule< 3 > >(){
        // copy constructor
        
    }

    DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper( )
    : DifferentialAdhesionPottsUpdateRule<3>( )
      , bp::wrapper< DifferentialAdhesionPottsUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        if( bp::override func_GetCellBoundaryAdhesionEnergy = this->get_override( "GetCellBoundaryAdhesionEnergy" ) )
            return func_GetCellBoundaryAdhesionEnergy( pCell );
        else{
            return this->DifferentialAdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy( pCell );
        }
    }
    
    double default_GetCellBoundaryAdhesionEnergy( ::CellPtr pCell ) {
        return DifferentialAdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy( pCell );
    }

    virtual double GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        if( bp::override func_GetCellCellAdhesionEnergy = this->get_override( "GetCellCellAdhesionEnergy" ) )
            return func_GetCellCellAdhesionEnergy( pCellA, pCellB );
        else{
            return this->DifferentialAdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
        }
    }
    
    double default_GetCellCellAdhesionEnergy( ::CellPtr pCellA, ::CellPtr pCellB ) {
        return DifferentialAdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy( pCellA, pCellB );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->DifferentialAdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        DifferentialAdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        return AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

};

struct DiffusionCaUpdateRule_less__2__greater__wrapper : DiffusionCaUpdateRule< 2 >, bp::wrapper< DiffusionCaUpdateRule< 2 > > {

    DiffusionCaUpdateRule_less__2__greater__wrapper(DiffusionCaUpdateRule<2> const & arg )
    : DiffusionCaUpdateRule<2>( arg )
      , bp::wrapper< DiffusionCaUpdateRule< 2 > >(){
        // copy constructor
        
    }

    DiffusionCaUpdateRule_less__2__greater__wrapper( )
    : DiffusionCaUpdateRule<2>( )
      , bp::wrapper< DiffusionCaUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        if( bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" ) )
            return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        else{
            return this->DiffusionCaUpdateRule< 2 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        }
    }
    
    double default_EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        return DiffusionCaUpdateRule< 2 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct DiffusionCaUpdateRule_less__3__greater__wrapper : DiffusionCaUpdateRule< 3 >, bp::wrapper< DiffusionCaUpdateRule< 3 > > {

    DiffusionCaUpdateRule_less__3__greater__wrapper(DiffusionCaUpdateRule<3> const & arg )
    : DiffusionCaUpdateRule<3>( arg )
      , bp::wrapper< DiffusionCaUpdateRule< 3 > >(){
        // copy constructor
        
    }

    DiffusionCaUpdateRule_less__3__greater__wrapper( )
    : DiffusionCaUpdateRule<3>( )
      , bp::wrapper< DiffusionCaUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 3 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        if( bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" ) )
            return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        else{
            return this->DiffusionCaUpdateRule< 3 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        }
    }
    
    double default_EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 3 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        return DiffusionCaUpdateRule< 3 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->DiffusionCaUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        DiffusionCaUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct EllipticGrowingDomainPdeModifier_less__2__greater__wrapper : EllipticGrowingDomainPdeModifier< 2 >, bp::wrapper< EllipticGrowingDomainPdeModifier< 2 > > {

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractPdeModifier< 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct EllipticGrowingDomainPdeModifier_less__3__greater__wrapper : EllipticGrowingDomainPdeModifier< 3 >, bp::wrapper< EllipticGrowingDomainPdeModifier< 3 > > {

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractPdeModifier< 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper : GeneralisedLinearSpringForce< 2, 2 >, bp::wrapper< GeneralisedLinearSpringForce< 2, 2 > > {

    GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper(GeneralisedLinearSpringForce<2, 2> const & arg )
    : GeneralisedLinearSpringForce<2, 2>( arg )
      , bp::wrapper< GeneralisedLinearSpringForce< 2, 2 > >(){
        // copy constructor
        
    }

    GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper( )
    : GeneralisedLinearSpringForce<2, 2>( )
      , bp::wrapper< GeneralisedLinearSpringForce< 2, 2 > >(){
        // null constructor
    
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_CalculateForceBetweenNodes = this->get_override( "CalculateForceBetweenNodes" ) )
            return func_CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
        else{
            return this->GeneralisedLinearSpringForce< 2, 2 >::CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        return GeneralisedLinearSpringForce< 2, 2 >::CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->GeneralisedLinearSpringForce< 2, 2 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        GeneralisedLinearSpringForce< 2, 2 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

    virtual double VariableSpringConstantMultiplicationFactor( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 2, 2 > & rCellPopulation, bool isCloserThanRestLength ) {
        if( bp::override func_VariableSpringConstantMultiplicationFactor = this->get_override( "VariableSpringConstantMultiplicationFactor" ) )
            return func_VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
        else{
            return this->GeneralisedLinearSpringForce< 2, 2 >::VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
        }
    }
    
    double default_VariableSpringConstantMultiplicationFactor( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 2, 2 > & rCellPopulation, bool isCloserThanRestLength ) {
        return GeneralisedLinearSpringForce< 2, 2 >::VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

};

struct GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper : GeneralisedLinearSpringForce< 3, 3 >, bp::wrapper< GeneralisedLinearSpringForce< 3, 3 > > {

    GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper(GeneralisedLinearSpringForce<3, 3> const & arg )
    : GeneralisedLinearSpringForce<3, 3>( arg )
      , bp::wrapper< GeneralisedLinearSpringForce< 3, 3 > >(){
        // copy constructor
        
    }

    GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper( )
    : GeneralisedLinearSpringForce<3, 3>( )
      , bp::wrapper< GeneralisedLinearSpringForce< 3, 3 > >(){
        // null constructor
    
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_CalculateForceBetweenNodes = this->get_override( "CalculateForceBetweenNodes" ) )
            return func_CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
        else{
            return this->GeneralisedLinearSpringForce< 3, 3 >::CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_CalculateForceBetweenNodes( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        return GeneralisedLinearSpringForce< 3, 3 >::CalculateForceBetweenNodes( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->GeneralisedLinearSpringForce< 3, 3 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        GeneralisedLinearSpringForce< 3, 3 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

    virtual double VariableSpringConstantMultiplicationFactor( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 3, 3 > & rCellPopulation, bool isCloserThanRestLength ) {
        if( bp::override func_VariableSpringConstantMultiplicationFactor = this->get_override( "VariableSpringConstantMultiplicationFactor" ) )
            return func_VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
        else{
            return this->GeneralisedLinearSpringForce< 3, 3 >::VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
        }
    }
    
    double default_VariableSpringConstantMultiplicationFactor( unsigned int nodeAGlobalIndex, unsigned int nodeBGlobalIndex, ::AbstractCellPopulation< 3, 3 > & rCellPopulation, bool isCloserThanRestLength ) {
        return GeneralisedLinearSpringForce< 3, 3 >::VariableSpringConstantMultiplicationFactor( nodeAGlobalIndex, nodeBGlobalIndex, boost::ref(rCellPopulation), isCloserThanRestLength );
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

};

struct MeshBasedCellPopulation_less__2_comma__2__greater__wrapper : MeshBasedCellPopulation< 2, 2 >, bp::wrapper< MeshBasedCellPopulation< 2, 2 > > {

    MeshBasedCellPopulation_less__2_comma__2__greater__wrapper(::MutableMesh< 2, 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, bool validate=true )
    : MeshBasedCellPopulation<2, 2>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, validate )
      , bp::wrapper< MeshBasedCellPopulation< 2, 2 > >(){
        // constructor
    
    }

    MeshBasedCellPopulation_less__2_comma__2__greater__wrapper(::MutableMesh< 2, 2 > & rMesh )
    : MeshBasedCellPopulation<2, 2>( boost::ref(rMesh) )
      , bp::wrapper< MeshBasedCellPopulation< 2, 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return MeshBasedCellPopulation< 2, 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 2 > * pNewNode ) {
        return MeshBasedCellPopulation< 2, 2 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return MeshBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return MeshBasedCellPopulation< 2, 2 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return MeshBasedCellPopulation< 2, 2 >::GetWidth( rDimension );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        MeshBasedCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        MeshBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        MeshBasedCellPopulation< 2, 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        MeshBasedCellPopulation< 2, 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ){
        if( bp::override func_UpdateGhostNodesAfterReMesh = this->get_override( "UpdateGhostNodesAfterReMesh" ) )
            func_UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    virtual void default_UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ){
        MeshBasedCellPopulation< 2, 2 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
    }

    virtual void Validate(  ){
        if( bp::override func_Validate = this->get_override( "Validate" ) )
            func_Validate(  );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::Validate(  );
        }
    }
    
    virtual void default_Validate(  ){
        MeshBasedCellPopulation< 2, 2 >::Validate( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        if( bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" ) )
            func_WriteVtkResultsToFile( rDirectory );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::WriteVtkResultsToFile( rDirectory );
        }
    }
    
    void default_WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 2, 2 >::WriteVtkResultsToFile( rDirectory );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

};

struct MeshBasedCellPopulation_less__3_comma__3__greater__wrapper : MeshBasedCellPopulation< 3, 3 >, bp::wrapper< MeshBasedCellPopulation< 3, 3 > > {

    MeshBasedCellPopulation_less__3_comma__3__greater__wrapper(::MutableMesh< 3, 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, bool validate=true )
    : MeshBasedCellPopulation<3, 3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, validate )
      , bp::wrapper< MeshBasedCellPopulation< 3, 3 > >(){
        // constructor
    
    }

    MeshBasedCellPopulation_less__3_comma__3__greater__wrapper(::MutableMesh< 3, 3 > & rMesh )
    : MeshBasedCellPopulation<3, 3>( boost::ref(rMesh) )
      , bp::wrapper< MeshBasedCellPopulation< 3, 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return MeshBasedCellPopulation< 3, 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual unsigned int AddNode( ::Node< 3 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 3 > * pNewNode ) {
        return MeshBasedCellPopulation< 3, 3 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return MeshBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return MeshBasedCellPopulation< 3, 3 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return MeshBasedCellPopulation< 3, 3 >::GetWidth( rDimension );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        MeshBasedCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        MeshBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        MeshBasedCellPopulation< 3, 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        MeshBasedCellPopulation< 3, 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ){
        if( bp::override func_UpdateGhostNodesAfterReMesh = this->get_override( "UpdateGhostNodesAfterReMesh" ) )
            func_UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    virtual void default_UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ){
        MeshBasedCellPopulation< 3, 3 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
    }

    virtual void Validate(  ){
        if( bp::override func_Validate = this->get_override( "Validate" ) )
            func_Validate(  );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::Validate(  );
        }
    }
    
    virtual void default_Validate(  ){
        MeshBasedCellPopulation< 3, 3 >::Validate( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        if( bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" ) )
            func_WriteVtkResultsToFile( rDirectory );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::WriteVtkResultsToFile( rDirectory );
        }
    }
    
    void default_WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 3, 3 >::WriteVtkResultsToFile( rDirectory );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

};

struct MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper : MeshBasedCellPopulationWithGhostNodes< 2 >, bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 2 > > {

    MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper(::MutableMesh< 2, 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, double ghostSpringStiffness=15. )
    : MeshBasedCellPopulationWithGhostNodes<2>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, ghostSpringStiffness )
      , bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 2 > >(){
        // constructor
    
    }

    MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper(::MutableMesh< 2, 2 > & rMesh, double ghostSpringStiffness=15. )
    : MeshBasedCellPopulationWithGhostNodes<2>( boost::ref(rMesh), ghostSpringStiffness )
      , bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        MeshBasedCellPopulationWithGhostNodes< 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return MeshBasedCellPopulationWithGhostNodes< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return MeshBasedCellPopulationWithGhostNodes< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ) {
        if( bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" ) )
            return func_GetTetrahedralMeshForPdeModifier(  );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 2 >::GetTetrahedralMeshForPdeModifier(  );
        }
    }
    
    ::TetrahedralMesh< 2, 2 > * default_GetTetrahedralMeshForPdeModifier(  ) {
        return MeshBasedCellPopulationWithGhostNodes< 2 >::GetTetrahedralMeshForPdeModifier( );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 2 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return MeshBasedCellPopulationWithGhostNodes< 2 >::IsGhostNode( index );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        MeshBasedCellPopulationWithGhostNodes< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        MeshBasedCellPopulationWithGhostNodes< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ) {
        if( bp::override func_UpdateGhostNodesAfterReMesh = this->get_override( "UpdateGhostNodesAfterReMesh" ) )
            func_UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 2 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    void default_UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ) {
        MeshBasedCellPopulationWithGhostNodes< 2 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        if( bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" ) )
            func_WriteVtkResultsToFile( rDirectory );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 2 >::WriteVtkResultsToFile( rDirectory );
        }
    }
    
    void default_WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        MeshBasedCellPopulationWithGhostNodes< 2 >::WriteVtkResultsToFile( rDirectory );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 2 > * pNewNode ) {
        return MeshBasedCellPopulation< 2, 2 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return MeshBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return MeshBasedCellPopulation< 2, 2 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return MeshBasedCellPopulation< 2, 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        MeshBasedCellPopulation< 2, 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        MeshBasedCellPopulation< 2, 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper : MeshBasedCellPopulationWithGhostNodes< 3 >, bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 3 > > {

    MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper(::MutableMesh< 3, 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, double ghostSpringStiffness=15. )
    : MeshBasedCellPopulationWithGhostNodes<3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, ghostSpringStiffness )
      , bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 3 > >(){
        // constructor
    
    }

    MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper(::MutableMesh< 3, 3 > & rMesh, double ghostSpringStiffness=15. )
    : MeshBasedCellPopulationWithGhostNodes<3>( boost::ref(rMesh), ghostSpringStiffness )
      , bp::wrapper< MeshBasedCellPopulationWithGhostNodes< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        MeshBasedCellPopulationWithGhostNodes< 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return MeshBasedCellPopulationWithGhostNodes< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return MeshBasedCellPopulationWithGhostNodes< 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ) {
        if( bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" ) )
            return func_GetTetrahedralMeshForPdeModifier(  );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 3 >::GetTetrahedralMeshForPdeModifier(  );
        }
    }
    
    ::TetrahedralMesh< 3, 3 > * default_GetTetrahedralMeshForPdeModifier(  ) {
        return MeshBasedCellPopulationWithGhostNodes< 3 >::GetTetrahedralMeshForPdeModifier( );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->MeshBasedCellPopulationWithGhostNodes< 3 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return MeshBasedCellPopulationWithGhostNodes< 3 >::IsGhostNode( index );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        MeshBasedCellPopulationWithGhostNodes< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        MeshBasedCellPopulationWithGhostNodes< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ) {
        if( bp::override func_UpdateGhostNodesAfterReMesh = this->get_override( "UpdateGhostNodesAfterReMesh" ) )
            func_UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 3 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    void default_UpdateGhostNodesAfterReMesh( ::NodeMap & rMap ) {
        MeshBasedCellPopulationWithGhostNodes< 3 >::UpdateGhostNodesAfterReMesh( boost::ref(rMap) );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        if( bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" ) )
            func_WriteVtkResultsToFile( rDirectory );
        else{
            this->MeshBasedCellPopulationWithGhostNodes< 3 >::WriteVtkResultsToFile( rDirectory );
        }
    }
    
    void default_WriteVtkResultsToFile( ::std::string const & rDirectory ) {
        MeshBasedCellPopulationWithGhostNodes< 3 >::WriteVtkResultsToFile( rDirectory );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int AddNode( ::Node< 3 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 3 > * pNewNode ) {
        return MeshBasedCellPopulation< 3, 3 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return MeshBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return MeshBasedCellPopulation< 3, 3 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return MeshBasedCellPopulation< 3, 3 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        MeshBasedCellPopulation< 3, 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        MeshBasedCellPopulation< 3, 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct NagaiHondaForce_less__2__greater__wrapper : NagaiHondaForce< 2 >, bp::wrapper< NagaiHondaForce< 2 > > {

    NagaiHondaForce_less__2__greater__wrapper(NagaiHondaForce<2> const & arg )
    : NagaiHondaForce<2>( arg )
      , bp::wrapper< NagaiHondaForce< 2 > >(){
        // copy constructor
        
    }

    NagaiHondaForce_less__2__greater__wrapper( )
    : NagaiHondaForce<2>( )
      , bp::wrapper< NagaiHondaForce< 2 > >(){
        // null constructor
    
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->NagaiHondaForce< 2 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        NagaiHondaForce< 2 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual double GetAdhesionParameter( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB, ::VertexBasedCellPopulation< 2 > & rVertexCellPopulation ) {
        if( bp::override func_GetAdhesionParameter = this->get_override( "GetAdhesionParameter" ) )
            return func_GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
        else{
            return this->NagaiHondaForce< 2 >::GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
        }
    }
    
    double default_GetAdhesionParameter( ::Node< 2 > * pNodeA, ::Node< 2 > * pNodeB, ::VertexBasedCellPopulation< 2 > & rVertexCellPopulation ) {
        return NagaiHondaForce< 2 >::GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->NagaiHondaForce< 2 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        NagaiHondaForce< 2 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

};

struct NagaiHondaForce_less__3__greater__wrapper : NagaiHondaForce< 3 >, bp::wrapper< NagaiHondaForce< 3 > > {

    NagaiHondaForce_less__3__greater__wrapper(NagaiHondaForce<3> const & arg )
    : NagaiHondaForce<3>( arg )
      , bp::wrapper< NagaiHondaForce< 3 > >(){
        // copy constructor
        
    }

    NagaiHondaForce_less__3__greater__wrapper( )
    : NagaiHondaForce<3>( )
      , bp::wrapper< NagaiHondaForce< 3 > >(){
        // null constructor
    
    }

    virtual void AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_AddForceContribution = this->get_override( "AddForceContribution" ) )
            func_AddForceContribution( boost::ref(rCellPopulation) );
        else{
            this->NagaiHondaForce< 3 >::AddForceContribution( boost::ref(rCellPopulation) );
        }
    }
    
    void default_AddForceContribution( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        NagaiHondaForce< 3 >::AddForceContribution( boost::ref(rCellPopulation) );
    }

    virtual double GetAdhesionParameter( ::Node< 3 > * pNodeA, ::Node< 3 > * pNodeB, ::VertexBasedCellPopulation< 3 > & rVertexCellPopulation ) {
        if( bp::override func_GetAdhesionParameter = this->get_override( "GetAdhesionParameter" ) )
            return func_GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
        else{
            return this->NagaiHondaForce< 3 >::GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
        }
    }
    
    double default_GetAdhesionParameter( ::Node< 3 > * pNodeA, ::Node< 3 > * pNodeB, ::VertexBasedCellPopulation< 3 > & rVertexCellPopulation ) {
        return NagaiHondaForce< 3 >::GetAdhesionParameter( boost::python::ptr(pNodeA), boost::python::ptr(pNodeB), boost::ref(rVertexCellPopulation) );
    }

    virtual void OutputForceParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputForceParameters = this->get_override( "OutputForceParameters" ) )
            func_OutputForceParameters( boost::ref(rParamsFile) );
        else{
            this->NagaiHondaForce< 3 >::OutputForceParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputForceParameters( ::out_stream & rParamsFile ) {
        NagaiHondaForce< 3 >::OutputForceParameters( boost::ref(rParamsFile) );
    }

};

struct NodeBasedCellPopulation_less__2__greater__wrapper : NodeBasedCellPopulation< 2 >, bp::wrapper< NodeBasedCellPopulation< 2 > > {

    NodeBasedCellPopulation_less__2__greater__wrapper(::NodesOnlyMesh< 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, bool validate=true )
    : NodeBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, validate )
      , bp::wrapper< NodeBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    NodeBasedCellPopulation_less__2__greater__wrapper(::NodesOnlyMesh< 2 > & rMesh )
    : NodeBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< NodeBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->NodeBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        NodeBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->NodeBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        NodeBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->NodeBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        NodeBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->NodeBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return NodeBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->NodeBasedCellPopulation< 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return NodeBasedCellPopulation< 2 >::GetCellUsingLocationIndex( index );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->NodeBasedCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return NodeBasedCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->NodeBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return NodeBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->NodeBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return NodeBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->NodeBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return NodeBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->NodeBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        NodeBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->NodeBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return NodeBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->NodeBasedCellPopulation< 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ) {
        NodeBasedCellPopulation< 2 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->NodeBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        NodeBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->NodeBasedCellPopulation< 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        NodeBasedCellPopulation< 2 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        if( bp::override func_UpdateParticlesAfterReMesh = this->get_override( "UpdateParticlesAfterReMesh" ) )
            func_UpdateParticlesAfterReMesh( boost::ref(rMap) );
        else{
            this->NodeBasedCellPopulation< 2 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    virtual void default_UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        NodeBasedCellPopulation< 2 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
    }

    virtual void Validate(  ){
        if( bp::override func_Validate = this->get_override( "Validate" ) )
            func_Validate(  );
        else{
            this->NodeBasedCellPopulation< 2 >::Validate(  );
        }
    }
    
    virtual void default_Validate(  ){
        NodeBasedCellPopulation< 2 >::Validate( );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct NodeBasedCellPopulation_less__3__greater__wrapper : NodeBasedCellPopulation< 3 >, bp::wrapper< NodeBasedCellPopulation< 3 > > {

    NodeBasedCellPopulation_less__3__greater__wrapper(::NodesOnlyMesh< 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>(), bool deleteMesh=false, bool validate=true )
    : NodeBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, deleteMesh, validate )
      , bp::wrapper< NodeBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    NodeBasedCellPopulation_less__3__greater__wrapper(::NodesOnlyMesh< 3 > & rMesh )
    : NodeBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< NodeBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        NodeBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->NodeBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        NodeBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->NodeBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell ) {
        return NodeBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex( index );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return NodeBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return NodeBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->NodeBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return NodeBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->NodeBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return NodeBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( nodeIndex, boost::ref(rNewLocation) );
        else{
            this->NodeBasedCellPopulation< 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ) {
        NodeBasedCellPopulation< 3 >::SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->NodeBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        NodeBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        if( bp::override func_UpdateParticlesAfterReMesh = this->get_override( "UpdateParticlesAfterReMesh" ) )
            func_UpdateParticlesAfterReMesh( boost::ref(rMap) );
        else{
            this->NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
        }
    }
    
    virtual void default_UpdateParticlesAfterReMesh( ::NodeMap & rMap ){
        NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh( boost::ref(rMap) );
    }

    virtual void Validate(  ){
        if( bp::override func_Validate = this->get_override( "Validate" ) )
            func_Validate(  );
        else{
            this->NodeBasedCellPopulation< 3 >::Validate(  );
        }
    }
    
    virtual void default_Validate(  ){
        NodeBasedCellPopulation< 3 >::Validate( );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsGhostNode( unsigned int index ) {
        if( bp::override func_IsGhostNode = this->get_override( "IsGhostNode" ) )
            return func_IsGhostNode( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
        }
    }
    
    bool default_IsGhostNode( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode( index );
    }

    virtual bool IsParticle( unsigned int index ) {
        if( bp::override func_IsParticle = this->get_override( "IsParticle" ) )
            return func_IsParticle( index );
        else{
            return this->AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
        }
    }
    
    bool default_IsParticle( unsigned int index ) {
        return AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct OffLatticeSimulation_less__2_comma__2__greater__wrapper : OffLatticeSimulation< 2, 2 >, bp::wrapper< OffLatticeSimulation< 2, 2 > > {

    OffLatticeSimulation_less__2_comma__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OffLatticeSimulation<2, 2>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OffLatticeSimulation< 2, 2 > >(){
        // constructor
    
    }

    void ApplyBoundaries( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > oldNodeLoctions ){
        OffLatticeSimulation< 2, 2 >::ApplyBoundaries( oldNodeLoctions );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OffLatticeSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OffLatticeSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OffLatticeSimulation< 2, 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OffLatticeSimulation< 2, 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void RevertToOldLocations( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > oldNodeLoctions ){
        OffLatticeSimulation< 2, 2 >::RevertToOldLocations( oldNodeLoctions );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->OffLatticeSimulation< 2, 2 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        OffLatticeSimulation< 2, 2 >::SetupSolve( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OffLatticeSimulation< 2, 2 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OffLatticeSimulation< 2, 2 >::UpdateCellLocationsAndTopology( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->OffLatticeSimulation< 2, 2 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        OffLatticeSimulation< 2, 2 >::WriteVisualizerSetupFile( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup(  );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation( );
    }

};

struct OffLatticeSimulation_less__3_comma__3__greater__wrapper : OffLatticeSimulation< 3, 3 >, bp::wrapper< OffLatticeSimulation< 3, 3 > > {

    OffLatticeSimulation_less__3_comma__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OffLatticeSimulation<3, 3>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OffLatticeSimulation< 3, 3 > >(){
        // constructor
    
    }

    void ApplyBoundaries( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > oldNodeLoctions ){
        OffLatticeSimulation< 3, 3 >::ApplyBoundaries( oldNodeLoctions );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OffLatticeSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OffLatticeSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OffLatticeSimulation< 3, 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OffLatticeSimulation< 3, 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void RevertToOldLocations( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > oldNodeLoctions ){
        OffLatticeSimulation< 3, 3 >::RevertToOldLocations( oldNodeLoctions );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->OffLatticeSimulation< 3, 3 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        OffLatticeSimulation< 3, 3 >::SetupSolve( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OffLatticeSimulation< 3, 3 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OffLatticeSimulation< 3, 3 >::UpdateCellLocationsAndTopology( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->OffLatticeSimulation< 3, 3 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        OffLatticeSimulation< 3, 3 >::WriteVisualizerSetupFile( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup(  );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation( );
    }

};

struct OnLatticeSimulation_less__2__greater__wrapper : OnLatticeSimulation< 2 >, bp::wrapper< OnLatticeSimulation< 2 > > {

    OnLatticeSimulation_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OnLatticeSimulation<2>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OnLatticeSimulation< 2 > >(){
        // constructor
    
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->OnLatticeSimulation< 2 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        OnLatticeSimulation< 2 >::UpdateCellPopulation( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 2, 2 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile( );
    }

};

struct OnLatticeSimulation_less__3__greater__wrapper : OnLatticeSimulation< 3 >, bp::wrapper< OnLatticeSimulation< 3 > > {

    OnLatticeSimulation_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OnLatticeSimulation<3>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OnLatticeSimulation< 3 > >(){
        // constructor
    
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->OnLatticeSimulation< 3 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        OnLatticeSimulation< 3 >::UpdateCellPopulation( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 3, 3 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile( );
    }

};

struct PlaneBasedCellKiller_less__2__greater__wrapper : PlaneBasedCellKiller< 2 >, bp::wrapper< PlaneBasedCellKiller< 2 > > {

    PlaneBasedCellKiller_less__2__greater__wrapper(PlaneBasedCellKiller<2> const & arg )
    : PlaneBasedCellKiller<2>( arg )
      , bp::wrapper< PlaneBasedCellKiller< 2 > >(){
        // copy constructor
        
    }

    PlaneBasedCellKiller_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 2 > point, ::boost::numeric::ublas::c_vector< double, 2 > normal )
    : PlaneBasedCellKiller<2>( boost::python::ptr(pCellPopulation), point, normal )
      , bp::wrapper< PlaneBasedCellKiller< 2 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->PlaneBasedCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        PlaneBasedCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->PlaneBasedCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        PlaneBasedCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct PlaneBasedCellKiller_less__3__greater__wrapper : PlaneBasedCellKiller< 3 >, bp::wrapper< PlaneBasedCellKiller< 3 > > {

    PlaneBasedCellKiller_less__3__greater__wrapper(PlaneBasedCellKiller<3> const & arg )
    : PlaneBasedCellKiller<3>( arg )
      , bp::wrapper< PlaneBasedCellKiller< 3 > >(){
        // copy constructor
        
    }

    PlaneBasedCellKiller_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 3 > point, ::boost::numeric::ublas::c_vector< double, 3 > normal )
    : PlaneBasedCellKiller<3>( boost::python::ptr(pCellPopulation), point, normal )
      , bp::wrapper< PlaneBasedCellKiller< 3 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->PlaneBasedCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        PlaneBasedCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->PlaneBasedCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        PlaneBasedCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct PlaneBoundaryCondition_less__2_comma__2__greater__wrapper : PlaneBoundaryCondition< 2, 2 >, bp::wrapper< PlaneBoundaryCondition< 2, 2 > > {

    PlaneBoundaryCondition_less__2_comma__2__greater__wrapper(PlaneBoundaryCondition<2, 2> const & arg )
    : PlaneBoundaryCondition<2, 2>( arg )
      , bp::wrapper< PlaneBoundaryCondition< 2, 2 > >(){
        // copy constructor
        
    }

    PlaneBoundaryCondition_less__2_comma__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 2 > point, ::boost::numeric::ublas::c_vector< double, 2 > normal )
    : PlaneBoundaryCondition<2, 2>( boost::python::ptr(pCellPopulation), point, normal )
      , bp::wrapper< PlaneBoundaryCondition< 2, 2 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & rOldLocations ) {
        if( bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" ) )
            func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
        else{
            this->PlaneBoundaryCondition< 2, 2 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
        }
    }
    
    void default_ImposeBoundaryCondition( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & rOldLocations ) {
        PlaneBoundaryCondition< 2, 2 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" ) )
            func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        else{
            this->PlaneBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        PlaneBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ) {
        if( bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" ) )
            return func_VerifyBoundaryCondition(  );
        else{
            return this->PlaneBoundaryCondition< 2, 2 >::VerifyBoundaryCondition(  );
        }
    }
    
    bool default_VerifyBoundaryCondition(  ) {
        return PlaneBoundaryCondition< 2, 2 >::VerifyBoundaryCondition( );
    }

};

struct PlaneBoundaryCondition_less__3_comma__3__greater__wrapper : PlaneBoundaryCondition< 3, 3 >, bp::wrapper< PlaneBoundaryCondition< 3, 3 > > {

    PlaneBoundaryCondition_less__3_comma__3__greater__wrapper(PlaneBoundaryCondition<3, 3> const & arg )
    : PlaneBoundaryCondition<3, 3>( arg )
      , bp::wrapper< PlaneBoundaryCondition< 3, 3 > >(){
        // copy constructor
        
    }

    PlaneBoundaryCondition_less__3_comma__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 3 > point, ::boost::numeric::ublas::c_vector< double, 3 > normal )
    : PlaneBoundaryCondition<3, 3>( boost::python::ptr(pCellPopulation), point, normal )
      , bp::wrapper< PlaneBoundaryCondition< 3, 3 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & rOldLocations ) {
        if( bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" ) )
            func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
        else{
            this->PlaneBoundaryCondition< 3, 3 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
        }
    }
    
    void default_ImposeBoundaryCondition( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & rOldLocations ) {
        PlaneBoundaryCondition< 3, 3 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" ) )
            func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        else{
            this->PlaneBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        PlaneBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ) {
        if( bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" ) )
            return func_VerifyBoundaryCondition(  );
        else{
            return this->PlaneBoundaryCondition< 3, 3 >::VerifyBoundaryCondition(  );
        }
    }
    
    bool default_VerifyBoundaryCondition(  ) {
        return PlaneBoundaryCondition< 3, 3 >::VerifyBoundaryCondition( );
    }

};

struct PottsBasedCellPopulation_less__2__greater__wrapper : PottsBasedCellPopulation< 2 >, bp::wrapper< PottsBasedCellPopulation< 2 > > {

    PottsBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, bool deleteMesh=false, bool validate=true, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : PottsBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), deleteMesh, validate, locationIndices )
      , bp::wrapper< PottsBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    PottsBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh )
    : PottsBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< PottsBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        PottsBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->PottsBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        PottsBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return PottsBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->PottsBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        PottsBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ) {
        if( bp::override func_GetNode = this->get_override( "GetNode" ) )
            return func_GetNode( index );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNode( index );
        }
    }
    
    ::Node< 2 > * default_GetNode( unsigned int index ) {
        return PottsBasedCellPopulation< 2 >::GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return PottsBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ) {
        if( bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" ) )
            return func_GetTetrahedralMeshForPdeModifier(  );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetTetrahedralMeshForPdeModifier(  );
        }
    }
    
    ::TetrahedralMesh< 2, 2 > * default_GetTetrahedralMeshForPdeModifier(  ) {
        return PottsBasedCellPopulation< 2 >::GetTetrahedralMeshForPdeModifier( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->PottsBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return PottsBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->PottsBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        PottsBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->PottsBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return PottsBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->PottsBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        PottsBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->PottsBasedCellPopulation< 2 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        PottsBasedCellPopulation< 2 >::UpdateCellLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->PottsBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        PottsBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->PottsBasedCellPopulation< 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        PottsBasedCellPopulation< 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection( );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

};

struct PottsBasedCellPopulation_less__3__greater__wrapper : PottsBasedCellPopulation< 3 >, bp::wrapper< PottsBasedCellPopulation< 3 > > {

    PottsBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, bool deleteMesh=false, bool validate=true, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : PottsBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), deleteMesh, validate, locationIndices )
      , bp::wrapper< PottsBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    PottsBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh )
    : PottsBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< PottsBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->PottsBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        PottsBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->PottsBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        PottsBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->PottsBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        PottsBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->PottsBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return PottsBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->PottsBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        PottsBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return PottsBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ) {
        if( bp::override func_GetNode = this->get_override( "GetNode" ) )
            return func_GetNode( index );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetNode( index );
        }
    }
    
    ::Node< 3 > * default_GetNode( unsigned int index ) {
        return PottsBasedCellPopulation< 3 >::GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return PottsBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ) {
        if( bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" ) )
            return func_GetTetrahedralMeshForPdeModifier(  );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetTetrahedralMeshForPdeModifier(  );
        }
    }
    
    ::TetrahedralMesh< 3, 3 > * default_GetTetrahedralMeshForPdeModifier(  ) {
        return PottsBasedCellPopulation< 3 >::GetTetrahedralMeshForPdeModifier( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->PottsBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return PottsBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->PottsBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return PottsBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->PottsBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        PottsBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->PottsBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        PottsBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->PottsBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return PottsBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->PottsBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        PottsBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->PottsBasedCellPopulation< 3 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        PottsBasedCellPopulation< 3 >::UpdateCellLocations( dt );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->PottsBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        PottsBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->PottsBasedCellPopulation< 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        PottsBasedCellPopulation< 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection( );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

};

struct RandomCellKiller_less__2__greater__wrapper : RandomCellKiller< 2 >, bp::wrapper< RandomCellKiller< 2 > > {

    RandomCellKiller_less__2__greater__wrapper(RandomCellKiller<2> const & arg )
    : RandomCellKiller<2>( arg )
      , bp::wrapper< RandomCellKiller< 2 > >(){
        // copy constructor
        
    }

    RandomCellKiller_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation, double probabilityOfDeathInAnHour )
    : RandomCellKiller<2>( boost::python::ptr(pCellPopulation), probabilityOfDeathInAnHour )
      , bp::wrapper< RandomCellKiller< 2 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->RandomCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        RandomCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->RandomCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        RandomCellKiller< 2 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct RandomCellKiller_less__3__greater__wrapper : RandomCellKiller< 3 >, bp::wrapper< RandomCellKiller< 3 > > {

    RandomCellKiller_less__3__greater__wrapper(RandomCellKiller<3> const & arg )
    : RandomCellKiller<3>( arg )
      , bp::wrapper< RandomCellKiller< 3 > >(){
        // copy constructor
        
    }

    RandomCellKiller_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation, double probabilityOfDeathInAnHour )
    : RandomCellKiller<3>( boost::python::ptr(pCellPopulation), probabilityOfDeathInAnHour )
      , bp::wrapper< RandomCellKiller< 3 > >(){
        // constructor
    
    }

    virtual void CheckAndLabelCellsForApoptosisOrDeath(  ) {
        if( bp::override func_CheckAndLabelCellsForApoptosisOrDeath = this->get_override( "CheckAndLabelCellsForApoptosisOrDeath" ) )
            func_CheckAndLabelCellsForApoptosisOrDeath(  );
        else{
            this->RandomCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath(  );
        }
    }
    
    void default_CheckAndLabelCellsForApoptosisOrDeath(  ) {
        RandomCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath( );
    }

    virtual void OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellKillerParameters = this->get_override( "OutputCellKillerParameters" ) )
            func_OutputCellKillerParameters( boost::ref(rParamsFile) );
        else{
            this->RandomCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellKillerParameters( ::out_stream & rParamsFile ) {
        RandomCellKiller< 3 >::OutputCellKillerParameters( boost::ref(rParamsFile) );
    }

};

struct SimpleOxygenBasedCellCycleModel_wrapper : SimpleOxygenBasedCellCycleModel, bp::wrapper< SimpleOxygenBasedCellCycleModel > {

    SimpleOxygenBasedCellCycleModel_wrapper(::SimpleOxygenBasedCellCycleModel const & rModel )
    : SimpleOxygenBasedCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< SimpleOxygenBasedCellCycleModel >(){
        // copy constructor
    
    }

    SimpleOxygenBasedCellCycleModel_wrapper( )
    : SimpleOxygenBasedCellCycleModel( )
      , bp::wrapper< SimpleOxygenBasedCellCycleModel >(){
        // null constructor
    
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ) {
        if( bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" ) )
            return func_CreateCellCycleModel(  );
        else{
            return this->SimpleOxygenBasedCellCycleModel::CreateCellCycleModel(  );
        }
    }
    
    ::AbstractCellCycleModel * default_CreateCellCycleModel(  ) {
        return SimpleOxygenBasedCellCycleModel::CreateCellCycleModel( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->SimpleOxygenBasedCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        SimpleOxygenBasedCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateCellCyclePhase(  ) {
        if( bp::override func_UpdateCellCyclePhase = this->get_override( "UpdateCellCyclePhase" ) )
            func_UpdateCellCyclePhase(  );
        else{
            this->SimpleOxygenBasedCellCycleModel::UpdateCellCyclePhase(  );
        }
    }
    
    void default_UpdateCellCyclePhase(  ) {
        SimpleOxygenBasedCellCycleModel::UpdateCellCyclePhase( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual double GetG1Duration(  ) const  {
        if( bp::override func_GetG1Duration = this->get_override( "GetG1Duration" ) )
            return func_GetG1Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG1Duration(  );
        }
    }
    
    double default_GetG1Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG1Duration( );
    }

    virtual double GetG2Duration(  ) const  {
        if( bp::override func_GetG2Duration = this->get_override( "GetG2Duration" ) )
            return func_GetG2Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG2Duration(  );
        }
    }
    
    double default_GetG2Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG2Duration( );
    }

    virtual double GetMDuration(  ) const  {
        if( bp::override func_GetMDuration = this->get_override( "GetMDuration" ) )
            return func_GetMDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetMDuration(  );
        }
    }
    
    double default_GetMDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetMDuration( );
    }

    virtual double GetSDuration(  ) const  {
        if( bp::override func_GetSDuration = this->get_override( "GetSDuration" ) )
            return func_GetSDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetSDuration(  );
        }
    }
    
    double default_GetSDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetSDuration( );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimplePhaseBasedCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell( );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractPhaseBasedCellCycleModel::ReadyToDivide( );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimplePhaseBasedCellCycleModel::ResetForDivision( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

    virtual void SetG1Duration(  ){
        if( bp::override func_SetG1Duration = this->get_override( "SetG1Duration" ) )
            func_SetG1Duration(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::SetG1Duration(  );
        }
    }
    
    virtual void default_SetG1Duration(  ){
        AbstractSimplePhaseBasedCellCycleModel::SetG1Duration( );
    }

    virtual void SetStemCellG1Duration( double stemCellG1Duration ) {
        if( bp::override func_SetStemCellG1Duration = this->get_override( "SetStemCellG1Duration" ) )
            func_SetStemCellG1Duration( stemCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
        }
    }
    
    void default_SetStemCellG1Duration( double stemCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
    }

    virtual void SetTransitCellG1Duration( double transitCellG1Duration ) {
        if( bp::override func_SetTransitCellG1Duration = this->get_override( "SetTransitCellG1Duration" ) )
            func_SetTransitCellG1Duration( transitCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
        }
    }
    
    void default_SetTransitCellG1Duration( double transitCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
    }

};

struct SimpleTargetAreaModifier_less__2__greater__wrapper : SimpleTargetAreaModifier< 2 >, bp::wrapper< SimpleTargetAreaModifier< 2 > > {

    SimpleTargetAreaModifier_less__2__greater__wrapper(SimpleTargetAreaModifier<2> const & arg )
    : SimpleTargetAreaModifier<2>( arg )
      , bp::wrapper< SimpleTargetAreaModifier< 2 > >(){
        // copy constructor
        
    }

    SimpleTargetAreaModifier_less__2__greater__wrapper( )
    : SimpleTargetAreaModifier<2>( )
      , bp::wrapper< SimpleTargetAreaModifier< 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->SimpleTargetAreaModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        SimpleTargetAreaModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateTargetAreaOfCell( ::CellPtr const pCell ) {
        if( bp::override func_UpdateTargetAreaOfCell = this->get_override( "UpdateTargetAreaOfCell" ) )
            func_UpdateTargetAreaOfCell( pCell );
        else{
            this->SimpleTargetAreaModifier< 2 >::UpdateTargetAreaOfCell( pCell );
        }
    }
    
    void default_UpdateTargetAreaOfCell( ::CellPtr const pCell ) {
        SimpleTargetAreaModifier< 2 >::UpdateTargetAreaOfCell( pCell );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractTargetAreaModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractTargetAreaModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct SimpleTargetAreaModifier_less__3__greater__wrapper : SimpleTargetAreaModifier< 3 >, bp::wrapper< SimpleTargetAreaModifier< 3 > > {

    SimpleTargetAreaModifier_less__3__greater__wrapper(SimpleTargetAreaModifier<3> const & arg )
    : SimpleTargetAreaModifier<3>( arg )
      , bp::wrapper< SimpleTargetAreaModifier< 3 > >(){
        // copy constructor
        
    }

    SimpleTargetAreaModifier_less__3__greater__wrapper( )
    : SimpleTargetAreaModifier<3>( )
      , bp::wrapper< SimpleTargetAreaModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->SimpleTargetAreaModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        SimpleTargetAreaModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateTargetAreaOfCell( ::CellPtr const pCell ) {
        if( bp::override func_UpdateTargetAreaOfCell = this->get_override( "UpdateTargetAreaOfCell" ) )
            func_UpdateTargetAreaOfCell( pCell );
        else{
            this->SimpleTargetAreaModifier< 3 >::UpdateTargetAreaOfCell( pCell );
        }
    }
    
    void default_UpdateTargetAreaOfCell( ::CellPtr const pCell ) {
        SimpleTargetAreaModifier< 3 >::UpdateTargetAreaOfCell( pCell );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->AbstractTargetAreaModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        AbstractTargetAreaModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct SimulationTime_wrapper : SimulationTime, bp::wrapper< SimulationTime > {

    SimulationTime_wrapper( )
    : SimulationTime( )
      , bp::wrapper< SimulationTime >(){
        // null constructor
    
    }

};

struct SphereGeometryBoundaryCondition_less__2__greater__wrapper : SphereGeometryBoundaryCondition< 2 >, bp::wrapper< SphereGeometryBoundaryCondition< 2 > > {

    SphereGeometryBoundaryCondition_less__2__greater__wrapper(SphereGeometryBoundaryCondition<2> const & arg )
    : SphereGeometryBoundaryCondition<2>( arg )
      , bp::wrapper< SphereGeometryBoundaryCondition< 2 > >(){
        // copy constructor
        
    }

    SphereGeometryBoundaryCondition_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 2 > centre, double radius, double distance=1.0000000000000001E-5 )
    : SphereGeometryBoundaryCondition<2>( boost::python::ptr(pCellPopulation), centre, radius, distance )
      , bp::wrapper< SphereGeometryBoundaryCondition< 2 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & rOldLocations ) {
        if( bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" ) )
            func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
        else{
            this->SphereGeometryBoundaryCondition< 2 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
        }
    }
    
    void default_ImposeBoundaryCondition( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & rOldLocations ) {
        SphereGeometryBoundaryCondition< 2 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" ) )
            func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        else{
            this->SphereGeometryBoundaryCondition< 2 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        SphereGeometryBoundaryCondition< 2 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ) {
        if( bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" ) )
            return func_VerifyBoundaryCondition(  );
        else{
            return this->SphereGeometryBoundaryCondition< 2 >::VerifyBoundaryCondition(  );
        }
    }
    
    bool default_VerifyBoundaryCondition(  ) {
        return SphereGeometryBoundaryCondition< 2 >::VerifyBoundaryCondition( );
    }

};

struct SphereGeometryBoundaryCondition_less__3__greater__wrapper : SphereGeometryBoundaryCondition< 3 >, bp::wrapper< SphereGeometryBoundaryCondition< 3 > > {

    SphereGeometryBoundaryCondition_less__3__greater__wrapper(SphereGeometryBoundaryCondition<3> const & arg )
    : SphereGeometryBoundaryCondition<3>( arg )
      , bp::wrapper< SphereGeometryBoundaryCondition< 3 > >(){
        // copy constructor
        
    }

    SphereGeometryBoundaryCondition_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > * pCellPopulation, ::boost::numeric::ublas::c_vector< double, 3 > centre, double radius, double distance=1.0000000000000001E-5 )
    : SphereGeometryBoundaryCondition<3>( boost::python::ptr(pCellPopulation), centre, radius, distance )
      , bp::wrapper< SphereGeometryBoundaryCondition< 3 > >(){
        // constructor
    
    }

    virtual void ImposeBoundaryCondition( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & rOldLocations ) {
        if( bp::override func_ImposeBoundaryCondition = this->get_override( "ImposeBoundaryCondition" ) )
            func_ImposeBoundaryCondition( boost::ref(rOldLocations) );
        else{
            this->SphereGeometryBoundaryCondition< 3 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
        }
    }
    
    void default_ImposeBoundaryCondition( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & rOldLocations ) {
        SphereGeometryBoundaryCondition< 3 >::ImposeBoundaryCondition( boost::ref(rOldLocations) );
    }

    virtual void OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationBoundaryConditionParameters = this->get_override( "OutputCellPopulationBoundaryConditionParameters" ) )
            func_OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        else{
            this->SphereGeometryBoundaryCondition< 3 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationBoundaryConditionParameters( ::out_stream & rParamsFile ) {
        SphereGeometryBoundaryCondition< 3 >::OutputCellPopulationBoundaryConditionParameters( boost::ref(rParamsFile) );
    }

    virtual bool VerifyBoundaryCondition(  ) {
        if( bp::override func_VerifyBoundaryCondition = this->get_override( "VerifyBoundaryCondition" ) )
            return func_VerifyBoundaryCondition(  );
        else{
            return this->SphereGeometryBoundaryCondition< 3 >::VerifyBoundaryCondition(  );
        }
    }
    
    bool default_VerifyBoundaryCondition(  ) {
        return SphereGeometryBoundaryCondition< 3 >::VerifyBoundaryCondition( );
    }

};

struct SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper : SurfaceAreaConstraintPottsUpdateRule< 2 >, bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 2 > > {

    SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper(SurfaceAreaConstraintPottsUpdateRule<2> const & arg )
    : SurfaceAreaConstraintPottsUpdateRule<2>( arg )
      , bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 2 > >(){
        // copy constructor
        
    }

    SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper( )
    : SurfaceAreaConstraintPottsUpdateRule<2>( )
      , bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->SurfaceAreaConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        return SurfaceAreaConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->SurfaceAreaConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        SurfaceAreaConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper : SurfaceAreaConstraintPottsUpdateRule< 3 >, bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 3 > > {

    SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper(SurfaceAreaConstraintPottsUpdateRule<3> const & arg )
    : SurfaceAreaConstraintPottsUpdateRule<3>( arg )
      , bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 3 > >(){
        // copy constructor
        
    }

    SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper( )
    : SurfaceAreaConstraintPottsUpdateRule<3>( )
      , bp::wrapper< SurfaceAreaConstraintPottsUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->SurfaceAreaConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        return SurfaceAreaConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->SurfaceAreaConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        SurfaceAreaConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct UniformCellCycleModel_wrapper : UniformCellCycleModel, bp::wrapper< UniformCellCycleModel > {

    UniformCellCycleModel_wrapper(::UniformCellCycleModel const & rModel )
    : UniformCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< UniformCellCycleModel >(){
        // copy constructor
    
    }

    UniformCellCycleModel_wrapper( )
    : UniformCellCycleModel( )
      , bp::wrapper< UniformCellCycleModel >(){
        // null constructor
    
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ) {
        if( bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" ) )
            return func_CreateCellCycleModel(  );
        else{
            return this->UniformCellCycleModel::CreateCellCycleModel(  );
        }
    }
    
    ::AbstractCellCycleModel * default_CreateCellCycleModel(  ) {
        return UniformCellCycleModel::CreateCellCycleModel( );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->UniformCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return UniformCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->UniformCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return UniformCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->UniformCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        UniformCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void SetCellCycleDuration(  ) {
        if( bp::override func_SetCellCycleDuration = this->get_override( "SetCellCycleDuration" ) )
            func_SetCellCycleDuration(  );
        else{
            this->UniformCellCycleModel::SetCellCycleDuration(  );
        }
    }
    
    void default_SetCellCycleDuration(  ) {
        UniformCellCycleModel::SetCellCycleDuration( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimpleCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimpleCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimpleCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimpleCellCycleModel::InitialiseDaughterCell( );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractSimpleCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractSimpleCellCycleModel::ReadyToDivide( );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimpleCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimpleCellCycleModel::ResetForDivision( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

struct UniformG1GenerationalCellCycleModel_wrapper : UniformG1GenerationalCellCycleModel, bp::wrapper< UniformG1GenerationalCellCycleModel > {

    UniformG1GenerationalCellCycleModel_wrapper(::UniformG1GenerationalCellCycleModel const & rModel )
    : UniformG1GenerationalCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< UniformG1GenerationalCellCycleModel >(){
        // copy constructor
    
    }

    UniformG1GenerationalCellCycleModel_wrapper( )
    : UniformG1GenerationalCellCycleModel( )
      , bp::wrapper< UniformG1GenerationalCellCycleModel >(){
        // null constructor
    
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ) {
        if( bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" ) )
            return func_CreateCellCycleModel(  );
        else{
            return this->UniformG1GenerationalCellCycleModel::CreateCellCycleModel(  );
        }
    }
    
    ::AbstractCellCycleModel * default_CreateCellCycleModel(  ) {
        return UniformG1GenerationalCellCycleModel::CreateCellCycleModel( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->UniformG1GenerationalCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        UniformG1GenerationalCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void SetG1Duration(  ){
        if( bp::override func_SetG1Duration = this->get_override( "SetG1Duration" ) )
            func_SetG1Duration(  );
        else{
            this->UniformG1GenerationalCellCycleModel::SetG1Duration(  );
        }
    }
    
    virtual void default_SetG1Duration(  ){
        UniformG1GenerationalCellCycleModel::SetG1Duration( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual double GetG1Duration(  ) const  {
        if( bp::override func_GetG1Duration = this->get_override( "GetG1Duration" ) )
            return func_GetG1Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG1Duration(  );
        }
    }
    
    double default_GetG1Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG1Duration( );
    }

    virtual double GetG2Duration(  ) const  {
        if( bp::override func_GetG2Duration = this->get_override( "GetG2Duration" ) )
            return func_GetG2Duration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetG2Duration(  );
        }
    }
    
    double default_GetG2Duration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetG2Duration( );
    }

    virtual double GetMDuration(  ) const  {
        if( bp::override func_GetMDuration = this->get_override( "GetMDuration" ) )
            return func_GetMDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetMDuration(  );
        }
    }
    
    double default_GetMDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetMDuration( );
    }

    virtual double GetSDuration(  ) const  {
        if( bp::override func_GetSDuration = this->get_override( "GetSDuration" ) )
            return func_GetSDuration(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::GetSDuration(  );
        }
    }
    
    double default_GetSDuration(  ) const  {
        return AbstractPhaseBasedCellCycleModel::GetSDuration( );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractSimplePhaseBasedCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell( );
    }

    virtual bool ReadyToDivide(  ) {
        if( bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" ) )
            return func_ReadyToDivide(  );
        else{
            return this->AbstractPhaseBasedCellCycleModel::ReadyToDivide(  );
        }
    }
    
    bool default_ReadyToDivide(  ) {
        return AbstractPhaseBasedCellCycleModel::ReadyToDivide( );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractSimpleGenerationalCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractSimpleGenerationalCellCycleModel::ResetForDivision( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

    virtual void SetStemCellG1Duration( double stemCellG1Duration ) {
        if( bp::override func_SetStemCellG1Duration = this->get_override( "SetStemCellG1Duration" ) )
            func_SetStemCellG1Duration( stemCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
        }
    }
    
    void default_SetStemCellG1Duration( double stemCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration( stemCellG1Duration );
    }

    virtual void SetTransitCellG1Duration( double transitCellG1Duration ) {
        if( bp::override func_SetTransitCellG1Duration = this->get_override( "SetTransitCellG1Duration" ) )
            func_SetTransitCellG1Duration( transitCellG1Duration );
        else{
            this->AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
        }
    }
    
    void default_SetTransitCellG1Duration( double transitCellG1Duration ) {
        AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration( transitCellG1Duration );
    }

    virtual void UpdateCellCyclePhase(  ) {
        if( bp::override func_UpdateCellCyclePhase = this->get_override( "UpdateCellCyclePhase" ) )
            func_UpdateCellCyclePhase(  );
        else{
            this->AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase(  );
        }
    }
    
    void default_UpdateCellCyclePhase(  ) {
        AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase( );
    }

};

struct VertexBasedCellPopulation_less__2__greater__wrapper : VertexBasedCellPopulation< 2 >, bp::wrapper< VertexBasedCellPopulation< 2 > > {

    VertexBasedCellPopulation_less__2__greater__wrapper(::MutableVertexMesh< 2, 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, bool deleteMesh=false, bool validate=true, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : VertexBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), deleteMesh, validate, locationIndices )
      , bp::wrapper< VertexBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    VertexBasedCellPopulation_less__2__greater__wrapper(::MutableVertexMesh< 2, 2 > & rMesh )
    : VertexBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< VertexBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->VertexBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        VertexBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->VertexBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        VertexBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->VertexBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        VertexBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->VertexBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return VertexBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual unsigned int AddNode( ::Node< 2 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->VertexBasedCellPopulation< 2 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 2 > * pNewNode ) {
        return VertexBasedCellPopulation< 2 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->VertexBasedCellPopulation< 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 2 > & rDisplacement, double dt ) {
        VertexBasedCellPopulation< 2 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return VertexBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return VertexBasedCellPopulation< 2 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return VertexBasedCellPopulation< 2 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return VertexBasedCellPopulation< 2 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return VertexBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->VertexBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return VertexBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->VertexBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->VertexBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return VertexBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->VertexBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        VertexBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->VertexBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        VertexBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->VertexBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return VertexBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->VertexBasedCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 2 > & rNewLocation ) {
        VertexBasedCellPopulation< 2 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->VertexBasedCellPopulation< 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        VertexBasedCellPopulation< 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->VertexBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        VertexBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->VertexBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        VertexBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations( dt );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct VertexBasedCellPopulation_less__3__greater__wrapper : VertexBasedCellPopulation< 3 >, bp::wrapper< VertexBasedCellPopulation< 3 > > {

    VertexBasedCellPopulation_less__3__greater__wrapper(::MutableVertexMesh< 3, 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, bool deleteMesh=false, bool validate=true, ::std::vector< unsigned int > const locationIndices=std::vector<unsigned int>() )
    : VertexBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), deleteMesh, validate, locationIndices )
      , bp::wrapper< VertexBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    VertexBasedCellPopulation_less__3__greater__wrapper(::MutableVertexMesh< 3, 3 > & rMesh )
    : VertexBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< VertexBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->VertexBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        VertexBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->VertexBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        VertexBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->VertexBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        VertexBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->VertexBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return VertexBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual unsigned int AddNode( ::Node< 3 > * pNewNode ) {
        if( bp::override func_AddNode = this->get_override( "AddNode" ) )
            return func_AddNode( boost::python::ptr(pNewNode) );
        else{
            return this->VertexBasedCellPopulation< 3 >::AddNode( boost::python::ptr(pNewNode) );
        }
    }
    
    unsigned int default_AddNode( ::Node< 3 > * pNewNode ) {
        return VertexBasedCellPopulation< 3 >::AddNode( boost::python::ptr(pNewNode) );
    }

    virtual void CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        if( bp::override func_CheckForStepSizeException = this->get_override( "CheckForStepSizeException" ) )
            func_CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        else{
            this->VertexBasedCellPopulation< 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
        }
    }
    
    void default_CheckForStepSizeException( unsigned int nodeIndex, ::boost::numeric::ublas::c_vector< double, 3 > & rDisplacement, double dt ) {
        VertexBasedCellPopulation< 3 >::CheckForStepSizeException( nodeIndex, boost::ref(rDisplacement), dt );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return VertexBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual double GetDampingConstant( unsigned int nodeIndex ) {
        if( bp::override func_GetDampingConstant = this->get_override( "GetDampingConstant" ) )
            return func_GetDampingConstant( nodeIndex );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetDampingConstant( nodeIndex );
        }
    }
    
    double default_GetDampingConstant( unsigned int nodeIndex ) {
        return VertexBasedCellPopulation< 3 >::GetDampingConstant( nodeIndex );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return VertexBasedCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return VertexBasedCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return VertexBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->VertexBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return VertexBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->VertexBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return VertexBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->VertexBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return VertexBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->VertexBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        VertexBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->VertexBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        VertexBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->VertexBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return VertexBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->VertexBasedCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        VertexBasedCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->VertexBasedCellPopulation< 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        VertexBasedCellPopulation< 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->VertexBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        VertexBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->VertexBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        VertexBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void UpdateNodeLocations( double dt ) {
        if( bp::override func_UpdateNodeLocations = this->get_override( "UpdateNodeLocations" ) )
            func_UpdateNodeLocations( dt );
        else{
            this->AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
        }
    }
    
    void default_UpdateNodeLocations( double dt ) {
        AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations( dt );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct VolumeConstraintPottsUpdateRule_less__2__greater__wrapper : VolumeConstraintPottsUpdateRule< 2 >, bp::wrapper< VolumeConstraintPottsUpdateRule< 2 > > {

    VolumeConstraintPottsUpdateRule_less__2__greater__wrapper(VolumeConstraintPottsUpdateRule<2> const & arg )
    : VolumeConstraintPottsUpdateRule<2>( arg )
      , bp::wrapper< VolumeConstraintPottsUpdateRule< 2 > >(){
        // copy constructor
        
    }

    VolumeConstraintPottsUpdateRule_less__2__greater__wrapper( )
    : VolumeConstraintPottsUpdateRule<2>( )
      , bp::wrapper< VolumeConstraintPottsUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->VolumeConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 2 > & rCellPopulation ) {
        return VolumeConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->VolumeConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        VolumeConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct VolumeConstraintPottsUpdateRule_less__3__greater__wrapper : VolumeConstraintPottsUpdateRule< 3 >, bp::wrapper< VolumeConstraintPottsUpdateRule< 3 > > {

    VolumeConstraintPottsUpdateRule_less__3__greater__wrapper(VolumeConstraintPottsUpdateRule<3> const & arg )
    : VolumeConstraintPottsUpdateRule<3>( arg )
      , bp::wrapper< VolumeConstraintPottsUpdateRule< 3 > >(){
        // copy constructor
        
    }

    VolumeConstraintPottsUpdateRule_less__3__greater__wrapper( )
    : VolumeConstraintPottsUpdateRule<3>( )
      , bp::wrapper< VolumeConstraintPottsUpdateRule< 3 > >(){
        // null constructor
    
    }

    virtual double EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        if( bp::override func_EvaluateHamiltonianContribution = this->get_override( "EvaluateHamiltonianContribution" ) )
            return func_EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        else{
            return this->VolumeConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
        }
    }
    
    double default_EvaluateHamiltonianContribution( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::PottsBasedCellPopulation< 3 > & rCellPopulation ) {
        return VolumeConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation) );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->VolumeConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        VolumeConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct VtkSceneModifier_less__2__greater__wrapper : VtkSceneModifier< 2 >, bp::wrapper< VtkSceneModifier< 2 > > {

    VtkSceneModifier_less__2__greater__wrapper(VtkSceneModifier<2> const & arg )
    : VtkSceneModifier<2>( arg )
      , bp::wrapper< VtkSceneModifier< 2 > >(){
        // copy constructor
        
    }

    VtkSceneModifier_less__2__greater__wrapper( )
    : VtkSceneModifier<2>( )
      , bp::wrapper< VtkSceneModifier< 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->VtkSceneModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        VtkSceneModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->VtkSceneModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        VtkSceneModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->VtkSceneModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        VtkSceneModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct VtkSceneModifier_less__3__greater__wrapper : VtkSceneModifier< 3 >, bp::wrapper< VtkSceneModifier< 3 > > {

    VtkSceneModifier_less__3__greater__wrapper(VtkSceneModifier<3> const & arg )
    : VtkSceneModifier<3>( arg )
      , bp::wrapper< VtkSceneModifier< 3 > >(){
        // copy constructor
        
    }

    VtkSceneModifier_less__3__greater__wrapper( )
    : VtkSceneModifier<3>( )
      , bp::wrapper< VtkSceneModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->VtkSceneModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        VtkSceneModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->VtkSceneModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        VtkSceneModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->VtkSceneModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        VtkSceneModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::numeric::ublas::c_vector< double, 2 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::numeric::ublas::c_vector< double, 3 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< Cell > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractCellProperty > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractUpdateRule< 2 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractUpdateRule< 3 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::pair< Node< 2 >, Node< 2 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::pair< Node< 3 >, Node< 3 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_PyChaste_cell_based){
    { //::std::vector< unsigned int >
        typedef bp::class_< std::vector< unsigned int > > vector_less__unsigned_int__greater__exposer_t;
        vector_less__unsigned_int__greater__exposer_t vector_less__unsigned_int__greater__exposer = vector_less__unsigned_int__greater__exposer_t( "vector_less__unsigned_int__greater_" );
        bp::scope vector_less__unsigned_int__greater__scope( vector_less__unsigned_int__greater__exposer );
        vector_less__unsigned_int__greater__exposer.def( bp::indexing::vector_suite< std::vector< unsigned int > >() );
    }

    { //::std::vector< std::pair<Node<3> *, Node<3> *> >
        typedef bp::class_< std::vector< std::pair<Node<3> *, Node<3> *> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::pair<Node<3> *, Node<3> *> > >() );
    }

    { //::std::vector< std::pair<Node<2> *, Node<2> *> >
        typedef bp::class_< std::vector< std::pair<Node<2> *, Node<2> *> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::pair<Node<2> *, Node<2> *> > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::shared_ptr<Cell> >
        typedef bp::class_< std::vector< boost::shared_ptr<Cell> > > VecCellPtr_exposer_t;
        VecCellPtr_exposer_t VecCellPtr_exposer = VecCellPtr_exposer_t( "VecCellPtr" );
        bp::scope VecCellPtr_scope( VecCellPtr_exposer );
        VecCellPtr_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<Cell> > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractCellProperty> >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractCellProperty> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractCellProperty> > >() );
    }

    { //::std::vector< boost::numeric::ublas::c_vector<double, 3> >
        typedef bp::class_< std::vector< boost::numeric::ublas::c_vector<double, 3> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::numeric::ublas::c_vector<double, 3> > >() );
    }

    { //::std::vector< boost::numeric::ublas::c_vector<double, 2> >
        typedef bp::class_< std::vector< boost::numeric::ublas::c_vector<double, 2> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::numeric::ublas::c_vector<double, 2> > >() );
    }

    { //::std::vector< bool >
        typedef bp::class_< std::vector< bool > > vector_less__bool__greater__exposer_t;
        vector_less__bool__greater__exposer_t vector_less__bool__greater__exposer = vector_less__bool__greater__exposer_t( "vector_less__bool__greater_" );
        bp::scope vector_less__bool__greater__scope( vector_less__bool__greater__exposer );
        vector_less__bool__greater__exposer.def( bp::indexing::vector_suite< std::vector< bool > >() );
    }

    { //::std::set< unsigned int >
        typedef bp::class_< std::set< unsigned int > > set_less__unsigned_int__greater__exposer_t;
        set_less__unsigned_int__greater__exposer_t set_less__unsigned_int__greater__exposer = set_less__unsigned_int__greater__exposer_t( "set_less__unsigned_int__greater_" );
        bp::scope set_less__unsigned_int__greater__scope( set_less__unsigned_int__greater__exposer );
        set_less__unsigned_int__greater__exposer.def( bp::indexing::set_suite< std::set< unsigned int > >() );
    }

    { //::std::set< boost::shared_ptr<Cell> >
        typedef bp::class_< std::set< boost::shared_ptr<Cell> > > set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t;
        set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer = set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t( "set_less__boost_scope_shared_ptr_less_Cell_greater___greater_" );
        bp::scope set_less__boost_scope_shared_ptr_less_Cell_greater___greater__scope( set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer );
        set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer.def( bp::indexing::set_suite< std::set< boost::shared_ptr<Cell> > >() );
    }

    { //::std::map< boost::shared_ptr<Cell>, unsigned int >
        typedef bp::class_< std::map< boost::shared_ptr<Cell>, unsigned int > > map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer_t;
        map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer_t map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer = map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer_t( "map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater_" );
        bp::scope map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__scope( map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer );
        map_less__boost_scope_shared_ptr_less_Cell_greater__comma__unsigned_int__greater__exposer.def( bp::indexing::map_suite< std::map< boost::shared_ptr<Cell>, unsigned int > >() );
    }

    bp::class_< std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > >("map_less__Node_less_3_greater___ptr__comma__boost_scope_numeric_scope_ublas_scope_c_vector_less_double_comma__3_greater___greater_")    
        .def( bp::indexing::map_suite< std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > >() );

    bp::class_< std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > >("map_less__Node_less_2_greater___ptr__comma__boost_scope_numeric_scope_ublas_scope_c_vector_less_double_comma__2_greater___greater_")    
        .def( bp::indexing::map_suite< std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > >() );

    bp::class_< Identifiable >( "Identifiable" )    
        .def( 
            "GetIdentifier"
            , (::std::string ( ::Identifiable::* )(  )const)( &::Identifiable::GetIdentifier ) );

    { //::AbstractUpdateRule< 2 >
        typedef bp::class_< AbstractUpdateRule_less__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractUpdateRule2_exposer_t;
        AbstractUpdateRule2_exposer_t AbstractUpdateRule2_exposer = AbstractUpdateRule2_exposer_t( "AbstractUpdateRule2", bp::init< >() );
        bp::scope AbstractUpdateRule2_scope( AbstractUpdateRule2_exposer );
        { //::AbstractUpdateRule< 2 >::OutputUpdateRuleInfo
        
            typedef AbstractUpdateRule< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleInfo_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule2_exposer.def( 
                "OutputUpdateRuleInfo"
                , OutputUpdateRuleInfo_function_type( &::AbstractUpdateRule< 2 >::OutputUpdateRuleInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractUpdateRule< 2 >::OutputUpdateRuleParameters
        
            typedef AbstractUpdateRule< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleParameters_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule2_exposer.def( 
                "OutputUpdateRuleParameters"
                , bp::pure_virtual( OutputUpdateRuleParameters_function_type(&::AbstractUpdateRule< 2 >::OutputUpdateRuleParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractUpdateRule<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractUpdateRule< 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractPottsUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AdhesionPottsUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DifferentialAdhesionPottsUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SurfaceAreaConstraintPottsUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VolumeConstraintPottsUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCaUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiffusionCaUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
    }

    bp::class_< AbstractCaUpdateRule_less__2__greater__wrapper, bp::bases< AbstractUpdateRule< 2 > >, boost::noncopyable >( "AbstractCaUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , bp::pure_virtual( (double ( ::AbstractCaUpdateRule<2>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&::AbstractCaUpdateRule< 2 >::EvaluateProbability) )
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AbstractCaUpdateRule<2>::* )( ::out_stream & ))(&::AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( AbstractCaUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCaUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) );

    { //::AbstractUpdateRule< 3 >
        typedef bp::class_< AbstractUpdateRule_less__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractUpdateRule3_exposer_t;
        AbstractUpdateRule3_exposer_t AbstractUpdateRule3_exposer = AbstractUpdateRule3_exposer_t( "AbstractUpdateRule3", bp::init< >() );
        bp::scope AbstractUpdateRule3_scope( AbstractUpdateRule3_exposer );
        { //::AbstractUpdateRule< 3 >::OutputUpdateRuleInfo
        
            typedef AbstractUpdateRule< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleInfo_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule3_exposer.def( 
                "OutputUpdateRuleInfo"
                , OutputUpdateRuleInfo_function_type( &::AbstractUpdateRule< 3 >::OutputUpdateRuleInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractUpdateRule< 3 >::OutputUpdateRuleParameters
        
            typedef AbstractUpdateRule< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleParameters_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule3_exposer.def( 
                "OutputUpdateRuleParameters"
                , bp::pure_virtual( OutputUpdateRuleParameters_function_type(&::AbstractUpdateRule< 3 >::OutputUpdateRuleParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractUpdateRule<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractUpdateRule< 3 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractPottsUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AdhesionPottsUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DifferentialAdhesionPottsUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SurfaceAreaConstraintPottsUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VolumeConstraintPottsUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCaUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiffusionCaUpdateRule< 3 > >, boost::shared_ptr< AbstractUpdateRule< 3 > > >();
    }

    bp::class_< AbstractCaUpdateRule_less__3__greater__wrapper, bp::bases< AbstractUpdateRule< 3 > >, boost::noncopyable >( "AbstractCaUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , bp::pure_virtual( (double ( ::AbstractCaUpdateRule<3>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 3 > &,double,double,::CellPtr ))(&::AbstractCaUpdateRule< 3 >::EvaluateProbability) )
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AbstractCaUpdateRule<3>::* )( ::out_stream & ))(&::AbstractCaUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( AbstractCaUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCaUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellBasedSimulation2_2", bp::no_init )    
        .def( 
            "AddCellKiller"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellKiller< 2 > > ))( &::AbstractCellBasedSimulation< 2, 2 >::AddCellKiller )
            , ( bp::arg("pCellKiller") ) )    
        .def( 
            "AddSimulationModifier"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > ))( &::AbstractCellBasedSimulation< 2, 2 >::AddSimulationModifier )
            , ( bp::arg("pSimulationModifier") ) )    
        .def( 
            "DoCellBirth"
            , (unsigned int ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_DoCellBirth) )    
        .def( 
            "DoCellRemoval"
            , (unsigned int ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::DoCellRemoval) )    
        .def( 
            "GetDt"
            , (double ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetDt ) )    
        .def( 
            "GetNodeLocation"
            , (::std::vector< double > ( ::AbstractCellBasedSimulation<2, 2>::* )( unsigned int const & ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNodeLocation )
            , ( bp::arg("rNodeIndex") ) )    
        .def( 
            "GetNumBirths"
            , (unsigned int ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNumBirths ) )    
        .def( 
            "GetNumDeaths"
            , (unsigned int ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNumDeaths ) )    
        .def( 
            "GetOutputCellVelocities"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputCellVelocities ) )    
        .def( 
            "GetOutputDirectory"
            , (::std::string ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputDirectory ) )    
        .def( 
            "GetOutputDivisionLocations"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputDivisionLocations ) )    
        .def( 
            "GetUpdateCellPopulationRule"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetUpdateCellPopulationRule ) )    
        .def( 
            "OutputAdditionalSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_OutputAdditionalSimulationSetup)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellBasedSimulation< 2, 2 >::OutputSimulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::OutputSimulationSetup) )    
        .def( 
            "RemoveAllCellKillers"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::RemoveAllCellKillers ) )    
        .def( 
            "SetDt"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( double ))( &::AbstractCellBasedSimulation< 2, 2 >::SetDt )
            , ( bp::arg("dt") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( double ))( &::AbstractCellBasedSimulation< 2, 2 >::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNoBirth"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetNoBirth )
            , ( bp::arg("noBirth") ) )    
        .def( 
            "SetOutputCellVelocities"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputCellVelocities )
            , ( bp::arg("outputCellVelocities") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::std::string ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputDirectory )
            , ( bp::arg("outputDirectory") ) )    
        .def( 
            "SetOutputDivisionLocations"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputDivisionLocations )
            , ( bp::arg("outputDivisionLocations") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( unsigned int ))( &::AbstractCellBasedSimulation< 2, 2 >::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingTimestepMultiple") ) )    
        .def( 
            "SetUpdateCellPopulationRule"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetUpdateCellPopulationRule )
            , ( bp::arg("updateCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_SetupSolve) )    
        .def( 
            "Solve"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::Solve ) )    
        .def( 
            "StoppingEventHasOccurred"
            , (bool ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_StoppingEventHasOccurred) )    
        .def( 
            "UpdateCellLocationsAndTopology"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::UpdateCellLocationsAndTopology) )    
        .def( 
            "UpdateCellPopulation"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_UpdateCellPopulation) )    
        .def( 
            "WriteVisualizerSetupFile"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_WriteVisualizerSetupFile) )    
        .def( 
            "rGetCellPopulation"
            , (::AbstractCellPopulation< 2, 2 > const & ( ::AbstractCellBasedSimulation<2, 2>::* )(  )const)( &::AbstractCellBasedSimulation< 2, 2 >::rGetCellPopulation )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellBasedSimulation3_3", bp::no_init )    
        .def( 
            "AddCellKiller"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellKiller< 3 > > ))( &::AbstractCellBasedSimulation< 3, 3 >::AddCellKiller )
            , ( bp::arg("pCellKiller") ) )    
        .def( 
            "AddSimulationModifier"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > ))( &::AbstractCellBasedSimulation< 3, 3 >::AddSimulationModifier )
            , ( bp::arg("pSimulationModifier") ) )    
        .def( 
            "DoCellBirth"
            , (unsigned int ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_DoCellBirth) )    
        .def( 
            "DoCellRemoval"
            , (unsigned int ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::DoCellRemoval) )    
        .def( 
            "GetDt"
            , (double ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetDt ) )    
        .def( 
            "GetNodeLocation"
            , (::std::vector< double > ( ::AbstractCellBasedSimulation<3, 3>::* )( unsigned int const & ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNodeLocation )
            , ( bp::arg("rNodeIndex") ) )    
        .def( 
            "GetNumBirths"
            , (unsigned int ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNumBirths ) )    
        .def( 
            "GetNumDeaths"
            , (unsigned int ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNumDeaths ) )    
        .def( 
            "GetOutputCellVelocities"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputCellVelocities ) )    
        .def( 
            "GetOutputDirectory"
            , (::std::string ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputDirectory ) )    
        .def( 
            "GetOutputDivisionLocations"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputDivisionLocations ) )    
        .def( 
            "GetUpdateCellPopulationRule"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetUpdateCellPopulationRule ) )    
        .def( 
            "OutputAdditionalSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_OutputAdditionalSimulationSetup)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellBasedSimulation< 3, 3 >::OutputSimulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::OutputSimulationSetup) )    
        .def( 
            "RemoveAllCellKillers"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::RemoveAllCellKillers ) )    
        .def( 
            "SetDt"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( double ))( &::AbstractCellBasedSimulation< 3, 3 >::SetDt )
            , ( bp::arg("dt") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( double ))( &::AbstractCellBasedSimulation< 3, 3 >::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNoBirth"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetNoBirth )
            , ( bp::arg("noBirth") ) )    
        .def( 
            "SetOutputCellVelocities"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputCellVelocities )
            , ( bp::arg("outputCellVelocities") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::std::string ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputDirectory )
            , ( bp::arg("outputDirectory") ) )    
        .def( 
            "SetOutputDivisionLocations"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputDivisionLocations )
            , ( bp::arg("outputDivisionLocations") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( unsigned int ))( &::AbstractCellBasedSimulation< 3, 3 >::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingTimestepMultiple") ) )    
        .def( 
            "SetUpdateCellPopulationRule"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetUpdateCellPopulationRule )
            , ( bp::arg("updateCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_SetupSolve) )    
        .def( 
            "Solve"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::Solve ) )    
        .def( 
            "StoppingEventHasOccurred"
            , (bool ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_StoppingEventHasOccurred) )    
        .def( 
            "UpdateCellLocationsAndTopology"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::UpdateCellLocationsAndTopology) )    
        .def( 
            "UpdateCellPopulation"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_UpdateCellPopulation) )    
        .def( 
            "WriteVisualizerSetupFile"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_WriteVisualizerSetupFile) )    
        .def( 
            "rGetCellPopulation"
            , (::AbstractCellPopulation< 3, 3 > const & ( ::AbstractCellBasedSimulation<3, 3>::* )(  )const)( &::AbstractCellBasedSimulation< 3, 3 >::rGetCellPopulation )
            , bp::return_value_policy< bp::copy_const_reference >() );

    { //::AbstractCellBasedSimulationModifier< 2, 2 >
        typedef bp::class_< AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellBasedSimulationModifier2_2_exposer_t;
        AbstractCellBasedSimulationModifier2_2_exposer_t AbstractCellBasedSimulationModifier2_2_exposer = AbstractCellBasedSimulationModifier2_2_exposer_t( "AbstractCellBasedSimulationModifier2_2", bp::init< >() );
        bp::scope AbstractCellBasedSimulationModifier2_2_scope( AbstractCellBasedSimulationModifier2_2_exposer );
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierInfo
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "OutputSimulationModifierInfo"
                , OutputSimulationModifierInfo_function_type( &::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierParameters
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "OutputSimulationModifierParameters"
                , bp::pure_virtual( OutputSimulationModifierParameters_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::SetupSolve
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetupSolve_function_type)( ::AbstractCellPopulation< 2, 2 > &,::std::string ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::*default_SetupSolve_function_type)( ::AbstractCellPopulation< 2, 2 > &,::std::string ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::SetupSolve)
                , default_SetupSolve_function_type(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_SetupSolve)
                , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::*default_UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "UpdateAtEndOfOutputTimeStep"
                , UpdateAtEndOfOutputTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
                , default_UpdateAtEndOfOutputTimeStep_function_type(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::*default_UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "UpdateAtEndOfSolve"
                , UpdateAtEndOfSolve_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
                , default_UpdateAtEndOfSolve_function_type(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_UpdateAtEndOfSolve)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep
        
            typedef AbstractCellBasedSimulationModifier< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::*default_UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            AbstractCellBasedSimulationModifier2_2_exposer.def( 
                "UpdateAtEndOfTimeStep"
                , UpdateAtEndOfTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep)
                , default_UpdateAtEndOfTimeStep_function_type(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellBasedSimulationModifier<2, 2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractPdeModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractGrowingDomainPdeModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< EllipticGrowingDomainPdeModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VtkSceneModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractTargetAreaModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleTargetAreaModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
    }

    { //::AbstractCellBasedSimulationModifier< 3, 3 >
        typedef bp::class_< AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellBasedSimulationModifier3_3_exposer_t;
        AbstractCellBasedSimulationModifier3_3_exposer_t AbstractCellBasedSimulationModifier3_3_exposer = AbstractCellBasedSimulationModifier3_3_exposer_t( "AbstractCellBasedSimulationModifier3_3", bp::init< >() );
        bp::scope AbstractCellBasedSimulationModifier3_3_scope( AbstractCellBasedSimulationModifier3_3_exposer );
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierInfo
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "OutputSimulationModifierInfo"
                , OutputSimulationModifierInfo_function_type( &::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierParameters
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "OutputSimulationModifierParameters"
                , bp::pure_virtual( OutputSimulationModifierParameters_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::SetupSolve
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::*default_SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::SetupSolve)
                , default_SetupSolve_function_type(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_SetupSolve)
                , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::*default_UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "UpdateAtEndOfOutputTimeStep"
                , UpdateAtEndOfOutputTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
                , default_UpdateAtEndOfOutputTimeStep_function_type(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::*default_UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "UpdateAtEndOfSolve"
                , UpdateAtEndOfSolve_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
                , default_UpdateAtEndOfSolve_function_type(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_UpdateAtEndOfSolve)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep
        
            typedef AbstractCellBasedSimulationModifier< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::*default_UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            AbstractCellBasedSimulationModifier3_3_exposer.def( 
                "UpdateAtEndOfTimeStep"
                , UpdateAtEndOfTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep)
                , default_UpdateAtEndOfTimeStep_function_type(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellBasedSimulationModifier<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractPdeModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractGrowingDomainPdeModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< EllipticGrowingDomainPdeModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VtkSceneModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractTargetAreaModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleTargetAreaModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
    }

    bp::class_< AbstractCellCycleModel_wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellCycleModel", bp::init< AbstractCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( AbstractCellCycleModel_wrapper::* )(  ))(&AbstractCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "CreateCellCycleModel"
            , bp::pure_virtual( (::AbstractCellCycleModel * ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CreateCellCycleModel) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAge"
            , (double ( ::AbstractCellCycleModel::* )(  ))( &::AbstractCellCycleModel::GetAge ) )    
        .def( 
            "GetAverageStemCellCycleTime"
            , bp::pure_virtual( (double ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::GetAverageStemCellCycleTime) ) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , bp::pure_virtual( (double ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::GetAverageTransitCellCycleTime) ) )    
        .def( 
            "GetBirthTime"
            , (double ( ::AbstractCellCycleModel::* )(  )const)( &::AbstractCellCycleModel::GetBirthTime ) )    
        .def( 
            "GetCell"
            , (::CellPtr ( ::AbstractCellCycleModel::* )(  ))( &::AbstractCellCycleModel::GetCell ) )    
        .def( 
            "GetDimension"
            , (unsigned int ( ::AbstractCellCycleModel::* )(  )const)( &::AbstractCellCycleModel::GetDimension ) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::Initialise)
            , (void ( AbstractCellCycleModel_wrapper::* )(  ))(&AbstractCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::InitialiseDaughterCell)
            , (void ( AbstractCellCycleModel_wrapper::* )(  ))(&AbstractCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "OutputCellCycleModelInfo"
            , (void ( ::AbstractCellCycleModel::* )( ::out_stream & ))( &::AbstractCellCycleModel::OutputCellCycleModelInfo )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputCellCycleModelParameters"
            , bp::pure_virtual( (void ( ::AbstractCellCycleModel::* )( ::out_stream & ))(&::AbstractCellCycleModel::OutputCellCycleModelParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "ReadyToDivide"
            , bp::pure_virtual( (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::ReadyToDivide) ) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::ResetForDivision)
            , (void ( AbstractCellCycleModel_wrapper::* )(  ))(&AbstractCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( AbstractCellCycleModel_wrapper::* )( double ))(&AbstractCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) )    
        .def( 
            "SetCell"
            , (void ( ::AbstractCellCycleModel::* )( ::CellPtr ))( &::AbstractCellCycleModel::SetCell )
            , ( bp::arg("pCell") ) )    
        .def( 
            "SetDimension"
            , (void ( ::AbstractCellCycleModel::* )( unsigned int ))( &::AbstractCellCycleModel::SetDimension )
            , ( bp::arg("dimension") ) );

    { //::AbstractCellKiller< 2 >
        typedef bp::class_< AbstractCellKiller_less__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellKiller2_exposer_t;
        AbstractCellKiller2_exposer_t AbstractCellKiller2_exposer = AbstractCellKiller2_exposer_t( "AbstractCellKiller2", bp::init< AbstractCellPopulation< 2, 2 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope AbstractCellKiller2_scope( AbstractCellKiller2_exposer );
        { //::AbstractCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath
        
            typedef AbstractCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            
            AbstractCellKiller2_exposer.def( 
                "CheckAndLabelCellsForApoptosisOrDeath"
                , bp::pure_virtual( CheckAndLabelCellsForApoptosisOrDeath_function_type(&::AbstractCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath) ) );
        
        }
        { //::AbstractCellKiller< 2 >::GetCellPopulation
        
            typedef AbstractCellKiller< 2 > exported_class_t;
            typedef ::AbstractCellPopulation< 2, 2 > const * ( exported_class_t::*GetCellPopulation_function_type)(  ) const;
            
            AbstractCellKiller2_exposer.def( 
                "GetCellPopulation"
                , GetCellPopulation_function_type( &::AbstractCellKiller< 2 >::GetCellPopulation )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AbstractCellKiller< 2 >::OutputCellKillerInfo
        
            typedef AbstractCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellKiller2_exposer.def( 
                "OutputCellKillerInfo"
                , OutputCellKillerInfo_function_type( &::AbstractCellKiller< 2 >::OutputCellKillerInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellKiller< 2 >::OutputCellKillerParameters
        
            typedef AbstractCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellKiller2_exposer.def( 
                "OutputCellKillerParameters"
                , bp::pure_virtual( OutputCellKillerParameters_function_type(&::AbstractCellKiller< 2 >::OutputCellKillerParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellKiller<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellKiller< 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< RandomCellKiller< 2 > >, boost::shared_ptr< AbstractCellKiller< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< PlaneBasedCellKiller< 2 > >, boost::shared_ptr< AbstractCellKiller< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< ApoptoticCellKiller< 2 > >, boost::shared_ptr< AbstractCellKiller< 2 > > >();
    }

    { //::AbstractCellKiller< 3 >
        typedef bp::class_< AbstractCellKiller_less__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellKiller3_exposer_t;
        AbstractCellKiller3_exposer_t AbstractCellKiller3_exposer = AbstractCellKiller3_exposer_t( "AbstractCellKiller3", bp::init< AbstractCellPopulation< 3, 3 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope AbstractCellKiller3_scope( AbstractCellKiller3_exposer );
        { //::AbstractCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath
        
            typedef AbstractCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            
            AbstractCellKiller3_exposer.def( 
                "CheckAndLabelCellsForApoptosisOrDeath"
                , bp::pure_virtual( CheckAndLabelCellsForApoptosisOrDeath_function_type(&::AbstractCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath) ) );
        
        }
        { //::AbstractCellKiller< 3 >::GetCellPopulation
        
            typedef AbstractCellKiller< 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 > const * ( exported_class_t::*GetCellPopulation_function_type)(  ) const;
            
            AbstractCellKiller3_exposer.def( 
                "GetCellPopulation"
                , GetCellPopulation_function_type( &::AbstractCellKiller< 3 >::GetCellPopulation )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AbstractCellKiller< 3 >::OutputCellKillerInfo
        
            typedef AbstractCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellKiller3_exposer.def( 
                "OutputCellKillerInfo"
                , OutputCellKillerInfo_function_type( &::AbstractCellKiller< 3 >::OutputCellKillerInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellKiller< 3 >::OutputCellKillerParameters
        
            typedef AbstractCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellKiller3_exposer.def( 
                "OutputCellKillerParameters"
                , bp::pure_virtual( OutputCellKillerParameters_function_type(&::AbstractCellKiller< 3 >::OutputCellKillerParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellKiller<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellKiller< 3 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< PlaneBasedCellKiller< 3 > >, boost::shared_ptr< AbstractCellKiller< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< ApoptoticCellKiller< 3 > >, boost::shared_ptr< AbstractCellKiller< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< RandomCellKiller< 3 > >, boost::shared_ptr< AbstractCellKiller< 3 > > >();
    }

    { //::AbstractCellProperty
        typedef bp::class_< AbstractCellProperty, bp::bases< Identifiable > > AbstractCellProperty_exposer_t;
        AbstractCellProperty_exposer_t AbstractCellProperty_exposer = AbstractCellProperty_exposer_t( "AbstractCellProperty", bp::init< >() );
        bp::scope AbstractCellProperty_scope( AbstractCellProperty_exposer );
        { //::AbstractCellProperty::DecrementCellCount
        
            typedef void ( ::AbstractCellProperty::*DecrementCellCount_function_type)(  ) ;
            
            AbstractCellProperty_exposer.def( 
                "DecrementCellCount"
                , DecrementCellCount_function_type( &::AbstractCellProperty::DecrementCellCount ) );
        
        }
        { //::AbstractCellProperty::GetCellCount
        
            typedef unsigned int ( ::AbstractCellProperty::*GetCellCount_function_type)(  ) const;
            
            AbstractCellProperty_exposer.def( 
                "GetCellCount"
                , GetCellCount_function_type( &::AbstractCellProperty::GetCellCount ) );
        
        }
        { //::AbstractCellProperty::IncrementCellCount
        
            typedef void ( ::AbstractCellProperty::*IncrementCellCount_function_type)(  ) ;
            
            AbstractCellProperty_exposer.def( 
                "IncrementCellCount"
                , IncrementCellCount_function_type( &::AbstractCellProperty::IncrementCellCount ) );
        
        }
        { //::AbstractCellProperty::IsSame
        
            typedef bool ( ::AbstractCellProperty::*IsSame_function_type)( ::AbstractCellProperty const * ) const;
            
            AbstractCellProperty_exposer.def( 
                "IsSame"
                , IsSame_function_type( &::AbstractCellProperty::IsSame )
                , ( bp::arg("pOther") ) );
        
        }
        { //::AbstractCellProperty::IsSame
        
            typedef bool ( ::AbstractCellProperty::*IsSame_function_type)( ::boost::shared_ptr< const AbstractCellProperty > ) const;
            
            AbstractCellProperty_exposer.def( 
                "IsSame"
                , IsSame_function_type( &::AbstractCellProperty::IsSame )
                , ( bp::arg("pOther") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellProperty >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< TransitCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< StemCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< DefaultCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< DifferentiatedCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< WildTypeCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< ApcTwoHitCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< ApcOneHitCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< BetaCateninOneHitCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellVecData >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellLabel >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellAncestor >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellId >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellData >, boost::shared_ptr< AbstractCellProperty > >();
    }

    { //::AbstractCellMutationState
        typedef bp::class_< AbstractCellMutationState, bp::bases< AbstractCellProperty > > AbstractCellMutationState_exposer_t;
        AbstractCellMutationState_exposer_t AbstractCellMutationState_exposer = AbstractCellMutationState_exposer_t( "AbstractCellMutationState", bp::init< unsigned int >(( bp::arg("colour") )) );
        bp::scope AbstractCellMutationState_scope( AbstractCellMutationState_exposer );
        bp::implicitly_convertible< unsigned int, AbstractCellMutationState >();
        { //::AbstractCellMutationState::GetColour
        
            typedef unsigned int ( ::AbstractCellMutationState::*GetColour_function_type)(  ) const;
            
            AbstractCellMutationState_exposer.def( 
                "GetColour"
                , GetColour_function_type( &::AbstractCellMutationState::GetColour ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellMutationState > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellMutationState >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< WildTypeCellMutationState >, boost::shared_ptr< AbstractCellMutationState > >();
        bp::implicitly_convertible< boost::shared_ptr< ApcTwoHitCellMutationState >, boost::shared_ptr< AbstractCellMutationState > >();
        bp::implicitly_convertible< boost::shared_ptr< ApcOneHitCellMutationState >, boost::shared_ptr< AbstractCellMutationState > >();
        bp::implicitly_convertible< boost::shared_ptr< BetaCateninOneHitCellMutationState >, boost::shared_ptr< AbstractCellMutationState > >();
    }

    { //::AbstractCellPopulation< 2, 2 >
        typedef bp::class_< AbstractCellPopulation_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellPopulation2_2_exposer_t;
        AbstractCellPopulation2_2_exposer_t AbstractCellPopulation2_2_exposer = AbstractCellPopulation2_2_exposer_t( "AbstractCellPopulation2_2", bp::no_init );
        bp::scope AbstractCellPopulation2_2_scope( AbstractCellPopulation2_2_exposer );
        bp::class_< AbstractCellPopulation< 2, 2 >::Iterator, boost::noncopyable >( "Iterator", bp::no_init )    
            .def( bp::self != bp::self );
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr<AbstractCellWriter<2, 2> >,::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AcceptCellWriter"
                , bp::pure_virtual( AcceptCellWriter_function_type(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationCountWriter<2, 2> > ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AcceptPopulationCountWriter"
                , bp::pure_virtual( AcceptPopulationCountWriter_function_type(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationWriter<2, 2> > ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AcceptPopulationWriter"
                , bp::pure_virtual( AcceptPopulationWriter_function_type(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCell
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AddCell"
                , bp::pure_virtual( AddCell_function_type(&::AbstractCellPopulation< 2, 2 >::AddCell) )
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellPopulationCountWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AddCellPopulationCountWriter"
                , AddCellPopulationCountWriter_function_type( &::AbstractCellPopulation< 2, 2 >::AddCellPopulationCountWriter )
                , ( bp::arg("pCellPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AddCellWriter"
                , AddCellWriter_function_type( &::AbstractCellPopulation< 2, 2 >::AddCellWriter )
                , ( bp::arg("pCellWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddPopulationWriter
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "AddPopulationWriter"
                , AddPopulationWriter_function_type( &::AbstractCellPopulation< 2, 2 >::AddPopulationWriter )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::Begin
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::AbstractCellPopulation< 2, 2 >::Iterator ( exported_class_t::*Begin_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "Begin"
                , Begin_function_type( &::AbstractCellPopulation< 2, 2 >::Begin ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::CloseWritersFiles
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*CloseWritersFiles_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "CloseWritersFiles"
                , CloseWritersFiles_function_type( &::AbstractCellPopulation< 2, 2 >::CloseWritersFiles ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::CreateOrderedPair
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::pair< unsigned int, unsigned int > ( exported_class_t::*CreateOrderedPair_function_type)( unsigned int,unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "CreateOrderedPair"
                , CreateOrderedPair_function_type( &::AbstractCellPopulation< 2, 2 >::CreateOrderedPair )
                , ( bp::arg("index1"), bp::arg("index2") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::End
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::AbstractCellPopulation< 2, 2 >::Iterator ( exported_class_t::*End_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "End"
                , End_function_type( &::AbstractCellPopulation< 2, 2 >::End ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellAncestors
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetCellAncestors_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellAncestors"
                , GetCellAncestors_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellAncestors ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellCyclePhaseCount
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellCyclePhaseCount_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellCyclePhaseCount"
                , GetCellCyclePhaseCount_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellCyclePhaseCount ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , bp::pure_virtual( GetCellDataItemAtPdeNode_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode) )
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellMutationStateCount
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellMutationStateCount_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellMutationStateCount"
                , GetCellMutationStateCount_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellMutationStateCount ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellProliferativeTypeCount
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellProliferativeTypeCount_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellProliferativeTypeCount"
                , GetCellProliferativeTypeCount_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellProliferativeTypeCount ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellPropertyRegistry
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< CellPropertyRegistry > ( exported_class_t::*GetCellPropertyRegistry_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellPropertyRegistry"
                , GetCellPropertyRegistry_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellPropertyRegistry ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellsUsingLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set< boost::shared_ptr<Cell> > ( exported_class_t::*GetCellsUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCellsUsingLocationIndex"
                , GetCellsUsingLocationIndex_function_type( &::AbstractCellPopulation< 2, 2 >::GetCellsUsingLocationIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCentroidOfCellPopulation
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetCentroidOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetCentroidOfCellPopulation"
                , GetCentroidOfCellPopulation_function_type( &::AbstractCellPopulation< 2, 2 >::GetCentroidOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetDefaultTimeStep
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetDefaultTimeStep"
                , bp::pure_virtual( GetDefaultTimeStep_function_type(&::AbstractCellPopulation< 2, 2 >::GetDefaultTimeStep) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetLocationIndexUsingCell
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetLocationIndexUsingCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetLocationIndexUsingCell"
                , GetLocationIndexUsingCell_function_type( &::AbstractCellPopulation< 2, 2 >::GetLocationIndexUsingCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector<double, 2> ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetLocationOfCellCentre"
                , bp::pure_virtual( GetLocationOfCellCentre_function_type(&::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , bp::pure_virtual( GetNeighbouringLocationIndices_function_type(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetNeighbouringNodeIndices
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , bp::pure_virtual( GetNeighbouringNodeIndices_function_type(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringNodeIndices) )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetNumAllCells
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllCells_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetNumAllCells"
                , GetNumAllCells_function_type( &::AbstractCellPopulation< 2, 2 >::GetNumAllCells ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetNumNodes
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetNumNodes"
                , bp::pure_virtual( GetNumNodes_function_type(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetNumRealCells
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumRealCells_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetNumRealCells"
                , GetNumRealCells_function_type( &::AbstractCellPopulation< 2, 2 >::GetNumRealCells ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputResultsForChasteVisualizer_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetOutputResultsForChasteVisualizer"
                , GetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 2, 2 >::GetOutputResultsForChasteVisualizer ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetSizeOfCellPopulation
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::AbstractCellPopulation< 2, 2 >::GetSizeOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetVolumeOfCell"
                , bp::pure_virtual( GetVolumeOfCell_function_type(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetWidth
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "GetWidth"
                , bp::pure_virtual( GetWidth_function_type(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::InitialiseCells
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*InitialiseCells_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "InitialiseCells"
                , InitialiseCells_function_type( &::AbstractCellPopulation< 2, 2 >::InitialiseCells ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , bp::pure_virtual( IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::MoveCellInLocationMap
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*MoveCellInLocationMap_function_type)( ::CellPtr,unsigned int,unsigned int ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "MoveCellInLocationMap"
                , MoveCellInLocationMap_function_type( &::AbstractCellPopulation< 2, 2 >::MoveCellInLocationMap )
                , ( bp::arg("pCell"), bp::arg("old_index"), bp::arg("new_index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::OpenWritersFiles
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::OutputCellPopulationInfo
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "OutputCellPopulationInfo"
                , OutputCellPopulationInfo_function_type( &::AbstractCellPopulation< 2, 2 >::OutputCellPopulationInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::OutputCellPopulationParameters
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "OutputCellPopulationParameters"
                , bp::pure_virtual( OutputCellPopulationParameters_function_type(&::AbstractCellPopulation< 2, 2 >::OutputCellPopulationParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveDeadCells
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "RemoveDeadCells"
                , bp::pure_virtual( RemoveDeadCells_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetCellAncestorsToLocationIndices
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellAncestorsToLocationIndices_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetCellAncestorsToLocationIndices"
                , SetCellAncestorsToLocationIndices_function_type( &::AbstractCellPopulation< 2, 2 >::SetCellAncestorsToLocationIndices ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetCellUsingLocationIndex"
                , SetCellUsingLocationIndex_function_type( &::AbstractCellPopulation< 2, 2 >::SetCellUsingLocationIndex )
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetDataOnAllCells
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDataOnAllCells_function_type)( ::std::string const &,double ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetDataOnAllCells"
                , SetDataOnAllCells_function_type( &::AbstractCellPopulation< 2, 2 >::SetDataOnAllCells )
                , ( bp::arg("rDataName"), bp::arg("dataValue") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetDefaultCellMutationStateAndProliferativeTypeOrdering"
                , SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type( &::AbstractCellPopulation< 2, 2 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetNode
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint<2> & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetNode"
                , bp::pure_virtual( SetNode_function_type(&::AbstractCellPopulation< 2, 2 >::SetNode) )
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputResultsForChasteVisualizer_function_type)( bool ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SetOutputResultsForChasteVisualizer"
                , SetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 2, 2 >::SetOutputResultsForChasteVisualizer )
                , ( bp::arg("outputResultsForChasteVisualizer") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::Update
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "Update"
                , bp::pure_virtual( Update_function_type(&::AbstractCellPopulation< 2, 2 >::Update) )
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::Validate
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*Validate_function_type)(  ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "Validate"
                , Validate_function_type( &AbstractCellPopulation_less__2_comma__2__greater__wrapper::Validate ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteVtkResultsToFile
        
            typedef AbstractCellPopulation< 2, 2 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation2_2_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type( &AbstractCellPopulation_less__2_comma__2__greater__wrapper::WriteVtkResultsToFile )
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::AbstractCellPopulation< 3, 3 >
        typedef bp::class_< AbstractCellPopulation_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellPopulation3_3_exposer_t;
        AbstractCellPopulation3_3_exposer_t AbstractCellPopulation3_3_exposer = AbstractCellPopulation3_3_exposer_t( "AbstractCellPopulation3_3", bp::no_init );
        bp::scope AbstractCellPopulation3_3_scope( AbstractCellPopulation3_3_exposer );
        bp::class_< AbstractCellPopulation< 3, 3 >::Iterator, boost::noncopyable >( "Iterator", bp::no_init )    
            .def( bp::self != bp::self );
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr<AbstractCellWriter<3, 3> >,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptCellWriter"
                , bp::pure_virtual( AcceptCellWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationCountWriter<3, 3> > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptPopulationCountWriter"
                , bp::pure_virtual( AcceptPopulationCountWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr<AbstractCellPopulationWriter<3, 3> > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AcceptPopulationWriter"
                , bp::pure_virtual( AcceptPopulationWriter_function_type(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCell"
                , bp::pure_virtual( AddCell_function_type(&::AbstractCellPopulation< 3, 3 >::AddCell) )
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellPopulationCountWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellPopulationCountWriter"
                , AddCellPopulationCountWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddCellPopulationCountWriter )
                , ( bp::arg("pCellPopulationCountWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddCellWriter"
                , AddCellWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddCellWriter )
                , ( bp::arg("pCellWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddPopulationWriter
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "AddPopulationWriter"
                , AddPopulationWriter_function_type( &::AbstractCellPopulation< 3, 3 >::AddPopulationWriter )
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Begin
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 >::Iterator ( exported_class_t::*Begin_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Begin"
                , Begin_function_type( &::AbstractCellPopulation< 3, 3 >::Begin ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::CloseWritersFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CloseWritersFiles_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "CloseWritersFiles"
                , CloseWritersFiles_function_type( &::AbstractCellPopulation< 3, 3 >::CloseWritersFiles ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::CreateOrderedPair
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::pair< unsigned int, unsigned int > ( exported_class_t::*CreateOrderedPair_function_type)( unsigned int,unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "CreateOrderedPair"
                , CreateOrderedPair_function_type( &::AbstractCellPopulation< 3, 3 >::CreateOrderedPair )
                , ( bp::arg("index1"), bp::arg("index2") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::End
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 >::Iterator ( exported_class_t::*End_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "End"
                , End_function_type( &::AbstractCellPopulation< 3, 3 >::End ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellAncestors
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetCellAncestors_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellAncestors"
                , GetCellAncestors_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellAncestors ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellCyclePhaseCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellCyclePhaseCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellCyclePhaseCount"
                , GetCellCyclePhaseCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellCyclePhaseCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , bp::pure_virtual( GetCellDataItemAtPdeNode_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellMutationStateCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellMutationStateCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellMutationStateCount"
                , GetCellMutationStateCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellMutationStateCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellProliferativeTypeCount
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellProliferativeTypeCount_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellProliferativeTypeCount"
                , GetCellProliferativeTypeCount_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellProliferativeTypeCount ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellPropertyRegistry
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< CellPropertyRegistry > ( exported_class_t::*GetCellPropertyRegistry_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellPropertyRegistry"
                , GetCellPropertyRegistry_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellPropertyRegistry ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellsUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< boost::shared_ptr<Cell> > ( exported_class_t::*GetCellsUsingLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCellsUsingLocationIndex"
                , GetCellsUsingLocationIndex_function_type( &::AbstractCellPopulation< 3, 3 >::GetCellsUsingLocationIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCentroidOfCellPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetCentroidOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetCentroidOfCellPopulation"
                , GetCentroidOfCellPopulation_function_type( &::AbstractCellPopulation< 3, 3 >::GetCentroidOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetDefaultTimeStep"
                , bp::pure_virtual( GetDefaultTimeStep_function_type(&::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetLocationIndexUsingCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetLocationIndexUsingCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetLocationIndexUsingCell"
                , GetLocationIndexUsingCell_function_type( &::AbstractCellPopulation< 3, 3 >::GetLocationIndexUsingCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector<double, 3> ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetLocationOfCellCentre"
                , bp::pure_virtual( GetLocationOfCellCentre_function_type(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , bp::pure_virtual( GetNeighbouringLocationIndices_function_type(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , bp::pure_virtual( GetNeighbouringNodeIndices_function_type(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices) )
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumAllCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumAllCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumAllCells"
                , GetNumAllCells_function_type( &::AbstractCellPopulation< 3, 3 >::GetNumAllCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumNodes
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumNodes"
                , bp::pure_virtual( GetNumNodes_function_type(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetNumRealCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumRealCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetNumRealCells"
                , GetNumRealCells_function_type( &::AbstractCellPopulation< 3, 3 >::GetNumRealCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputResultsForChasteVisualizer_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetOutputResultsForChasteVisualizer"
                , GetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 3, 3 >::GetOutputResultsForChasteVisualizer ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetSizeOfCellPopulation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::AbstractCellPopulation< 3, 3 >::GetSizeOfCellPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetVolumeOfCell"
                , bp::pure_virtual( GetVolumeOfCell_function_type(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetWidth
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "GetWidth"
                , bp::pure_virtual( GetWidth_function_type(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::InitialiseCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*InitialiseCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "InitialiseCells"
                , InitialiseCells_function_type( &::AbstractCellPopulation< 3, 3 >::InitialiseCells ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , bp::pure_virtual( IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::MoveCellInLocationMap
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*MoveCellInLocationMap_function_type)( ::CellPtr,unsigned int,unsigned int ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "MoveCellInLocationMap"
                , MoveCellInLocationMap_function_type( &::AbstractCellPopulation< 3, 3 >::MoveCellInLocationMap )
                , ( bp::arg("pCell"), bp::arg("old_index"), bp::arg("new_index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OpenWritersFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OutputCellPopulationInfo
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OutputCellPopulationInfo"
                , OutputCellPopulationInfo_function_type( &::AbstractCellPopulation< 3, 3 >::OutputCellPopulationInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OutputCellPopulationParameters
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "OutputCellPopulationParameters"
                , bp::pure_virtual( OutputCellPopulationParameters_function_type(&::AbstractCellPopulation< 3, 3 >::OutputCellPopulationParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveDeadCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "RemoveDeadCells"
                , bp::pure_virtual( RemoveDeadCells_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetCellAncestorsToLocationIndices
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellAncestorsToLocationIndices_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetCellAncestorsToLocationIndices"
                , SetCellAncestorsToLocationIndices_function_type( &::AbstractCellPopulation< 3, 3 >::SetCellAncestorsToLocationIndices ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetCellUsingLocationIndex
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetCellUsingLocationIndex"
                , SetCellUsingLocationIndex_function_type( &::AbstractCellPopulation< 3, 3 >::SetCellUsingLocationIndex )
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetDataOnAllCells
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDataOnAllCells_function_type)( ::std::string const &,double ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetDataOnAllCells"
                , SetDataOnAllCells_function_type( &::AbstractCellPopulation< 3, 3 >::SetDataOnAllCells )
                , ( bp::arg("rDataName"), bp::arg("dataValue") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetDefaultCellMutationStateAndProliferativeTypeOrdering"
                , SetDefaultCellMutationStateAndProliferativeTypeOrdering_function_type( &::AbstractCellPopulation< 3, 3 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetNode
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint<3> & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetNode"
                , bp::pure_virtual( SetNode_function_type(&::AbstractCellPopulation< 3, 3 >::SetNode) )
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SetOutputResultsForChasteVisualizer
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputResultsForChasteVisualizer_function_type)( bool ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SetOutputResultsForChasteVisualizer"
                , SetOutputResultsForChasteVisualizer_function_type( &::AbstractCellPopulation< 3, 3 >::SetOutputResultsForChasteVisualizer )
                , ( bp::arg("outputResultsForChasteVisualizer") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Update
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Update"
                , bp::pure_virtual( Update_function_type(&::AbstractCellPopulation< 3, 3 >::Update) )
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::Validate
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*Validate_function_type)(  ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "Validate"
                , Validate_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::Validate ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteVtkResultsToFile
        
            typedef AbstractCellPopulation< 3, 3 > exported_class_t;
            typedef void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            AbstractCellPopulation3_3_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type( &AbstractCellPopulation_less__3_comma__3__greater__wrapper::WriteVtkResultsToFile )
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::AbstractCellPopulationBoundaryCondition< 2, 2 >
        typedef bp::class_< AbstractCellPopulationBoundaryCondition_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellPopulationBoundaryCondition2_2_exposer_t;
        AbstractCellPopulationBoundaryCondition2_2_exposer_t AbstractCellPopulationBoundaryCondition2_2_exposer = AbstractCellPopulationBoundaryCondition2_2_exposer_t( "AbstractCellPopulationBoundaryCondition2_2", bp::init< AbstractCellPopulation< 2, 2 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope AbstractCellPopulationBoundaryCondition2_2_scope( AbstractCellPopulationBoundaryCondition2_2_exposer );
        { //::AbstractCellPopulationBoundaryCondition< 2, 2 >::GetCellPopulation
        
            typedef AbstractCellPopulationBoundaryCondition< 2, 2 > exported_class_t;
            typedef ::AbstractCellPopulation< 2, 2 > const * ( exported_class_t::*GetCellPopulation_function_type)(  ) const;
            
            AbstractCellPopulationBoundaryCondition2_2_exposer.def( 
                "GetCellPopulation"
                , GetCellPopulation_function_type( &::AbstractCellPopulationBoundaryCondition< 2, 2 >::GetCellPopulation )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 2, 2 >::ImposeBoundaryCondition
        
            typedef AbstractCellPopulationBoundaryCondition< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*ImposeBoundaryCondition_function_type)( ::std::map<Node<2> *, boost::numeric::ublas::c_vector<double, 2>, std::less<Node<2> *>, std::allocator<std::pair<Node<2> *const, boost::numeric::ublas::c_vector<double, 2> > > > const & ) ;
            
            AbstractCellPopulationBoundaryCondition2_2_exposer.def( 
                "ImposeBoundaryCondition"
                , bp::pure_virtual( ImposeBoundaryCondition_function_type(&::AbstractCellPopulationBoundaryCondition< 2, 2 >::ImposeBoundaryCondition) )
                , ( bp::arg("rOldLocations") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionInfo
        
            typedef AbstractCellPopulationBoundaryCondition< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationBoundaryConditionInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulationBoundaryCondition2_2_exposer.def( 
                "OutputCellPopulationBoundaryConditionInfo"
                , OutputCellPopulationBoundaryConditionInfo_function_type( &::AbstractCellPopulationBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionParameters
        
            typedef AbstractCellPopulationBoundaryCondition< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationBoundaryConditionParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulationBoundaryCondition2_2_exposer.def( 
                "OutputCellPopulationBoundaryConditionParameters"
                , bp::pure_virtual( OutputCellPopulationBoundaryConditionParameters_function_type(&::AbstractCellPopulationBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 2, 2 >::VerifyBoundaryCondition
        
            typedef AbstractCellPopulationBoundaryCondition< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*VerifyBoundaryCondition_function_type)(  ) ;
            
            AbstractCellPopulationBoundaryCondition2_2_exposer.def( 
                "VerifyBoundaryCondition"
                , bp::pure_virtual( VerifyBoundaryCondition_function_type(&::AbstractCellPopulationBoundaryCondition< 2, 2 >::VerifyBoundaryCondition) ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellPopulationBoundaryCondition<2, 2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 2, 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< PlaneBoundaryCondition< 2, 2 > >, boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SphereGeometryBoundaryCondition< 2 > >, boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 2, 2 > > >();
    }

    { //::AbstractCellPopulationBoundaryCondition< 3, 3 >
        typedef bp::class_< AbstractCellPopulationBoundaryCondition_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellPopulationBoundaryCondition3_3_exposer_t;
        AbstractCellPopulationBoundaryCondition3_3_exposer_t AbstractCellPopulationBoundaryCondition3_3_exposer = AbstractCellPopulationBoundaryCondition3_3_exposer_t( "AbstractCellPopulationBoundaryCondition3_3", bp::init< AbstractCellPopulation< 3, 3 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope AbstractCellPopulationBoundaryCondition3_3_scope( AbstractCellPopulationBoundaryCondition3_3_exposer );
        { //::AbstractCellPopulationBoundaryCondition< 3, 3 >::GetCellPopulation
        
            typedef AbstractCellPopulationBoundaryCondition< 3, 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 > const * ( exported_class_t::*GetCellPopulation_function_type)(  ) const;
            
            AbstractCellPopulationBoundaryCondition3_3_exposer.def( 
                "GetCellPopulation"
                , GetCellPopulation_function_type( &::AbstractCellPopulationBoundaryCondition< 3, 3 >::GetCellPopulation )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 3, 3 >::ImposeBoundaryCondition
        
            typedef AbstractCellPopulationBoundaryCondition< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*ImposeBoundaryCondition_function_type)( ::std::map<Node<3> *, boost::numeric::ublas::c_vector<double, 3>, std::less<Node<3> *>, std::allocator<std::pair<Node<3> *const, boost::numeric::ublas::c_vector<double, 3> > > > const & ) ;
            
            AbstractCellPopulationBoundaryCondition3_3_exposer.def( 
                "ImposeBoundaryCondition"
                , bp::pure_virtual( ImposeBoundaryCondition_function_type(&::AbstractCellPopulationBoundaryCondition< 3, 3 >::ImposeBoundaryCondition) )
                , ( bp::arg("rOldLocations") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionInfo
        
            typedef AbstractCellPopulationBoundaryCondition< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationBoundaryConditionInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulationBoundaryCondition3_3_exposer.def( 
                "OutputCellPopulationBoundaryConditionInfo"
                , OutputCellPopulationBoundaryConditionInfo_function_type( &::AbstractCellPopulationBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionParameters
        
            typedef AbstractCellPopulationBoundaryCondition< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationBoundaryConditionParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellPopulationBoundaryCondition3_3_exposer.def( 
                "OutputCellPopulationBoundaryConditionParameters"
                , bp::pure_virtual( OutputCellPopulationBoundaryConditionParameters_function_type(&::AbstractCellPopulationBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellPopulationBoundaryCondition< 3, 3 >::VerifyBoundaryCondition
        
            typedef AbstractCellPopulationBoundaryCondition< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*VerifyBoundaryCondition_function_type)(  ) ;
            
            AbstractCellPopulationBoundaryCondition3_3_exposer.def( 
                "VerifyBoundaryCondition"
                , bp::pure_virtual( VerifyBoundaryCondition_function_type(&::AbstractCellPopulationBoundaryCondition< 3, 3 >::VerifyBoundaryCondition) ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellPopulationBoundaryCondition<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 3, 3 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< SphereGeometryBoundaryCondition< 3 > >, boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< PlaneBoundaryCondition< 3, 3 > >, boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 3, 3 > > >();
    }

    { //::AbstractCellProliferativeType
        typedef bp::class_< AbstractCellProliferativeType, bp::bases< AbstractCellProperty > > AbstractCellProliferativeType_exposer_t;
        AbstractCellProliferativeType_exposer_t AbstractCellProliferativeType_exposer = AbstractCellProliferativeType_exposer_t( "AbstractCellProliferativeType", bp::init< unsigned int >(( bp::arg("colour") )) );
        bp::scope AbstractCellProliferativeType_scope( AbstractCellProliferativeType_exposer );
        bp::implicitly_convertible< unsigned int, AbstractCellProliferativeType >();
        { //::AbstractCellProliferativeType::GetColour
        
            typedef unsigned int ( ::AbstractCellProliferativeType::*GetColour_function_type)(  ) const;
            
            AbstractCellProliferativeType_exposer.def( 
                "GetColour"
                , GetColour_function_type( &::AbstractCellProliferativeType::GetColour ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellProliferativeType > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellProliferativeType >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< TransitCellProliferativeType >, boost::shared_ptr< AbstractCellProliferativeType > >();
        bp::implicitly_convertible< boost::shared_ptr< StemCellProliferativeType >, boost::shared_ptr< AbstractCellProliferativeType > >();
        bp::implicitly_convertible< boost::shared_ptr< DefaultCellProliferativeType >, boost::shared_ptr< AbstractCellProliferativeType > >();
        bp::implicitly_convertible< boost::shared_ptr< DifferentiatedCellProliferativeType >, boost::shared_ptr< AbstractCellProliferativeType > >();
    }

    bp::class_< AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper, bp::bases< AbstractCellPopulation< 2, 2 > >, boost::noncopyable >( "AbstractOffLatticeCellPopulation2_2", bp::no_init )    
        .def( 
            "AddNode"
            , bp::pure_virtual( (unsigned int ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( ::Node< 2 > * ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::AddNode) )
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "CheckForStepSizeException"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::CheckForStepSizeException) )
            , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) )    
        .def( 
            "GetAbsoluteMovementThreshold"
            , (double ( ::AbstractOffLatticeCellPopulation<2, 2>::* )(  ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::GetAbsoluteMovementThreshold ) )    
        .def( 
            "GetDampingConstant"
            , bp::pure_virtual( (double ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::GetDampingConstant) )
            , ( bp::arg("nodeIndex") ) )    
        .def( 
            "GetDampingConstantMutant"
            , (double ( ::AbstractOffLatticeCellPopulation<2, 2>::* )(  ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::GetDampingConstantMutant ) )    
        .def( 
            "GetDampingConstantNormal"
            , (double ( ::AbstractOffLatticeCellPopulation<2, 2>::* )(  ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::GetDampingConstantNormal ) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::OutputCellPopulationParameters)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetAbsoluteMovementThreshold"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( double ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::SetAbsoluteMovementThreshold )
            , ( bp::arg("absoluteMovementThreshold") ) )    
        .def( 
            "SetDampingConstantMutant"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( double ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::SetDampingConstantMutant )
            , ( bp::arg("dampingConstantMutant") ) )    
        .def( 
            "SetDampingConstantNormal"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( double ))( &::AbstractOffLatticeCellPopulation< 2, 2 >::SetDampingConstantNormal )
            , ( bp::arg("dampingConstantNormal") ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( unsigned int,::ChastePoint< 2 > & ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "UpdateNodeLocations"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( double ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( double ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateNodeLocations)
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetDefaultTimeStep"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetDefaultTimeStep) ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int const & ))(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
            , (bool ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))(&::AbstractCellPopulation< 2, 2 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const & ))(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOffLatticeCellPopulation_less__2_comma__2__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper, bp::bases< AbstractOffLatticeCellPopulation< 2, 2 > >, boost::noncopyable >( "AbstractCentreBasedCellPopulation2_2", bp::no_init )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AddCell"
            , (::CellPtr ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::AddCell)
            , (::CellPtr ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AddCell)
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "CheckForStepSizeException"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_CheckForStepSizeException)
            , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) )    
        .def( 
            "CreateCellPair"
            , (::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::CreateCellPair )
            , ( bp::arg("pCell1"), bp::arg("pCell2") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , (double ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode)
            , (double ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::std::string &,bool,double ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCentreBasedDivisionRule"
            , (::boost::shared_ptr< AbstractCentreBasedDivisionRule< 2, 2 > > ( ::AbstractCentreBasedCellPopulation<2, 2>::* )(  ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::GetCentreBasedDivisionRule ) )    
        .def( 
            "GetDampingConstant"
            , (double ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant)
            , (double ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetDampingConstant)
            , ( bp::arg("nodeIndex") ) )    
        .def( 
            "GetDefaultTimeStep"
            , (double ( ::AbstractCentreBasedCellPopulation<2, 2>::* )(  ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep)
            , (double ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetDefaultTimeStep) )    
        .def( 
            "GetLocationOfCellCentre"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre)
            , (::boost::numeric::ublas::c_vector< double, 2 > ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetLocationOfCellCentre)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetMeinekeDivisionSeparation"
            , (double ( ::AbstractCentreBasedCellPopulation<2, 2>::* )(  ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::GetMeinekeDivisionSeparation ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , (::std::set< unsigned int > ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices)
            , (::std::set< unsigned int > ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetNeighbouringLocationIndices)
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , (bool ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsGhostNode"
            , (bool ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsGhostNode)
            , ( bp::arg("index") ) )    
        .def( 
            "IsMarkedSpring"
            , (bool ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > const & ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::IsMarkedSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "IsParticle"
            , (bool ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsParticle)
            , ( bp::arg("index") ) )    
        .def( 
            "MarkSpring"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > & ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::MarkSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCentreBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCentreBasedDivisionRule"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCentreBasedDivisionRule< 2, 2 > > ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::SetCentreBasedDivisionRule )
            , ( bp::arg("pCentreBasedDivisionRule") ) )    
        .def( 
            "SetMeinekeDivisionSeparation"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( double ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::SetMeinekeDivisionSeparation )
            , ( bp::arg("divisionSeparation") ) )    
        .def( 
            "UnmarkSpring"
            , (void ( ::AbstractCentreBasedCellPopulation<2, 2>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > & ))( &::AbstractCentreBasedCellPopulation< 2, 2 >::UnmarkSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "AddNode"
            , bp::pure_virtual( (unsigned int ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( ::Node< 2 > * ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::AddNode) )
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int const & ))(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
            , (bool ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( unsigned int,::ChastePoint< 2 > & ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))(&::AbstractCellPopulation< 2, 2 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "UpdateNodeLocations"
            , (void ( ::AbstractOffLatticeCellPopulation<2, 2>::* )( double ))(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( double ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateNodeLocations)
            , ( bp::arg("dt") ) )    
        .def( 
            "Validate"
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const & ))(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
            , (void ( AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractCentreBasedCellPopulation_less__2_comma__2__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper, bp::bases< AbstractCellPopulation< 3, 3 > >, boost::noncopyable >( "AbstractOffLatticeCellPopulation3_3", bp::no_init )    
        .def( 
            "AddNode"
            , bp::pure_virtual( (unsigned int ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( ::Node< 3 > * ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::AddNode) )
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "CheckForStepSizeException"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::CheckForStepSizeException) )
            , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) )    
        .def( 
            "GetAbsoluteMovementThreshold"
            , (double ( ::AbstractOffLatticeCellPopulation<3, 3>::* )(  ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::GetAbsoluteMovementThreshold ) )    
        .def( 
            "GetDampingConstant"
            , bp::pure_virtual( (double ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::GetDampingConstant) )
            , ( bp::arg("nodeIndex") ) )    
        .def( 
            "GetDampingConstantMutant"
            , (double ( ::AbstractOffLatticeCellPopulation<3, 3>::* )(  ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::GetDampingConstantMutant ) )    
        .def( 
            "GetDampingConstantNormal"
            , (double ( ::AbstractOffLatticeCellPopulation<3, 3>::* )(  ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::GetDampingConstantNormal ) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::OutputCellPopulationParameters)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetAbsoluteMovementThreshold"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( double ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::SetAbsoluteMovementThreshold )
            , ( bp::arg("absoluteMovementThreshold") ) )    
        .def( 
            "SetDampingConstantMutant"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( double ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::SetDampingConstantMutant )
            , ( bp::arg("dampingConstantMutant") ) )    
        .def( 
            "SetDampingConstantNormal"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( double ))( &::AbstractOffLatticeCellPopulation< 3, 3 >::SetDampingConstantNormal )
            , ( bp::arg("dampingConstantNormal") ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( unsigned int,::ChastePoint< 3 > & ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "UpdateNodeLocations"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( double ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( double ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateNodeLocations)
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetDefaultTimeStep"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep) ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int const & ))(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
            , (bool ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))(&::AbstractCellPopulation< 3, 3 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const & ))(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOffLatticeCellPopulation_less__3_comma__3__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper, bp::bases< AbstractOffLatticeCellPopulation< 3, 3 > >, boost::noncopyable >( "AbstractCentreBasedCellPopulation3_3", bp::no_init )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AddCell"
            , (::CellPtr ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::AddCell)
            , (::CellPtr ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AddCell)
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "CheckForStepSizeException"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_CheckForStepSizeException)
            , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) )    
        .def( 
            "CreateCellPair"
            , (::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::CreateCellPair )
            , ( bp::arg("pCell1"), bp::arg("pCell2") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , (double ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode)
            , (double ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::std::string &,bool,double ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCentreBasedDivisionRule"
            , (::boost::shared_ptr< AbstractCentreBasedDivisionRule< 3, 3 > > ( ::AbstractCentreBasedCellPopulation<3, 3>::* )(  ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::GetCentreBasedDivisionRule ) )    
        .def( 
            "GetDampingConstant"
            , (double ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant)
            , (double ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetDampingConstant)
            , ( bp::arg("nodeIndex") ) )    
        .def( 
            "GetDefaultTimeStep"
            , (double ( ::AbstractCentreBasedCellPopulation<3, 3>::* )(  ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep)
            , (double ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetDefaultTimeStep) )    
        .def( 
            "GetLocationOfCellCentre"
            , (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre)
            , (::boost::numeric::ublas::c_vector< double, 3 > ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetLocationOfCellCentre)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetMeinekeDivisionSeparation"
            , (double ( ::AbstractCentreBasedCellPopulation<3, 3>::* )(  ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::GetMeinekeDivisionSeparation ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , (::std::set< unsigned int > ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices)
            , (::std::set< unsigned int > ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetNeighbouringLocationIndices)
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , (bool ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsGhostNode"
            , (bool ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsGhostNode)
            , ( bp::arg("index") ) )    
        .def( 
            "IsMarkedSpring"
            , (bool ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > const & ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::IsMarkedSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "IsParticle"
            , (bool ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsParticle)
            , ( bp::arg("index") ) )    
        .def( 
            "MarkSpring"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > & ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::MarkSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCentreBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCentreBasedDivisionRule"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCentreBasedDivisionRule< 3, 3 > > ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::SetCentreBasedDivisionRule )
            , ( bp::arg("pCentreBasedDivisionRule") ) )    
        .def( 
            "SetMeinekeDivisionSeparation"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( double ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::SetMeinekeDivisionSeparation )
            , ( bp::arg("divisionSeparation") ) )    
        .def( 
            "UnmarkSpring"
            , (void ( ::AbstractCentreBasedCellPopulation<3, 3>::* )( ::std::pair< boost::shared_ptr< Cell >, boost::shared_ptr< Cell > > & ))( &::AbstractCentreBasedCellPopulation< 3, 3 >::UnmarkSpring )
            , ( bp::arg("rCellPair") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "AddNode"
            , bp::pure_virtual( (unsigned int ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( ::Node< 3 > * ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::AddNode) )
            , ( bp::arg("pNewNode") ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int const & ))(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
            , (bool ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( unsigned int,::ChastePoint< 3 > & ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))(&::AbstractCellPopulation< 3, 3 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "UpdateNodeLocations"
            , (void ( ::AbstractOffLatticeCellPopulation<3, 3>::* )( double ))(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( double ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateNodeLocations)
            , ( bp::arg("dt") ) )    
        .def( 
            "Validate"
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const & ))(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
            , (void ( AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractCentreBasedCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) );

    { //::AbstractForce< 2, 2 >
        typedef bp::class_< AbstractForce< 2, 2 >, bp::bases< Identifiable >, boost::noncopyable > AbstractForce_less__2_comma__2__greater__exposer_t;
        AbstractForce_less__2_comma__2__greater__exposer_t AbstractForce_less__2_comma__2__greater__exposer = AbstractForce_less__2_comma__2__greater__exposer_t( "AbstractForce_less__2_comma__2__greater_", bp::no_init );
        bp::scope AbstractForce_less__2_comma__2__greater__scope( AbstractForce_less__2_comma__2__greater__exposer );
        bp::register_ptr_to_python< boost::shared_ptr< AbstractForce<2, 2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractForce< 2, 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< NagaiHondaForce< 2 > >, boost::shared_ptr< AbstractForce< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractTwoBodyInteractionForce< 2, 2 > >, boost::shared_ptr< AbstractForce< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< GeneralisedLinearSpringForce< 2, 2 > >, boost::shared_ptr< AbstractForce< 2, 2 > > >();
    }

    { //::AbstractForce< 3, 3 >
        typedef bp::class_< AbstractForce< 3, 3 >, bp::bases< Identifiable >, boost::noncopyable > AbstractForce_less__3_comma__3__greater__exposer_t;
        AbstractForce_less__3_comma__3__greater__exposer_t AbstractForce_less__3_comma__3__greater__exposer = AbstractForce_less__3_comma__3__greater__exposer_t( "AbstractForce_less__3_comma__3__greater_", bp::no_init );
        bp::scope AbstractForce_less__3_comma__3__greater__scope( AbstractForce_less__3_comma__3__greater__exposer );
        bp::register_ptr_to_python< boost::shared_ptr< AbstractForce<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractForce< 3, 3 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< NagaiHondaForce< 3 > >, boost::shared_ptr< AbstractForce< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractTwoBodyInteractionForce< 3, 3 > >, boost::shared_ptr< AbstractForce< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< GeneralisedLinearSpringForce< 3, 3 > >, boost::shared_ptr< AbstractForce< 3, 3 > > >();
    }

    bp::class_< AbstractPdeModifier_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 2, 2 > >, boost::noncopyable >( "AbstractPdeModifier2", bp::no_init )    
        .def( 
            "GetBoundaryCondition"
            , (::boost::shared_ptr< AbstractBoundaryCondition< 2 > > ( ::AbstractPdeModifier<2>::* )(  ))( &::AbstractPdeModifier< 2 >::GetBoundaryCondition ) )    
        .def( 
            "GetOutputGradient"
            , (bool ( ::AbstractPdeModifier<2>::* )(  ))( &::AbstractPdeModifier< 2 >::GetOutputGradient ) )    
        .def( 
            "GetPde"
            , (::boost::shared_ptr< AbstractLinearPde< 2, 2 > > ( ::AbstractPdeModifier<2>::* )(  ))( &::AbstractPdeModifier< 2 >::GetPde ) )    
        .def( 
            "HasAveragedSourcePde"
            , (bool ( ::AbstractPdeModifier<2>::* )(  ))( &::AbstractPdeModifier< 2 >::HasAveragedSourcePde ) )    
        .def( 
            "IsNeumannBoundaryCondition"
            , (bool ( ::AbstractPdeModifier<2>::* )(  ))( &::AbstractPdeModifier< 2 >::IsNeumannBoundaryCondition ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractPdeModifier<2>::* )( ::out_stream & ))(&::AbstractPdeModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( AbstractPdeModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractPdeModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDependentVariableName"
            , (void ( ::AbstractPdeModifier<2>::* )( ::std::string const & ))( &::AbstractPdeModifier< 2 >::SetDependentVariableName )
            , ( bp::arg("rName") ) )    
        .def( 
            "SetOutputGradient"
            , (void ( ::AbstractPdeModifier<2>::* )( bool ))( &::AbstractPdeModifier< 2 >::SetOutputGradient )
            , ( bp::arg("outputGradient") ) )    
        .def( 
            "SetOutputSolutionAtPdeNodes"
            , (void ( ::AbstractPdeModifier<2>::* )( bool ))( &::AbstractPdeModifier< 2 >::SetOutputSolutionAtPdeNodes )
            , ( bp::arg("outputSolutionAtPdeNodes") ) )    
        .def( 
            "SetUpSourceTermsForAveragedSourcePde"
            , (void ( ::AbstractPdeModifier<2>::* )( ::TetrahedralMesh< 2, 2 > *,::std::map< boost::shared_ptr<Cell>, unsigned int > * ))( &::AbstractPdeModifier< 2 >::SetUpSourceTermsForAveragedSourcePde )
            , ( bp::arg("pMesh"), bp::arg("pCellPdeElementMap") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::AbstractPdeModifier< 2 >::SetupSolve)
            , (void ( AbstractPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&AbstractPdeModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfSolve)
            , (void ( AbstractPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , bp::pure_virtual( (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfTimeStep) )
            , ( bp::arg("rCellPopulation") ) )    

    bp::class_< AbstractGrowingDomainPdeModifier_less__2__greater__wrapper, bp::bases< AbstractPdeModifier< 2 > >, boost::noncopyable >( "AbstractGrowingDomainPdeModifier2", bp::no_init )    
        .def( 
            "GenerateFeMesh"
            , (void ( ::AbstractGrowingDomainPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))( &::AbstractGrowingDomainPdeModifier< 2 >::GenerateFeMesh )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractGrowingDomainPdeModifier<2>::* )( ::out_stream & ))(&::AbstractGrowingDomainPdeModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::AbstractGrowingDomainPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))( &::AbstractGrowingDomainPdeModifier< 2 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::AbstractPdeModifier< 2 >::SetupSolve)
            , (void ( AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfSolve)
            , (void ( AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep)
            , (void ( AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractGrowingDomainPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< AbstractPdeModifier_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 3, 3 > >, boost::noncopyable >( "AbstractPdeModifier3", bp::no_init )    
        .def( 
            "GetBoundaryCondition"
            , (::boost::shared_ptr< AbstractBoundaryCondition< 3 > > ( ::AbstractPdeModifier<3>::* )(  ))( &::AbstractPdeModifier< 3 >::GetBoundaryCondition ) )    
        .def( 
            "GetOutputGradient"
            , (bool ( ::AbstractPdeModifier<3>::* )(  ))( &::AbstractPdeModifier< 3 >::GetOutputGradient ) )    
        .def( 
            "GetPde"
            , (::boost::shared_ptr< AbstractLinearPde< 3, 3 > > ( ::AbstractPdeModifier<3>::* )(  ))( &::AbstractPdeModifier< 3 >::GetPde ) )    
        .def( 
            "HasAveragedSourcePde"
            , (bool ( ::AbstractPdeModifier<3>::* )(  ))( &::AbstractPdeModifier< 3 >::HasAveragedSourcePde ) )    
        .def( 
            "IsNeumannBoundaryCondition"
            , (bool ( ::AbstractPdeModifier<3>::* )(  ))( &::AbstractPdeModifier< 3 >::IsNeumannBoundaryCondition ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractPdeModifier<3>::* )( ::out_stream & ))(&::AbstractPdeModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( AbstractPdeModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractPdeModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDependentVariableName"
            , (void ( ::AbstractPdeModifier<3>::* )( ::std::string const & ))( &::AbstractPdeModifier< 3 >::SetDependentVariableName )
            , ( bp::arg("rName") ) )    
        .def( 
            "SetOutputGradient"
            , (void ( ::AbstractPdeModifier<3>::* )( bool ))( &::AbstractPdeModifier< 3 >::SetOutputGradient )
            , ( bp::arg("outputGradient") ) )    
        .def( 
            "SetOutputSolutionAtPdeNodes"
            , (void ( ::AbstractPdeModifier<3>::* )( bool ))( &::AbstractPdeModifier< 3 >::SetOutputSolutionAtPdeNodes )
            , ( bp::arg("outputSolutionAtPdeNodes") ) )    
        .def( 
            "SetUpSourceTermsForAveragedSourcePde"
            , (void ( ::AbstractPdeModifier<3>::* )( ::TetrahedralMesh< 3, 3 > *,::std::map< boost::shared_ptr<Cell>, unsigned int > * ))( &::AbstractPdeModifier< 3 >::SetUpSourceTermsForAveragedSourcePde )
            , ( bp::arg("pMesh"), bp::arg("pCellPdeElementMap") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::AbstractPdeModifier< 3 >::SetupSolve)
            , (void ( AbstractPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&AbstractPdeModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfSolve)
            , (void ( AbstractPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , bp::pure_virtual( (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfTimeStep) )
            , ( bp::arg("rCellPopulation") ) )    

    bp::class_< AbstractGrowingDomainPdeModifier_less__3__greater__wrapper, bp::bases< AbstractPdeModifier< 3 > >, boost::noncopyable >( "AbstractGrowingDomainPdeModifier3", bp::no_init )    
        .def( 
            "GenerateFeMesh"
            , (void ( ::AbstractGrowingDomainPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))( &::AbstractGrowingDomainPdeModifier< 3 >::GenerateFeMesh )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractGrowingDomainPdeModifier<3>::* )( ::out_stream & ))(&::AbstractGrowingDomainPdeModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::AbstractGrowingDomainPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))( &::AbstractGrowingDomainPdeModifier< 3 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::AbstractPdeModifier< 3 >::SetupSolve)
            , (void ( AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfSolve)
            , (void ( AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep)
            , (void ( AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractGrowingDomainPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< AbstractOnLatticeCellPopulation_less__2__greater__wrapper, bp::bases< AbstractCellPopulation< 2, 2 > >, boost::noncopyable >( "AbstractOnLatticeCellPopulation2", bp::no_init )    
        .def( 
            "AddUpdateRule"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<2>::* )( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ))(&::AbstractOnLatticeCellPopulation< 2 >::AddUpdateRule) )
            , ( bp::arg("pUpdateRule") ) )    
        .def( 
            "GetDefaultTimeStep"
            , (double ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))(&::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep)
            , (double ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) )    
        .def( 
            "GetIterateRandomlyOverUpdateRuleCollection"
            , (bool ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))( &::AbstractOnLatticeCellPopulation< 2 >::GetIterateRandomlyOverUpdateRuleCollection ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , (::std::set< unsigned int > ( ::AbstractOnLatticeCellPopulation<2>::* )( unsigned int ))(&::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices)
            , (::std::set< unsigned int > ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
            , ( bp::arg("index") ) )    
        .def( 
            "GetUpdateNodesInRandomOrder"
            , (bool ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))( &::AbstractOnLatticeCellPopulation< 2 >::GetUpdateNodesInRandomOrder ) )    
        .def( 
            "GetUpdateRuleCollection"
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( ::AbstractOnLatticeCellPopulation<2>::* )(  )const)(&::AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection)
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  )const)(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_GetUpdateRuleCollection) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( ::out_stream & ))(&::AbstractOnLatticeCellPopulation< 2 >::OutputCellPopulationParameters)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "RemoveAllUpdateRules"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))(&::AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_RemoveAllUpdateRules) )    
        .def( 
            "SetIterateRandomlyOverUpdateRuleCollection"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 2 >::SetIterateRandomlyOverUpdateRuleCollection )
            , ( bp::arg("iterateRandomly") ) )    
        .def( 
            "SetNode"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( unsigned int,::ChastePoint< 2 > & ))(&::AbstractOnLatticeCellPopulation< 2 >::SetNode)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int,::ChastePoint< 2 > & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_SetNode)
            , ( bp::arg("index"), bp::arg("rNewLocation") ) )    
        .def( 
            "SetUpdateNodesInRandomOrder"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 2 >::SetUpdateNodesInRandomOrder )
            , ( bp::arg("updateNodesInRandomOrder") ) )    
        .def( 
            "UpdateCellLocations"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<2>::* )( double ))(&::AbstractOnLatticeCellPopulation< 2 >::UpdateCellLocations) )
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int const & ))(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))(&::AbstractCellPopulation< 2, 2 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const & ))(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractOnLatticeCellPopulation_less__3__greater__wrapper, bp::bases< AbstractCellPopulation< 3, 3 > >, boost::noncopyable >( "AbstractOnLatticeCellPopulation3", bp::no_init )    
        .def( 
            "AddUpdateRule"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<3>::* )( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ))(&::AbstractOnLatticeCellPopulation< 3 >::AddUpdateRule) )
            , ( bp::arg("pUpdateRule") ) )    
        .def( 
            "GetDefaultTimeStep"
            , (double ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))(&::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep)
            , (double ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) )    
        .def( 
            "GetIterateRandomlyOverUpdateRuleCollection"
            , (bool ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))( &::AbstractOnLatticeCellPopulation< 3 >::GetIterateRandomlyOverUpdateRuleCollection ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , (::std::set< unsigned int > ( ::AbstractOnLatticeCellPopulation<3>::* )( unsigned int ))(&::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices)
            , (::std::set< unsigned int > ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
            , ( bp::arg("index") ) )    
        .def( 
            "GetUpdateNodesInRandomOrder"
            , (bool ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))( &::AbstractOnLatticeCellPopulation< 3 >::GetUpdateNodesInRandomOrder ) )    
        .def( 
            "GetUpdateRuleCollection"
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( ::AbstractOnLatticeCellPopulation<3>::* )(  )const)(&::AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection)
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  )const)(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetUpdateRuleCollection) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( ::out_stream & ))(&::AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "RemoveAllUpdateRules"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))(&::AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_RemoveAllUpdateRules) )    
        .def( 
            "SetIterateRandomlyOverUpdateRuleCollection"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 3 >::SetIterateRandomlyOverUpdateRuleCollection )
            , ( bp::arg("iterateRandomly") ) )    
        .def( 
            "SetNode"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( unsigned int,::ChastePoint< 3 > & ))(&::AbstractOnLatticeCellPopulation< 3 >::SetNode)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::ChastePoint< 3 > & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_SetNode)
            , ( bp::arg("index"), bp::arg("rNewLocation") ) )    
        .def( 
            "SetUpdateNodesInRandomOrder"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 3 >::SetUpdateNodesInRandomOrder )
            , ( bp::arg("updateNodesInRandomOrder") ) )    
        .def( 
            "UpdateCellLocations"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<3>::* )( double ))(&::AbstractOnLatticeCellPopulation< 3 >::UpdateCellLocations) )
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int const & ))(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))(&::AbstractCellPopulation< 3, 3 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const & ))(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractPhaseBasedCellCycleModel_wrapper, bp::bases< AbstractCellCycleModel >, boost::noncopyable >( "AbstractPhaseBasedCellCycleModel", bp::init< AbstractPhaseBasedCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetCurrentCellCyclePhase"
            , (::CellCyclePhase ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)( &::AbstractPhaseBasedCellCycleModel::GetCurrentCellCyclePhase ) )    
        .def( 
            "GetG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG1Duration)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetG1Duration) )    
        .def( 
            "GetG2Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG2Duration)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetG2Duration) )    
        .def( 
            "GetMDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetMDuration)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetMDuration) )    
        .def( 
            "GetMinimumGapDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)( &::AbstractPhaseBasedCellCycleModel::GetMinimumGapDuration ) )    
        .def( 
            "GetSDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetSDuration)
            , (double ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractPhaseBasedCellCycleModel_wrapper::default_GetSDuration) )    
        .def( 
            "GetSG2MDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)( &::AbstractPhaseBasedCellCycleModel::GetSG2MDuration ) )    
        .def( 
            "GetStemCellG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)( &::AbstractPhaseBasedCellCycleModel::GetStemCellG1Duration ) )    
        .def( 
            "GetTransitCellG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)( &::AbstractPhaseBasedCellCycleModel::GetTransitCellG1Duration ) )    
        .def( 
            "OutputCellCycleModelParameters"
            , bp::pure_virtual( (void ( ::AbstractPhaseBasedCellCycleModel::* )( ::out_stream & ))(&::AbstractPhaseBasedCellCycleModel::OutputCellCycleModelParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ReadyToDivide)
            , (bool ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ResetForDivision)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetG2Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))( &::AbstractPhaseBasedCellCycleModel::SetG2Duration )
            , ( bp::arg("g2Duration") ) )    
        .def( 
            "SetMDuration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))( &::AbstractPhaseBasedCellCycleModel::SetMDuration )
            , ( bp::arg("mDuration") ) )    
        .def( 
            "SetMinimumGapDuration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))( &::AbstractPhaseBasedCellCycleModel::SetMinimumGapDuration )
            , ( bp::arg("minimumGapDuration") ) )    
        .def( 
            "SetSDuration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))( &::AbstractPhaseBasedCellCycleModel::SetSDuration )
            , ( bp::arg("sDuration") ) )    
        .def( 
            "SetStemCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_SetStemCellG1Duration)
            , ( bp::arg("stemCellG1Duration") ) )    
        .def( 
            "SetTransitCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_SetTransitCellG1Duration)
            , ( bp::arg("transitCellG1Duration") ) )    
        .def( 
            "UpdateCellCyclePhase"
            , bp::pure_virtual( (void ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::UpdateCellCyclePhase) ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "CreateCellCycleModel"
            , bp::pure_virtual( (::AbstractCellCycleModel * ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CreateCellCycleModel) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "Initialise"
            , (void ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::Initialise)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::InitialiseDaughterCell)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( AbstractPhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractPhaseBasedCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) );

    bp::class_< AbstractPottsUpdateRule_less__2__greater__wrapper, bp::bases< AbstractUpdateRule< 2 > >, boost::noncopyable >( "AbstractPottsUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , bp::pure_virtual( (double ( ::AbstractPottsUpdateRule<2>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&::AbstractPottsUpdateRule< 2 >::EvaluateHamiltonianContribution) )
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AbstractPottsUpdateRule<2>::* )( ::out_stream & ))(&::AbstractPottsUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( AbstractPottsUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractPottsUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< AbstractPottsUpdateRule_less__3__greater__wrapper, bp::bases< AbstractUpdateRule< 3 > >, boost::noncopyable >( "AbstractPottsUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , bp::pure_virtual( (double ( ::AbstractPottsUpdateRule<3>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&::AbstractPottsUpdateRule< 3 >::EvaluateHamiltonianContribution) )
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AbstractPottsUpdateRule<3>::* )( ::out_stream & ))(&::AbstractPottsUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( AbstractPottsUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractPottsUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< AbstractSimpleCellCycleModel_wrapper, bp::bases< AbstractCellCycleModel >, boost::noncopyable >( "AbstractSimpleCellCycleModel", bp::init< AbstractSimpleCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "GetCellCycleDuration"
            , (double ( ::AbstractSimpleCellCycleModel::* )(  )const)( &::AbstractSimpleCellCycleModel::GetCellCycleDuration ) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::Initialise)
            , (void ( AbstractSimpleCellCycleModel_wrapper::* )(  ))(&AbstractSimpleCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::InitialiseDaughterCell)
            , (void ( AbstractSimpleCellCycleModel_wrapper::* )(  ))(&AbstractSimpleCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "OutputCellCycleModelParameters"
            , bp::pure_virtual( (void ( ::AbstractSimpleCellCycleModel::* )( ::out_stream & ))(&::AbstractSimpleCellCycleModel::OutputCellCycleModelParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::ReadyToDivide)
            , (bool ( AbstractSimpleCellCycleModel_wrapper::* )(  ))(&AbstractSimpleCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::ResetForDivision)
            , (void ( AbstractSimpleCellCycleModel_wrapper::* )(  ))(&AbstractSimpleCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetCellCycleDuration"
            , bp::pure_virtual( (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::SetCellCycleDuration) ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( AbstractSimpleCellCycleModel_wrapper::* )(  ))(&AbstractSimpleCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "CreateCellCycleModel"
            , bp::pure_virtual( (::AbstractCellCycleModel * ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CreateCellCycleModel) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , bp::pure_virtual( (double ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::GetAverageStemCellCycleTime) ) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , bp::pure_virtual( (double ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::GetAverageTransitCellCycleTime) ) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( AbstractSimpleCellCycleModel_wrapper::* )( double ))(&AbstractSimpleCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) );

    bp::class_< AbstractSimplePhaseBasedCellCycleModel_wrapper, bp::bases< AbstractPhaseBasedCellCycleModel >, boost::noncopyable >( "AbstractSimplePhaseBasedCellCycleModel", bp::init< AbstractSimplePhaseBasedCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::Initialise)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )( ::out_stream & ))(&::AbstractSimplePhaseBasedCellCycleModel::OutputCellCycleModelParameters)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )( ::out_stream & ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::ResetForDivision)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetG1Duration"
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_SetG1Duration) )    
        .def( 
            "UpdateCellCyclePhase"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_UpdateCellCyclePhase) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "CreateCellCycleModel"
            , bp::pure_virtual( (::AbstractCellCycleModel * ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CreateCellCycleModel) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG1Duration)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetG1Duration) )    
        .def( 
            "GetG2Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG2Duration)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetG2Duration) )    
        .def( 
            "GetMDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetMDuration)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetMDuration) )    
        .def( 
            "GetSDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetSDuration)
            , (double ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  )const)(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_GetSDuration) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ReadyToDivide)
            , (bool ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )(  ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) )    
        .def( 
            "SetStemCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_SetStemCellG1Duration)
            , ( bp::arg("stemCellG1Duration") ) )    
        .def( 
            "SetTransitCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration)
            , (void ( AbstractSimplePhaseBasedCellCycleModel_wrapper::* )( double ))(&AbstractSimplePhaseBasedCellCycleModel_wrapper::default_SetTransitCellG1Duration)
            , ( bp::arg("transitCellG1Duration") ) );

    bp::class_< AbstractSimpleGenerationalCellCycleModel_wrapper, bp::bases< AbstractSimplePhaseBasedCellCycleModel >, boost::noncopyable >( "AbstractSimpleGenerationalCellCycleModel", bp::init< AbstractSimpleGenerationalCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "GetGeneration"
            , (unsigned int ( ::AbstractSimpleGenerationalCellCycleModel::* )(  )const)( &::AbstractSimpleGenerationalCellCycleModel::GetGeneration ) )    
        .def( 
            "GetMaxTransitGenerations"
            , (unsigned int ( ::AbstractSimpleGenerationalCellCycleModel::* )(  )const)( &::AbstractSimpleGenerationalCellCycleModel::GetMaxTransitGenerations ) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )(  ))(&::AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )( ::out_stream & ))(&::AbstractSimpleGenerationalCellCycleModel::OutputCellCycleModelParameters)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )( ::out_stream & ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )(  ))(&::AbstractSimpleGenerationalCellCycleModel::ResetForDivision)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetGeneration"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )( unsigned int ))( &::AbstractSimpleGenerationalCellCycleModel::SetGeneration )
            , ( bp::arg("generation") ) )    
        .def( 
            "SetMaxTransitGenerations"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )( unsigned int ))( &::AbstractSimpleGenerationalCellCycleModel::SetMaxTransitGenerations )
            , ( bp::arg("maxTransitGenerations") ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "CreateCellCycleModel"
            , bp::pure_virtual( (::AbstractCellCycleModel * ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CreateCellCycleModel) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG1Duration)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  )const)(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetG1Duration) )    
        .def( 
            "GetG2Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG2Duration)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  )const)(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetG2Duration) )    
        .def( 
            "GetMDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetMDuration)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  )const)(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetMDuration) )    
        .def( 
            "GetSDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetSDuration)
            , (double ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  )const)(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_GetSDuration) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::Initialise)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ReadyToDivide)
            , (bool ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )( double ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) )    
        .def( 
            "SetG1Duration"
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_SetG1Duration) )    
        .def( 
            "SetStemCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )( double ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_SetStemCellG1Duration)
            , ( bp::arg("stemCellG1Duration") ) )    
        .def( 
            "SetTransitCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )( double ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_SetTransitCellG1Duration)
            , ( bp::arg("transitCellG1Duration") ) )    
        .def( 
            "UpdateCellCyclePhase"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase)
            , (void ( AbstractSimpleGenerationalCellCycleModel_wrapper::* )(  ))(&AbstractSimpleGenerationalCellCycleModel_wrapper::default_UpdateCellCyclePhase) );

    bp::class_< AbstractTargetAreaModifier_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 2, 2 > >, boost::noncopyable >( "AbstractTargetAreaModifier2", bp::init< >() )    
        .def( 
            "GetReferenceTargetArea"
            , (double ( ::AbstractTargetAreaModifier<2>::* )(  ))( &::AbstractTargetAreaModifier< 2 >::GetReferenceTargetArea ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::out_stream & ))(&::AbstractTargetAreaModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( AbstractTargetAreaModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractTargetAreaModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetReferenceTargetArea"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( double ))( &::AbstractTargetAreaModifier< 2 >::SetReferenceTargetArea )
            , ( bp::arg("referenceTargetArea") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::AbstractTargetAreaModifier< 2 >::SetupSolve)
            , (void ( AbstractTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&AbstractTargetAreaModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep)
            , (void ( AbstractTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateTargetAreaOfCell"
            , bp::pure_virtual( (void ( ::AbstractTargetAreaModifier<2>::* )( ::CellPtr const ))(&::AbstractTargetAreaModifier< 2 >::UpdateTargetAreaOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "UpdateTargetAreas"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))( &::AbstractTargetAreaModifier< 2 >::UpdateTargetAreas )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
            , (void ( AbstractTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< AbstractTargetAreaModifier_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 3, 3 > >, boost::noncopyable >( "AbstractTargetAreaModifier3", bp::init< >() )    
        .def( 
            "GetReferenceTargetArea"
            , (double ( ::AbstractTargetAreaModifier<3>::* )(  ))( &::AbstractTargetAreaModifier< 3 >::GetReferenceTargetArea ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::out_stream & ))(&::AbstractTargetAreaModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( AbstractTargetAreaModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractTargetAreaModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetReferenceTargetArea"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( double ))( &::AbstractTargetAreaModifier< 3 >::SetReferenceTargetArea )
            , ( bp::arg("referenceTargetArea") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::AbstractTargetAreaModifier< 3 >::SetupSolve)
            , (void ( AbstractTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&AbstractTargetAreaModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep)
            , (void ( AbstractTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateTargetAreaOfCell"
            , bp::pure_virtual( (void ( ::AbstractTargetAreaModifier<3>::* )( ::CellPtr const ))(&::AbstractTargetAreaModifier< 3 >::UpdateTargetAreaOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "UpdateTargetAreas"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))( &::AbstractTargetAreaModifier< 3 >::UpdateTargetAreas )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
            , (void ( AbstractTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper, bp::bases< AbstractForce< 2, 2 > >, boost::noncopyable >( "AbstractTwoBodyInteractionForce2_2", bp::init< >() )    
        .def( 
            "AddForceContribution"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution)
            , (void ( AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "CalculateForceBetweenNodes"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 2, 2 > & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::CalculateForceBetweenNodes) )
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetCutOffLength"
            , (double ( ::AbstractTwoBodyInteractionForce<2, 2>::* )(  ))( &::AbstractTwoBodyInteractionForce< 2, 2 >::GetCutOffLength ) )    
        .def( 
            "GetUseCutOffLength"
            , (bool ( ::AbstractTwoBodyInteractionForce<2, 2>::* )(  ))( &::AbstractTwoBodyInteractionForce< 2, 2 >::GetUseCutOffLength ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::OutputForceParameters)
            , (void ( AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCutOffLength"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( double ))( &::AbstractTwoBodyInteractionForce< 2, 2 >::SetCutOffLength )
            , ( bp::arg("cutOffLength") ) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractTwoBodyInteractionForce_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) );

    bp::class_< AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper, bp::bases< AbstractForce< 3, 3 > >, boost::noncopyable >( "AbstractTwoBodyInteractionForce3_3", bp::init< >() )    
        .def( 
            "AddForceContribution"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution)
            , (void ( AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "CalculateForceBetweenNodes"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 3, 3 > & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::CalculateForceBetweenNodes) )
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetCutOffLength"
            , (double ( ::AbstractTwoBodyInteractionForce<3, 3>::* )(  ))( &::AbstractTwoBodyInteractionForce< 3, 3 >::GetCutOffLength ) )    
        .def( 
            "GetUseCutOffLength"
            , (bool ( ::AbstractTwoBodyInteractionForce<3, 3>::* )(  ))( &::AbstractTwoBodyInteractionForce< 3, 3 >::GetUseCutOffLength ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::OutputForceParameters)
            , (void ( AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCutOffLength"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( double ))( &::AbstractTwoBodyInteractionForce< 3, 3 >::SetCutOffLength )
            , ( bp::arg("cutOffLength") ) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractTwoBodyInteractionForce_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) );

    bp::class_< AdhesionPottsUpdateRule_less__2__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 2 > > >( "AdhesionPottsUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&::AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution)
            , (double ( AdhesionPottsUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&AdhesionPottsUpdateRule_less__2__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetCellBoundaryAdhesionEnergy"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )( ::CellPtr ))(&::AdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy)
            , (double ( AdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::CellPtr ))(&AdhesionPottsUpdateRule_less__2__greater__wrapper::default_GetCellBoundaryAdhesionEnergy)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetCellBoundaryAdhesionEnergyParameter"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )(  ))( &::AdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetCellCellAdhesionEnergy"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )( ::CellPtr,::CellPtr ))(&::AdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy)
            , (double ( AdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&AdhesionPottsUpdateRule_less__2__greater__wrapper::default_GetCellCellAdhesionEnergy)
            , ( bp::arg("pCellA"), bp::arg("pCellB") ) )    
        .def( 
            "GetCellCellAdhesionEnergyParameter"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )(  ))( &::AdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergyParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AdhesionPottsUpdateRule<2>::* )( ::out_stream & ))(&::AdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( AdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&AdhesionPottsUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCellBoundaryAdhesionEnergyParameter"
            , (void ( ::AdhesionPottsUpdateRule<2>::* )( double ))( &::AdhesionPottsUpdateRule< 2 >::SetCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("cellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetCellCellAdhesionEnergyParameter"
            , (void ( ::AdhesionPottsUpdateRule<2>::* )( double ))( &::AdhesionPottsUpdateRule< 2 >::SetCellCellAdhesionEnergyParameter )
            , ( bp::arg("cellCellAdhesionEnergyEnergyParameter") ) );

    bp::class_< AdhesionPottsUpdateRule_less__3__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 3 > > >( "AdhesionPottsUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&::AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution)
            , (double ( AdhesionPottsUpdateRule_less__3__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&AdhesionPottsUpdateRule_less__3__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetCellBoundaryAdhesionEnergy"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )( ::CellPtr ))(&::AdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy)
            , (double ( AdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::CellPtr ))(&AdhesionPottsUpdateRule_less__3__greater__wrapper::default_GetCellBoundaryAdhesionEnergy)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetCellBoundaryAdhesionEnergyParameter"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )(  ))( &::AdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetCellCellAdhesionEnergy"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )( ::CellPtr,::CellPtr ))(&::AdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy)
            , (double ( AdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&AdhesionPottsUpdateRule_less__3__greater__wrapper::default_GetCellCellAdhesionEnergy)
            , ( bp::arg("pCellA"), bp::arg("pCellB") ) )    
        .def( 
            "GetCellCellAdhesionEnergyParameter"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )(  ))( &::AdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergyParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AdhesionPottsUpdateRule<3>::* )( ::out_stream & ))(&::AdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( AdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&AdhesionPottsUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCellBoundaryAdhesionEnergyParameter"
            , (void ( ::AdhesionPottsUpdateRule<3>::* )( double ))( &::AdhesionPottsUpdateRule< 3 >::SetCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("cellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetCellCellAdhesionEnergyParameter"
            , (void ( ::AdhesionPottsUpdateRule<3>::* )( double ))( &::AdhesionPottsUpdateRule< 3 >::SetCellCellAdhesionEnergyParameter )
            , ( bp::arg("cellCellAdhesionEnergyEnergyParameter") ) );

    bp::class_< ApcOneHitCellMutationState, bp::bases< AbstractCellMutationState > >( "ApcOneHitCellMutationState", bp::init< >() );

    bp::class_< ApcTwoHitCellMutationState, bp::bases< AbstractCellMutationState > >( "ApcTwoHitCellMutationState", bp::init< >() );

    { //::ApoptoticCellKiller< 2 >
        typedef bp::class_< ApoptoticCellKiller_less__2__greater__wrapper, bp::bases< AbstractCellKiller< 2 > > > ApoptoticCellKiller2_exposer_t;
        ApoptoticCellKiller2_exposer_t ApoptoticCellKiller2_exposer = ApoptoticCellKiller2_exposer_t( "ApoptoticCellKiller2", bp::init< AbstractCellPopulation< 2, 2 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope ApoptoticCellKiller2_scope( ApoptoticCellKiller2_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 2, 2 > *, ApoptoticCellKiller< 2 > >();
        { //::ApoptoticCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath
        
            typedef ApoptoticCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            typedef void ( ApoptoticCellKiller_less__2__greater__wrapper::*default_CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            
            ApoptoticCellKiller2_exposer.def( 
                "CheckAndLabelCellsForApoptosisOrDeath"
                , CheckAndLabelCellsForApoptosisOrDeath_function_type(&::ApoptoticCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath)
                , default_CheckAndLabelCellsForApoptosisOrDeath_function_type(&ApoptoticCellKiller_less__2__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) );
        
        }
        { //::ApoptoticCellKiller< 2 >::CheckAndLabelSingleCellForApoptosis
        
            typedef ApoptoticCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelSingleCellForApoptosis_function_type)( ::CellPtr ) ;
            
            ApoptoticCellKiller2_exposer.def( 
                "CheckAndLabelSingleCellForApoptosis"
                , CheckAndLabelSingleCellForApoptosis_function_type( &::ApoptoticCellKiller< 2 >::CheckAndLabelSingleCellForApoptosis )
                , ( bp::arg("pCell") ) );
        
        }
        { //::ApoptoticCellKiller< 2 >::OutputCellKillerParameters
        
            typedef ApoptoticCellKiller< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            typedef void ( ApoptoticCellKiller_less__2__greater__wrapper::*default_OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            
            ApoptoticCellKiller2_exposer.def( 
                "OutputCellKillerParameters"
                , OutputCellKillerParameters_function_type(&::ApoptoticCellKiller< 2 >::OutputCellKillerParameters)
                , default_OutputCellKillerParameters_function_type(&ApoptoticCellKiller_less__2__greater__wrapper::default_OutputCellKillerParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
    }

    { //::ApoptoticCellKiller< 3 >
        typedef bp::class_< ApoptoticCellKiller_less__3__greater__wrapper, bp::bases< AbstractCellKiller< 3 > > > ApoptoticCellKiller3_exposer_t;
        ApoptoticCellKiller3_exposer_t ApoptoticCellKiller3_exposer = ApoptoticCellKiller3_exposer_t( "ApoptoticCellKiller3", bp::init< AbstractCellPopulation< 3, 3 > * >(( bp::arg("pCellPopulation") )) );
        bp::scope ApoptoticCellKiller3_scope( ApoptoticCellKiller3_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 3, 3 > *, ApoptoticCellKiller< 3 > >();
        { //::ApoptoticCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath
        
            typedef ApoptoticCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            typedef void ( ApoptoticCellKiller_less__3__greater__wrapper::*default_CheckAndLabelCellsForApoptosisOrDeath_function_type)(  ) ;
            
            ApoptoticCellKiller3_exposer.def( 
                "CheckAndLabelCellsForApoptosisOrDeath"
                , CheckAndLabelCellsForApoptosisOrDeath_function_type(&::ApoptoticCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath)
                , default_CheckAndLabelCellsForApoptosisOrDeath_function_type(&ApoptoticCellKiller_less__3__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) );
        
        }
        { //::ApoptoticCellKiller< 3 >::CheckAndLabelSingleCellForApoptosis
        
            typedef ApoptoticCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckAndLabelSingleCellForApoptosis_function_type)( ::CellPtr ) ;
            
            ApoptoticCellKiller3_exposer.def( 
                "CheckAndLabelSingleCellForApoptosis"
                , CheckAndLabelSingleCellForApoptosis_function_type( &::ApoptoticCellKiller< 3 >::CheckAndLabelSingleCellForApoptosis )
                , ( bp::arg("pCell") ) );
        
        }
        { //::ApoptoticCellKiller< 3 >::OutputCellKillerParameters
        
            typedef ApoptoticCellKiller< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            typedef void ( ApoptoticCellKiller_less__3__greater__wrapper::*default_OutputCellKillerParameters_function_type)( ::out_stream & ) ;
            
            ApoptoticCellKiller3_exposer.def( 
                "OutputCellKillerParameters"
                , OutputCellKillerParameters_function_type(&::ApoptoticCellKiller< 3 >::OutputCellKillerParameters)
                , default_OutputCellKillerParameters_function_type(&ApoptoticCellKiller_less__3__greater__wrapper::default_OutputCellKillerParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
    }

    bp::class_< BetaCateninOneHitCellMutationState, bp::bases< AbstractCellMutationState > >( "BetaCateninOneHitCellMutationState", bp::init< >() );

    { //::CaBasedCellPopulation< 2 >
        typedef bp::class_< CaBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 2 > >, boost::noncopyable > CaBasedCellPopulation2_exposer_t;
        CaBasedCellPopulation2_exposer_t CaBasedCellPopulation2_exposer = CaBasedCellPopulation2_exposer_t( "CaBasedCellPopulation2", bp::init< PottsMesh< 2 > &, std::vector< boost::shared_ptr<Cell> > &, std::vector< unsigned int >, bp::optional< unsigned int, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("latticeCarryingCapacity")=(unsigned int)(1U), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(false) )) );
        bp::scope CaBasedCellPopulation2_scope( CaBasedCellPopulation2_exposer );
        CaBasedCellPopulation2_exposer.def( bp::init< PottsMesh< 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 2 > &, CaBasedCellPopulation< 2 > >();
        { //::CaBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::CaBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddUpdateRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::CaBasedCellPopulation< 2 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "EvaluateDivisionPropensity"
                , EvaluateDivisionPropensity_function_type(&::CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity)
                , default_EvaluateDivisionPropensity_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_EvaluateDivisionPropensity)
                , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractCaBasedDivisionRule< 2 > > ( exported_class_t::*GetCaBasedDivisionRule_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCaBasedDivisionRule"
                , GetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 2 >::GetCaBasedDivisionRule ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetLocationOfCellCentre
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::CaBasedCellPopulation< 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetNumNodes
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::CaBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetUpdateRuleCollection
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::CaBasedCellPopulation< 2 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::CaBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetWidth
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::CaBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsRoomToDivide
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::CaBasedCellPopulation< 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsSiteAvailable
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsSiteAvailable"
                , IsSiteAvailable_function_type(&::CaBasedCellPopulation< 2 >::IsSiteAvailable)
                , default_IsSiteAvailable_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsSiteAvailable)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::OpenWritersFiles
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::CaBasedCellPopulation< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::CaBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveAllUpdateRules
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::CaBasedCellPopulation< 2 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::CaBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::CaBasedCellPopulation< 2 >::SetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCaBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractCaBasedDivisionRule< 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "SetCaBasedDivisionRule"
                , SetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 2 >::SetCaBasedDivisionRule )
                , ( bp::arg("pCaBasedDivisionRule") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::Update
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::CaBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::UpdateCellLocations
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::CaBasedCellPopulation< 2 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::SetNode
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 2 >::SetNode)
                , default_SetNode_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::CaBasedCellPopulation< 3 >
        typedef bp::class_< CaBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 3 > >, boost::noncopyable > CaBasedCellPopulation3_exposer_t;
        CaBasedCellPopulation3_exposer_t CaBasedCellPopulation3_exposer = CaBasedCellPopulation3_exposer_t( "CaBasedCellPopulation3", bp::init< PottsMesh< 3 > &, std::vector< boost::shared_ptr<Cell> > &, std::vector< unsigned int >, bp::optional< unsigned int, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("latticeCarryingCapacity")=(unsigned int)(1U), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(false) )) );
        bp::scope CaBasedCellPopulation3_scope( CaBasedCellPopulation3_exposer );
        CaBasedCellPopulation3_exposer.def( bp::init< PottsMesh< 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 3 > &, CaBasedCellPopulation< 3 > >();
        { //::CaBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::CaBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddUpdateRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::CaBasedCellPopulation< 3 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "EvaluateDivisionPropensity"
                , EvaluateDivisionPropensity_function_type(&::CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity)
                , default_EvaluateDivisionPropensity_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_EvaluateDivisionPropensity)
                , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractCaBasedDivisionRule< 3 > > ( exported_class_t::*GetCaBasedDivisionRule_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCaBasedDivisionRule"
                , GetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 3 >::GetCaBasedDivisionRule ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetLocationOfCellCentre
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::CaBasedCellPopulation< 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetNumNodes
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::CaBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetUpdateRuleCollection
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::CaBasedCellPopulation< 3 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::CaBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetWidth
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::CaBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsRoomToDivide
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::CaBasedCellPopulation< 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsSiteAvailable
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsSiteAvailable"
                , IsSiteAvailable_function_type(&::CaBasedCellPopulation< 3 >::IsSiteAvailable)
                , default_IsSiteAvailable_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsSiteAvailable)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::OpenWritersFiles
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::CaBasedCellPopulation< 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::CaBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveAllUpdateRules
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::CaBasedCellPopulation< 3 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::CaBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::CaBasedCellPopulation< 3 >::SetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCaBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractCaBasedDivisionRule< 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SetCaBasedDivisionRule"
                , SetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 3 >::SetCaBasedDivisionRule )
                , ( bp::arg("pCaBasedDivisionRule") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::Update
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::CaBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::UpdateCellLocations
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::CaBasedCellPopulation< 3 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::SetNode
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    bp::class_< CellPropertyCollection >( "CellPropertyCollection", bp::init< >() )    
        .def( 
            "AddProperty"
            , (void ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & ))( &::CellPropertyCollection::AddProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "Begin"
            , (::CellPropertyCollection::Iterator ( ::CellPropertyCollection::* )(  ))( &::CellPropertyCollection::Begin ) )    
        .def( 
            "End"
            , (::CellPropertyCollection::Iterator ( ::CellPropertyCollection::* )(  ))( &::CellPropertyCollection::End ) )    
        .def( 
            "GetProperty"
            , (::boost::shared_ptr< AbstractCellProperty > ( ::CellPropertyCollection::* )(  )const)( &::CellPropertyCollection::GetProperty ) )    
        .def( 
            "GetSize"
            , (unsigned int ( ::CellPropertyCollection::* )(  )const)( &::CellPropertyCollection::GetSize ) )    
        .def( 
            "HasProperty"
            , (bool ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & )const)( &::CellPropertyCollection::HasProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "RemoveProperty"
            , (void ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & ))( &::CellPropertyCollection::RemoveProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "SetCellPropertyRegistry"
            , (void ( ::CellPropertyCollection::* )( ::CellPropertyRegistry * ))( &::CellPropertyCollection::SetCellPropertyRegistry )
            , ( bp::arg("pRegistry") ) );

    { //::Cell
        typedef bp::class_< Cell, boost::shared_ptr< Cell >, boost::noncopyable > Cell_exposer_t;
        Cell_exposer_t Cell_exposer = Cell_exposer_t( "Cell", bp::init< boost::shared_ptr< AbstractCellProperty >, AbstractCellCycleModel *, bp::optional< AbstractSrnModel *, bool, CellPropertyCollection > >(( bp::arg("pMutationState"), bp::arg("pCellCycleModel"), bp::arg("pSrnModel")=__null, bp::arg("archiving")=(bool)(false), bp::arg("cellPropertyCollection")=::CellPropertyCollection( ) )) );
        bp::scope Cell_scope( Cell_exposer );
        { //::Cell::AddCellProperty
        
            typedef void ( ::Cell::*AddCellProperty_function_type)( ::boost::shared_ptr< AbstractCellProperty > const & ) ;
            
            Cell_exposer.def( 
                "AddCellProperty"
                , AddCellProperty_function_type( &::Cell::AddCellProperty )
                , ( bp::arg("rProperty") ) );
        
        }
        { //::Cell::Divide
        
            typedef ::CellPtr ( ::Cell::*Divide_function_type)(  ) ;
            
            Cell_exposer.def( 
                "Divide"
                , Divide_function_type( &::Cell::Divide ) );
        
        }
        { //::Cell::GetAge
        
            typedef double ( ::Cell::*GetAge_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetAge"
                , GetAge_function_type( &::Cell::GetAge ) );
        
        }
        { //::Cell::GetAncestor
        
            typedef unsigned int ( ::Cell::*GetAncestor_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetAncestor"
                , GetAncestor_function_type( &::Cell::GetAncestor ) );
        
        }
        { //::Cell::GetApoptosisTime
        
            typedef double ( ::Cell::*GetApoptosisTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetApoptosisTime"
                , GetApoptosisTime_function_type( &::Cell::GetApoptosisTime ) );
        
        }
        { //::Cell::GetBirthTime
        
            typedef double ( ::Cell::*GetBirthTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetBirthTime"
                , GetBirthTime_function_type( &::Cell::GetBirthTime ) );
        
        }
        { //::Cell::GetCellCycleModel
        
            typedef ::AbstractCellCycleModel * ( ::Cell::*GetCellCycleModel_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellCycleModel"
                , GetCellCycleModel_function_type( &::Cell::GetCellCycleModel )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::Cell::GetCellData
        
            typedef ::boost::shared_ptr< CellData > ( ::Cell::*GetCellData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellData"
                , GetCellData_function_type( &::Cell::GetCellData ) );
        
        }
        { //::Cell::GetCellId
        
            typedef unsigned int ( ::Cell::*GetCellId_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellId"
                , GetCellId_function_type( &::Cell::GetCellId ) );
        
        }
        { //::Cell::GetCellProliferativeType
        
            typedef ::boost::shared_ptr< AbstractCellProliferativeType > ( ::Cell::*GetCellProliferativeType_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellProliferativeType"
                , GetCellProliferativeType_function_type( &::Cell::GetCellProliferativeType ) );
        
        }
        { //::Cell::GetCellVecData
        
            typedef ::boost::shared_ptr< CellVecData > ( ::Cell::*GetCellVecData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellVecData"
                , GetCellVecData_function_type( &::Cell::GetCellVecData ) );
        
        }
        { //::Cell::GetMutationState
        
            typedef ::boost::shared_ptr< AbstractCellMutationState > ( ::Cell::*GetMutationState_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetMutationState"
                , GetMutationState_function_type( &::Cell::GetMutationState ) );
        
        }
        { //::Cell::GetStartOfApoptosisTime
        
            typedef double ( ::Cell::*GetStartOfApoptosisTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetStartOfApoptosisTime"
                , GetStartOfApoptosisTime_function_type( &::Cell::GetStartOfApoptosisTime ) );
        
        }
        { //::Cell::GetTimeUntilDeath
        
            typedef double ( ::Cell::*GetTimeUntilDeath_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetTimeUntilDeath"
                , GetTimeUntilDeath_function_type( &::Cell::GetTimeUntilDeath ) );
        
        }
        { //::Cell::HasApoptosisBegun
        
            typedef bool ( ::Cell::*HasApoptosisBegun_function_type)(  ) const;
            
            Cell_exposer.def( 
                "HasApoptosisBegun"
                , HasApoptosisBegun_function_type( &::Cell::HasApoptosisBegun ) );
        
        }
        { //::Cell::HasCellVecData
        
            typedef bool ( ::Cell::*HasCellVecData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "HasCellVecData"
                , HasCellVecData_function_type( &::Cell::HasCellVecData ) );
        
        }
        { //::Cell::InitialiseCellCycleModel
        
            typedef void ( ::Cell::*InitialiseCellCycleModel_function_type)(  ) ;
            
            Cell_exposer.def( 
                "InitialiseCellCycleModel"
                , InitialiseCellCycleModel_function_type( &::Cell::InitialiseCellCycleModel ) );
        
        }
        { //::Cell::InitialiseSrnModel
        
            typedef void ( ::Cell::*InitialiseSrnModel_function_type)(  ) ;
            
            Cell_exposer.def( 
                "InitialiseSrnModel"
                , InitialiseSrnModel_function_type( &::Cell::InitialiseSrnModel ) );
        
        }
        { //::Cell::IsDead
        
            typedef bool ( ::Cell::*IsDead_function_type)(  ) ;
            
            Cell_exposer.def( 
                "IsDead"
                , IsDead_function_type( &::Cell::IsDead ) );
        
        }
        { //::Cell::IsLogged
        
            typedef bool ( ::Cell::*IsLogged_function_type)(  ) ;
            
            Cell_exposer.def( 
                "IsLogged"
                , IsLogged_function_type( &::Cell::IsLogged ) );
        
        }
        { //::Cell::Kill
        
            typedef void ( ::Cell::*Kill_function_type)(  ) ;
            
            Cell_exposer.def( 
                "Kill"
                , Kill_function_type( &::Cell::Kill ) );
        
        }
        { //::Cell::ReadyToDivide
        
            typedef bool ( ::Cell::*ReadyToDivide_function_type)(  ) ;
            
            Cell_exposer.def( 
                "ReadyToDivide"
                , ReadyToDivide_function_type( &::Cell::ReadyToDivide ) );
        
        }
        { //::Cell::SetAncestor
        
            typedef void ( ::Cell::*SetAncestor_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetAncestor"
                , SetAncestor_function_type( &::Cell::SetAncestor )
                , ( bp::arg("pCellAncestor") ) );
        
        }
        { //::Cell::SetApoptosisTime
        
            typedef void ( ::Cell::*SetApoptosisTime_function_type)( double ) ;
            
            Cell_exposer.def( 
                "SetApoptosisTime"
                , SetApoptosisTime_function_type( &::Cell::SetApoptosisTime )
                , ( bp::arg("apoptosisTime") ) );
        
        }
        { //::Cell::SetBirthTime
        
            typedef void ( ::Cell::*SetBirthTime_function_type)( double ) ;
            
            Cell_exposer.def( 
                "SetBirthTime"
                , SetBirthTime_function_type( &::Cell::SetBirthTime )
                , ( bp::arg("birthTime") ) );
        
        }
        { //::Cell::SetCellCycleModel
        
            typedef void ( ::Cell::*SetCellCycleModel_function_type)( ::AbstractCellCycleModel * ) ;
            
            Cell_exposer.def( 
                "SetCellCycleModel"
                , SetCellCycleModel_function_type( &::Cell::SetCellCycleModel )
                , ( bp::arg("pCellCycleModel") ) );
        
        }
        { //::Cell::SetCellProliferativeType
        
            typedef void ( ::Cell::*SetCellProliferativeType_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetCellProliferativeType"
                , SetCellProliferativeType_function_type( &::Cell::SetCellProliferativeType )
                , ( bp::arg("pProliferativeType") ) );
        
        }
        { //::Cell::SetLogged
        
            typedef void ( ::Cell::*SetLogged_function_type)(  ) ;
            
            Cell_exposer.def( 
                "SetLogged"
                , SetLogged_function_type( &::Cell::SetLogged ) );
        
        }
        { //::Cell::SetMutationState
        
            typedef void ( ::Cell::*SetMutationState_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetMutationState"
                , SetMutationState_function_type( &::Cell::SetMutationState )
                , ( bp::arg("pMutationState") ) );
        
        }
        { //::Cell::SetSrnModel
        
            typedef void ( ::Cell::*SetSrnModel_function_type)( ::AbstractSrnModel * ) ;
            
            Cell_exposer.def( 
                "SetSrnModel"
                , SetSrnModel_function_type( &::Cell::SetSrnModel )
                , ( bp::arg("pSrnModel") ) );
        
        }
        { //::Cell::StartApoptosis
        
            typedef void ( ::Cell::*StartApoptosis_function_type)( bool ) ;
            
            Cell_exposer.def( 
                "StartApoptosis"
                , StartApoptosis_function_type( &::Cell::StartApoptosis )
                , ( bp::arg("setDeathTime")=(bool)(true) ) );
        
        }
        bp::implicitly_convertible< boost::shared_ptr< Cell >, boost::shared_ptr< boost::enable_shared_from_this< Cell > > >();
    }

    { //::CellAncestor
        typedef bp::class_< CellAncestor, bp::bases< AbstractCellProperty > > CellAncestor_exposer_t;
        CellAncestor_exposer_t CellAncestor_exposer = CellAncestor_exposer_t( "CellAncestor", bp::init< bp::optional< unsigned int > >(( bp::arg("ancestor")=(unsigned int)(UNSIGNED_UNSET) )) );
        bp::scope CellAncestor_scope( CellAncestor_exposer );
        bp::implicitly_convertible< unsigned int, CellAncestor >();
        { //::CellAncestor::GetAncestor
        
            typedef unsigned int ( ::CellAncestor::*GetAncestor_function_type)(  ) const;
            
            CellAncestor_exposer.def( 
                "GetAncestor"
                , GetAncestor_function_type( &::CellAncestor::GetAncestor ) );
        
        }
    }

    bp::class_< CellId, bp::bases< AbstractCellProperty > >( "CellId", bp::init< >() )    
        .def( 
            "AssignCellId"
            , (void ( ::CellId::* )(  ))( &::CellId::AssignCellId ) )    
        .def( 
            "GetCellId"
            , (unsigned int ( ::CellId::* )(  )const)( &::CellId::GetCellId ) )    
        .def( 
            "GetMaxCellId"
            , (unsigned int ( ::CellId::* )(  )const)( &::CellId::GetMaxCellId ) )    
        .def( 
            "ResetMaxCellId"
            , (void (*)(  ))( &::CellId::ResetMaxCellId ) )    
        .staticmethod( "ResetMaxCellId" );

    { //::CellLabel
        typedef bp::class_< CellLabel, bp::bases< AbstractCellProperty > > CellLabel_exposer_t;
        CellLabel_exposer_t CellLabel_exposer = CellLabel_exposer_t( "CellLabel", bp::init< bp::optional< unsigned int > >(( bp::arg("colour")=(unsigned int)(5) )) );
        bp::scope CellLabel_scope( CellLabel_exposer );
        bp::implicitly_convertible< unsigned int, CellLabel >();
        { //::CellLabel::GetColour
        
            typedef unsigned int ( ::CellLabel::*GetColour_function_type)(  ) const;
            
            CellLabel_exposer.def( 
                "GetColour"
                , GetColour_function_type( &::CellLabel::GetColour ) );
        
        }
    }

    { //::CellPropertyRegistry
        typedef bp::class_< CellPropertyRegistry, boost::noncopyable > CellPropertyRegistry_exposer_t;
        CellPropertyRegistry_exposer_t CellPropertyRegistry_exposer = CellPropertyRegistry_exposer_t( "CellPropertyRegistry", bp::no_init );
        bp::scope CellPropertyRegistry_scope( CellPropertyRegistry_exposer );
        { //::CellPropertyRegistry::Clear
        
            typedef void ( ::CellPropertyRegistry::*Clear_function_type)(  ) ;
            
            CellPropertyRegistry_exposer.def( 
                "Clear"
                , Clear_function_type( &::CellPropertyRegistry::Clear ) );
        
        }
        { //::CellPropertyRegistry::HasOrderingBeenSpecified
        
            typedef bool ( ::CellPropertyRegistry::*HasOrderingBeenSpecified_function_type)(  ) ;
            
            CellPropertyRegistry_exposer.def( 
                "HasOrderingBeenSpecified"
                , HasOrderingBeenSpecified_function_type( &::CellPropertyRegistry::HasOrderingBeenSpecified ) );
        
        }
        { //::CellPropertyRegistry::Instance
        
            typedef ::CellPropertyRegistry * ( *Instance_function_type )(  );
            
            CellPropertyRegistry_exposer.def( 
                "Instance"
                , Instance_function_type( &::CellPropertyRegistry::Instance )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::CellPropertyRegistry::SpecifyOrdering
        
            typedef void ( ::CellPropertyRegistry::*SpecifyOrdering_function_type)( ::std::vector< boost::shared_ptr<AbstractCellProperty> > const & ) ;
            
            CellPropertyRegistry_exposer.def( 
                "SpecifyOrdering"
                , SpecifyOrdering_function_type( &::CellPropertyRegistry::SpecifyOrdering )
                , ( bp::arg("rOrdering") ) );
        
        }
        CellPropertyRegistry_exposer.staticmethod( "Instance" );
        bp::register_ptr_to_python< boost::shared_ptr< CellPropertyRegistry > >();
    }

    bp::class_< CellsGenerator< SimpleOxygenBasedCellCycleModel, 2 > >( "CellsGeneratorSimpleOxygenBasedCellCycleModel_2" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 2 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 2 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 2 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< CellsGenerator< SimpleOxygenBasedCellCycleModel, 3 > >( "CellsGeneratorSimpleOxygenBasedCellCycleModel_3" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 3 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 3 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<SimpleOxygenBasedCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< SimpleOxygenBasedCellCycleModel, 3 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< CellsGenerator< UniformCellCycleModel, 2 > >( "CellsGeneratorUniformCellCycleModel_2" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< CellsGenerator< UniformCellCycleModel, 3 > >( "CellsGeneratorUniformCellCycleModel_3" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 3 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 3 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 3 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< CellsGenerator< UniformG1GenerationalCellCycleModel, 2 > >( "CellsGeneratorUniformG1GenerationalCellCycleModel_2" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 2 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 2 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 2 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< CellsGenerator< UniformG1GenerationalCellCycleModel, 3 > >( "CellsGeneratorUniformG1GenerationalCellCycleModel_3" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 3 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 3 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<UniformG1GenerationalCellCycleModel, 3>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformG1GenerationalCellCycleModel, 3 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    { //::CellwiseSourceEllipticPde< 2 >
        typedef bp::class_< CellwiseSourceEllipticPde_less__2__greater__wrapper, boost::noncopyable > CellwiseSourceEllipticPde2_exposer_t;
        CellwiseSourceEllipticPde2_exposer_t CellwiseSourceEllipticPde2_exposer = CellwiseSourceEllipticPde2_exposer_t( "CellwiseSourceEllipticPde2", bp::init< AbstractCellPopulation< 2, 2 > &, bp::optional< double > >(( bp::arg("rCellPopulation"), bp::arg("sourceCoefficient") )) );
        bp::scope CellwiseSourceEllipticPde2_scope( CellwiseSourceEllipticPde2_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 2, 2 > &, CellwiseSourceEllipticPde< 2 > >();
        { //::CellwiseSourceEllipticPde< 2 >::ComputeConstantInUSourceTerm
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeConstantInUSourceTerm_function_type)( ::ChastePoint< 2 > const &,::Element< 2, 2 > * ) ;
            typedef double ( CellwiseSourceEllipticPde_less__2__greater__wrapper::*default_ComputeConstantInUSourceTerm_function_type)( ::ChastePoint< 2 > const &,::Element< 2, 2 > * ) ;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "ComputeConstantInUSourceTerm"
                , ComputeConstantInUSourceTerm_function_type(&::CellwiseSourceEllipticPde< 2 >::ComputeConstantInUSourceTerm)
                , default_ComputeConstantInUSourceTerm_function_type(&CellwiseSourceEllipticPde_less__2__greater__wrapper::default_ComputeConstantInUSourceTerm)
                , ( bp::arg("rX"), bp::arg("pElement") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 2 >::ComputeDiffusionTerm
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( exported_class_t::*ComputeDiffusionTerm_function_type)( ::ChastePoint< 2 > const & ) ;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( CellwiseSourceEllipticPde_less__2__greater__wrapper::*default_ComputeDiffusionTerm_function_type)( ::ChastePoint< 2 > const & ) ;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "ComputeDiffusionTerm"
                , ComputeDiffusionTerm_function_type(&::CellwiseSourceEllipticPde< 2 >::ComputeDiffusionTerm)
                , default_ComputeDiffusionTerm_function_type(&CellwiseSourceEllipticPde_less__2__greater__wrapper::default_ComputeDiffusionTerm)
                , ( bp::arg("rX") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTerm
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeLinearInUCoeffInSourceTerm_function_type)( ::ChastePoint< 2 > const &,::Element< 2, 2 > * ) ;
            typedef double ( CellwiseSourceEllipticPde_less__2__greater__wrapper::*default_ComputeLinearInUCoeffInSourceTerm_function_type)( ::ChastePoint< 2 > const &,::Element< 2, 2 > * ) ;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "ComputeLinearInUCoeffInSourceTerm"
                , ComputeLinearInUCoeffInSourceTerm_function_type(&::CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTerm)
                , default_ComputeLinearInUCoeffInSourceTerm_function_type(&CellwiseSourceEllipticPde_less__2__greater__wrapper::default_ComputeLinearInUCoeffInSourceTerm)
                , ( bp::arg("rX"), bp::arg("pElement") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTermAtNode
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeLinearInUCoeffInSourceTermAtNode_function_type)( ::Node< 2 > const & ) ;
            typedef double ( CellwiseSourceEllipticPde_less__2__greater__wrapper::*default_ComputeLinearInUCoeffInSourceTermAtNode_function_type)( ::Node< 2 > const & ) ;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "ComputeLinearInUCoeffInSourceTermAtNode"
                , ComputeLinearInUCoeffInSourceTermAtNode_function_type(&::CellwiseSourceEllipticPde< 2 >::ComputeLinearInUCoeffInSourceTermAtNode)
                , default_ComputeLinearInUCoeffInSourceTermAtNode_function_type(&CellwiseSourceEllipticPde_less__2__greater__wrapper::default_ComputeLinearInUCoeffInSourceTermAtNode)
                , ( bp::arg("rNode") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 2 >::GetCoefficient
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCoefficient_function_type)(  ) const;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "GetCoefficient"
                , GetCoefficient_function_type( &::CellwiseSourceEllipticPde< 2 >::GetCoefficient ) );
        
        }
        { //::CellwiseSourceEllipticPde< 2 >::rGetCellPopulation
        
            typedef CellwiseSourceEllipticPde< 2 > exported_class_t;
            typedef ::AbstractCellPopulation< 2, 2 > const & ( exported_class_t::*rGetCellPopulation_function_type)(  ) const;
            
            CellwiseSourceEllipticPde2_exposer.def( 
                "rGetCellPopulation"
                , rGetCellPopulation_function_type( &::CellwiseSourceEllipticPde< 2 >::rGetCellPopulation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
    }

    { //::CellwiseSourceEllipticPde< 3 >
        typedef bp::class_< CellwiseSourceEllipticPde_less__3__greater__wrapper, boost::noncopyable > CellwiseSourceEllipticPde3_exposer_t;
        CellwiseSourceEllipticPde3_exposer_t CellwiseSourceEllipticPde3_exposer = CellwiseSourceEllipticPde3_exposer_t( "CellwiseSourceEllipticPde3", bp::init< AbstractCellPopulation< 3, 3 > &, bp::optional< double > >(( bp::arg("rCellPopulation"), bp::arg("sourceCoefficient") )) );
        bp::scope CellwiseSourceEllipticPde3_scope( CellwiseSourceEllipticPde3_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 3, 3 > &, CellwiseSourceEllipticPde< 3 > >();
        { //::CellwiseSourceEllipticPde< 3 >::ComputeConstantInUSourceTerm
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef double ( exported_class_t::*ComputeConstantInUSourceTerm_function_type)( ::ChastePoint< 3 > const &,::Element< 3, 3 > * ) ;
            typedef double ( CellwiseSourceEllipticPde_less__3__greater__wrapper::*default_ComputeConstantInUSourceTerm_function_type)( ::ChastePoint< 3 > const &,::Element< 3, 3 > * ) ;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "ComputeConstantInUSourceTerm"
                , ComputeConstantInUSourceTerm_function_type(&::CellwiseSourceEllipticPde< 3 >::ComputeConstantInUSourceTerm)
                , default_ComputeConstantInUSourceTerm_function_type(&CellwiseSourceEllipticPde_less__3__greater__wrapper::default_ComputeConstantInUSourceTerm)
                , ( bp::arg("rX"), bp::arg("pElement") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 3 >::ComputeDiffusionTerm
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_matrix< double, 3, 3 > ( exported_class_t::*ComputeDiffusionTerm_function_type)( ::ChastePoint< 3 > const & ) ;
            typedef ::boost::numeric::ublas::c_matrix< double, 3, 3 > ( CellwiseSourceEllipticPde_less__3__greater__wrapper::*default_ComputeDiffusionTerm_function_type)( ::ChastePoint< 3 > const & ) ;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "ComputeDiffusionTerm"
                , ComputeDiffusionTerm_function_type(&::CellwiseSourceEllipticPde< 3 >::ComputeDiffusionTerm)
                , default_ComputeDiffusionTerm_function_type(&CellwiseSourceEllipticPde_less__3__greater__wrapper::default_ComputeDiffusionTerm)
                , ( bp::arg("rX") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTerm
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef double ( exported_class_t::*ComputeLinearInUCoeffInSourceTerm_function_type)( ::ChastePoint< 3 > const &,::Element< 3, 3 > * ) ;
            typedef double ( CellwiseSourceEllipticPde_less__3__greater__wrapper::*default_ComputeLinearInUCoeffInSourceTerm_function_type)( ::ChastePoint< 3 > const &,::Element< 3, 3 > * ) ;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "ComputeLinearInUCoeffInSourceTerm"
                , ComputeLinearInUCoeffInSourceTerm_function_type(&::CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTerm)
                , default_ComputeLinearInUCoeffInSourceTerm_function_type(&CellwiseSourceEllipticPde_less__3__greater__wrapper::default_ComputeLinearInUCoeffInSourceTerm)
                , ( bp::arg("rX"), bp::arg("pElement") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTermAtNode
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef double ( exported_class_t::*ComputeLinearInUCoeffInSourceTermAtNode_function_type)( ::Node< 3 > const & ) ;
            typedef double ( CellwiseSourceEllipticPde_less__3__greater__wrapper::*default_ComputeLinearInUCoeffInSourceTermAtNode_function_type)( ::Node< 3 > const & ) ;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "ComputeLinearInUCoeffInSourceTermAtNode"
                , ComputeLinearInUCoeffInSourceTermAtNode_function_type(&::CellwiseSourceEllipticPde< 3 >::ComputeLinearInUCoeffInSourceTermAtNode)
                , default_ComputeLinearInUCoeffInSourceTermAtNode_function_type(&CellwiseSourceEllipticPde_less__3__greater__wrapper::default_ComputeLinearInUCoeffInSourceTermAtNode)
                , ( bp::arg("rNode") ) );
        
        }
        { //::CellwiseSourceEllipticPde< 3 >::GetCoefficient
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCoefficient_function_type)(  ) const;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "GetCoefficient"
                , GetCoefficient_function_type( &::CellwiseSourceEllipticPde< 3 >::GetCoefficient ) );
        
        }
        { //::CellwiseSourceEllipticPde< 3 >::rGetCellPopulation
        
            typedef CellwiseSourceEllipticPde< 3 > exported_class_t;
            typedef ::AbstractCellPopulation< 3, 3 > const & ( exported_class_t::*rGetCellPopulation_function_type)(  ) const;
            
            CellwiseSourceEllipticPde3_exposer.def( 
                "rGetCellPopulation"
                , rGetCellPopulation_function_type( &::CellwiseSourceEllipticPde< 3 >::rGetCellPopulation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
    }

    bp::class_< DefaultCellProliferativeType, bp::bases< AbstractCellProliferativeType > >( "DefaultCellProliferativeType", bp::init< >() );

    bp::class_< DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper, bp::bases< AdhesionPottsUpdateRule< 2 > > >( "DifferentialAdhesionPottsUpdateRule2", bp::init< >() )    
        .def( 
            "GetCellBoundaryAdhesionEnergy"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( ::CellPtr ))(&::DifferentialAdhesionPottsUpdateRule< 2 >::GetCellBoundaryAdhesionEnergy)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::CellPtr ))(&DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::default_GetCellBoundaryAdhesionEnergy)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetCellCellAdhesionEnergy"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( ::CellPtr,::CellPtr ))(&::DifferentialAdhesionPottsUpdateRule< 2 >::GetCellCellAdhesionEnergy)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::default_GetCellCellAdhesionEnergy)
            , ( bp::arg("pCellA"), bp::arg("pCellB") ) )    
        .def( 
            "GetLabelledCellBoundaryAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<2>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::GetLabelledCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetLabelledCellCellAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<2>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::GetLabelledCellCellAdhesionEnergyParameter ) )    
        .def( 
            "GetLabelledCellLabelledCellAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<2>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::GetLabelledCellLabelledCellAdhesionEnergyParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( ::out_stream & ))(&::DifferentialAdhesionPottsUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetLabelledCellBoundaryAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::SetLabelledCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("labelledCellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetLabelledCellCellAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::SetLabelledCellCellAdhesionEnergyParameter )
            , ( bp::arg("labelledCellCellAdhesionEnergyParameter") ) )    
        .def( 
            "SetLabelledCellLabelledCellAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<2>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 2 >::SetLabelledCellLabelledCellAdhesionEnergyParameter )
            , ( bp::arg("labelledCellLabelledCellAdhesionEnergyParameter") ) )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::AdhesionPottsUpdateRule<2>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&::AdhesionPottsUpdateRule< 2 >::EvaluateHamiltonianContribution)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&DifferentialAdhesionPottsUpdateRule_less__2__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) );

    bp::class_< DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper, bp::bases< AdhesionPottsUpdateRule< 3 > > >( "DifferentialAdhesionPottsUpdateRule3", bp::init< >() )    
        .def( 
            "GetCellBoundaryAdhesionEnergy"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( ::CellPtr ))(&::DifferentialAdhesionPottsUpdateRule< 3 >::GetCellBoundaryAdhesionEnergy)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::CellPtr ))(&DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::default_GetCellBoundaryAdhesionEnergy)
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetCellCellAdhesionEnergy"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( ::CellPtr,::CellPtr ))(&::DifferentialAdhesionPottsUpdateRule< 3 >::GetCellCellAdhesionEnergy)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::CellPtr,::CellPtr ))(&DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::default_GetCellCellAdhesionEnergy)
            , ( bp::arg("pCellA"), bp::arg("pCellB") ) )    
        .def( 
            "GetLabelledCellBoundaryAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<3>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::GetLabelledCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetLabelledCellCellAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<3>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::GetLabelledCellCellAdhesionEnergyParameter ) )    
        .def( 
            "GetLabelledCellLabelledCellAdhesionEnergyParameter"
            , (double ( ::DifferentialAdhesionPottsUpdateRule<3>::* )(  ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::GetLabelledCellLabelledCellAdhesionEnergyParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( ::out_stream & ))(&::DifferentialAdhesionPottsUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetLabelledCellBoundaryAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::SetLabelledCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("labelledCellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetLabelledCellCellAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::SetLabelledCellCellAdhesionEnergyParameter )
            , ( bp::arg("labelledCellCellAdhesionEnergyParameter") ) )    
        .def( 
            "SetLabelledCellLabelledCellAdhesionEnergyParameter"
            , (void ( ::DifferentialAdhesionPottsUpdateRule<3>::* )( double ))( &::DifferentialAdhesionPottsUpdateRule< 3 >::SetLabelledCellLabelledCellAdhesionEnergyParameter )
            , ( bp::arg("labelledCellLabelledCellAdhesionEnergyParameter") ) )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::AdhesionPottsUpdateRule<3>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&::AdhesionPottsUpdateRule< 3 >::EvaluateHamiltonianContribution)
            , (double ( DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&DifferentialAdhesionPottsUpdateRule_less__3__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) );

    bp::class_< DifferentiatedCellProliferativeType, bp::bases< AbstractCellProliferativeType > >( "DifferentiatedCellProliferativeType", bp::init< >() );

    bp::class_< DiffusionCaUpdateRule_less__2__greater__wrapper, bp::bases< AbstractCaUpdateRule< 2 > > >( "DiffusionCaUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , (double ( ::DiffusionCaUpdateRule<2>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&::DiffusionCaUpdateRule< 2 >::EvaluateProbability)
            , (double ( DiffusionCaUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&DiffusionCaUpdateRule_less__2__greater__wrapper::default_EvaluateProbability)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "GetDiffusionParameter"
            , (double ( ::DiffusionCaUpdateRule<2>::* )(  ))( &::DiffusionCaUpdateRule< 2 >::GetDiffusionParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::DiffusionCaUpdateRule<2>::* )( ::out_stream & ))(&::DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( DiffusionCaUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&DiffusionCaUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDiffusionParameter"
            , (void ( ::DiffusionCaUpdateRule<2>::* )( double ))( &::DiffusionCaUpdateRule< 2 >::SetDiffusionParameter )
            , ( bp::arg("diffusionParameter") ) );

    bp::class_< DiffusionCaUpdateRule_less__3__greater__wrapper, bp::bases< AbstractCaUpdateRule< 3 > > >( "DiffusionCaUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , (double ( ::DiffusionCaUpdateRule<3>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 3 > &,double,double,::CellPtr ))(&::DiffusionCaUpdateRule< 3 >::EvaluateProbability)
            , (double ( DiffusionCaUpdateRule_less__3__greater__wrapper::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 3 > &,double,double,::CellPtr ))(&DiffusionCaUpdateRule_less__3__greater__wrapper::default_EvaluateProbability)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "GetDiffusionParameter"
            , (double ( ::DiffusionCaUpdateRule<3>::* )(  ))( &::DiffusionCaUpdateRule< 3 >::GetDiffusionParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::DiffusionCaUpdateRule<3>::* )( ::out_stream & ))(&::DiffusionCaUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( DiffusionCaUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&DiffusionCaUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDiffusionParameter"
            , (void ( ::DiffusionCaUpdateRule<3>::* )( double ))( &::DiffusionCaUpdateRule< 3 >::SetDiffusionParameter )
            , ( bp::arg("diffusionParameter") ) );

    bp::class_< EllipticGrowingDomainPdeModifier_less__2__greater__wrapper, bp::bases< AbstractGrowingDomainPdeModifier< 2 > >, boost::noncopyable >( "type", bp::no_init )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( EllipticGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&EllipticGrowingDomainPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractPdeModifier< 2 >::UpdateAtEndOfSolve)
            , (void ( EllipticGrowingDomainPdeModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&EllipticGrowingDomainPdeModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< EllipticGrowingDomainPdeModifier_less__3__greater__wrapper, bp::bases< AbstractGrowingDomainPdeModifier< 3 > >, boost::noncopyable >( "type", bp::no_init )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( EllipticGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&EllipticGrowingDomainPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractPdeModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractPdeModifier< 3 >::UpdateAtEndOfSolve)
            , (void ( EllipticGrowingDomainPdeModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&EllipticGrowingDomainPdeModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper, bp::bases< AbstractTwoBodyInteractionForce< 2, 2 > > >( "GeneralisedLinearSpringForce2_2", bp::init< >() )    
        .def( 
            "CalculateForceBetweenNodes"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::GeneralisedLinearSpringForce<2, 2>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 2, 2 > & ))(&::GeneralisedLinearSpringForce< 2, 2 >::CalculateForceBetweenNodes)
            , (::boost::numeric::ublas::c_vector< double, 2 > ( GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::* )( unsigned int,unsigned int,::AbstractCellPopulation< 2, 2 > & ))(&GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::default_CalculateForceBetweenNodes)
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetMeinekeDivisionRestingSpringLength"
            , (double ( ::GeneralisedLinearSpringForce<2, 2>::* )(  ))( &::GeneralisedLinearSpringForce< 2, 2 >::GetMeinekeDivisionRestingSpringLength ) )    
        .def( 
            "GetMeinekeSpringGrowthDuration"
            , (double ( ::GeneralisedLinearSpringForce<2, 2>::* )(  ))( &::GeneralisedLinearSpringForce< 2, 2 >::GetMeinekeSpringGrowthDuration ) )    
        .def( 
            "GetMeinekeSpringStiffness"
            , (double ( ::GeneralisedLinearSpringForce<2, 2>::* )(  ))( &::GeneralisedLinearSpringForce< 2, 2 >::GetMeinekeSpringStiffness ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::GeneralisedLinearSpringForce<2, 2>::* )( ::out_stream & ))(&::GeneralisedLinearSpringForce< 2, 2 >::OutputForceParameters)
            , (void ( GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetMeinekeDivisionRestingSpringLength"
            , (void ( ::GeneralisedLinearSpringForce<2, 2>::* )( double ))( &::GeneralisedLinearSpringForce< 2, 2 >::SetMeinekeDivisionRestingSpringLength )
            , ( bp::arg("divisionRestingSpringLength") ) )    
        .def( 
            "SetMeinekeSpringGrowthDuration"
            , (void ( ::GeneralisedLinearSpringForce<2, 2>::* )( double ))( &::GeneralisedLinearSpringForce< 2, 2 >::SetMeinekeSpringGrowthDuration )
            , ( bp::arg("springGrowthDuration") ) )    
        .def( 
            "SetMeinekeSpringStiffness"
            , (void ( ::GeneralisedLinearSpringForce<2, 2>::* )( double ))( &::GeneralisedLinearSpringForce< 2, 2 >::SetMeinekeSpringStiffness )
            , ( bp::arg("springStiffness") ) )    
        .def( 
            "VariableSpringConstantMultiplicationFactor"
            , (double ( ::GeneralisedLinearSpringForce<2, 2>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 2, 2 > &,bool ))(&::GeneralisedLinearSpringForce< 2, 2 >::VariableSpringConstantMultiplicationFactor)
            , (double ( GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::* )( unsigned int,unsigned int,::AbstractCellPopulation< 2, 2 > &,bool ))(&GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::default_VariableSpringConstantMultiplicationFactor)
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation"), bp::arg("isCloserThanRestLength") ) )    
        .def( 
            "AddForceContribution"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::AddForceContribution)
            , (void ( GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractTwoBodyInteractionForce<2, 2>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&GeneralisedLinearSpringForce_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) );

    bp::class_< GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper, bp::bases< AbstractTwoBodyInteractionForce< 3, 3 > > >( "GeneralisedLinearSpringForce3_3", bp::init< >() )    
        .def( 
            "CalculateForceBetweenNodes"
            , (::boost::numeric::ublas::c_vector< double, 3 > ( ::GeneralisedLinearSpringForce<3, 3>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 3, 3 > & ))(&::GeneralisedLinearSpringForce< 3, 3 >::CalculateForceBetweenNodes)
            , (::boost::numeric::ublas::c_vector< double, 3 > ( GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::* )( unsigned int,unsigned int,::AbstractCellPopulation< 3, 3 > & ))(&GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::default_CalculateForceBetweenNodes)
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetMeinekeDivisionRestingSpringLength"
            , (double ( ::GeneralisedLinearSpringForce<3, 3>::* )(  ))( &::GeneralisedLinearSpringForce< 3, 3 >::GetMeinekeDivisionRestingSpringLength ) )    
        .def( 
            "GetMeinekeSpringGrowthDuration"
            , (double ( ::GeneralisedLinearSpringForce<3, 3>::* )(  ))( &::GeneralisedLinearSpringForce< 3, 3 >::GetMeinekeSpringGrowthDuration ) )    
        .def( 
            "GetMeinekeSpringStiffness"
            , (double ( ::GeneralisedLinearSpringForce<3, 3>::* )(  ))( &::GeneralisedLinearSpringForce< 3, 3 >::GetMeinekeSpringStiffness ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::GeneralisedLinearSpringForce<3, 3>::* )( ::out_stream & ))(&::GeneralisedLinearSpringForce< 3, 3 >::OutputForceParameters)
            , (void ( GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetMeinekeDivisionRestingSpringLength"
            , (void ( ::GeneralisedLinearSpringForce<3, 3>::* )( double ))( &::GeneralisedLinearSpringForce< 3, 3 >::SetMeinekeDivisionRestingSpringLength )
            , ( bp::arg("divisionRestingSpringLength") ) )    
        .def( 
            "SetMeinekeSpringGrowthDuration"
            , (void ( ::GeneralisedLinearSpringForce<3, 3>::* )( double ))( &::GeneralisedLinearSpringForce< 3, 3 >::SetMeinekeSpringGrowthDuration )
            , ( bp::arg("springGrowthDuration") ) )    
        .def( 
            "SetMeinekeSpringStiffness"
            , (void ( ::GeneralisedLinearSpringForce<3, 3>::* )( double ))( &::GeneralisedLinearSpringForce< 3, 3 >::SetMeinekeSpringStiffness )
            , ( bp::arg("springStiffness") ) )    
        .def( 
            "VariableSpringConstantMultiplicationFactor"
            , (double ( ::GeneralisedLinearSpringForce<3, 3>::* )( unsigned int,unsigned int,::AbstractCellPopulation< 3, 3 > &,bool ))(&::GeneralisedLinearSpringForce< 3, 3 >::VariableSpringConstantMultiplicationFactor)
            , (double ( GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::* )( unsigned int,unsigned int,::AbstractCellPopulation< 3, 3 > &,bool ))(&GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::default_VariableSpringConstantMultiplicationFactor)
            , ( bp::arg("nodeAGlobalIndex"), bp::arg("nodeBGlobalIndex"), bp::arg("rCellPopulation"), bp::arg("isCloserThanRestLength") ) )    
        .def( 
            "AddForceContribution"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::AddForceContribution)
            , (void ( GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractTwoBodyInteractionForce<3, 3>::* )( ::out_stream & ))(&::AbstractTwoBodyInteractionForce< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&GeneralisedLinearSpringForce_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) );

    { //::MeshBasedCellPopulation< 2, 2 >
        typedef bp::class_< MeshBasedCellPopulation_less__2_comma__2__greater__wrapper, bp::bases< AbstractCentreBasedCellPopulation< 2, 2 > >, boost::noncopyable > MeshBasedCellPopulation2_2_exposer_t;
        MeshBasedCellPopulation2_2_exposer_t MeshBasedCellPopulation2_2_exposer = MeshBasedCellPopulation2_2_exposer_t( "MeshBasedCellPopulation2_2", bp::init< MutableMesh< 2, 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true) )) );
        bp::scope MeshBasedCellPopulation2_2_scope( MeshBasedCellPopulation2_2_exposer );
        bp::class_< MeshBasedCellPopulation< 2, 2 >::SpringIterator, boost::noncopyable >( "SpringIterator", bp::init< MeshBasedCellPopulation< 2, 2 > &, TetrahedralMesh< 2, 2 >::EdgeIterator >(( bp::arg("rCellPopulation"), bp::arg("edgeIter") )) )    
            .def( 
                "GetCellA"
                , (::CellPtr ( ::MeshBasedCellPopulation<2, 2>::SpringIterator::* )(  ))( &::MeshBasedCellPopulation< 2, 2 >::SpringIterator::GetCellA ) )    
            .def( 
                "GetCellB"
                , (::CellPtr ( ::MeshBasedCellPopulation<2, 2>::SpringIterator::* )(  ))( &::MeshBasedCellPopulation< 2, 2 >::SpringIterator::GetCellB ) )    
            .def( bp::self != bp::self );
        MeshBasedCellPopulation2_2_exposer.def( bp::init< MutableMesh< 2, 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< MutableMesh< 2, 2 > &, MeshBasedCellPopulation< 2, 2 > >();
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AddCell
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::MeshBasedCellPopulation< 2, 2 >::AddCell)
                , default_AddCell_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AddNode
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 2 > * ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AddNode_function_type)( ::Node< 2 > * ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::MeshBasedCellPopulation< 2, 2 >::AddNode)
                , default_AddNode_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::CalculateRestLengths
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*CalculateRestLengths_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "CalculateRestLengths"
                , CalculateRestLengths_function_type( &::MeshBasedCellPopulation< 2, 2 >::CalculateRestLengths ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::CheckCellPointers
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckCellPointers_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "CheckCellPointers"
                , CheckCellPointers_function_type( &::MeshBasedCellPopulation< 2, 2 >::CheckCellPointers ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::CreateVoronoiTessellation
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*CreateVoronoiTessellation_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "CreateVoronoiTessellation"
                , CreateVoronoiTessellation_function_type( &::MeshBasedCellPopulation< 2, 2 >::CreateVoronoiTessellation ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::DivideLongSprings
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*DivideLongSprings_function_type)( double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "DivideLongSprings"
                , DivideLongSprings_function_type( &::MeshBasedCellPopulation< 2, 2 >::DivideLongSprings )
                , ( bp::arg("springDivisionThreshold") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetAreaBasedDampingConstantParameter
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetAreaBasedDampingConstantParameter_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetAreaBasedDampingConstantParameter"
                , GetAreaBasedDampingConstantParameter_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetAreaBasedDampingConstantParameter ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetDampingConstant
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetNumNodes
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetOutputMeshInVtk
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputMeshInVtk_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetOutputMeshInVtk"
                , GetOutputMeshInVtk_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetOutputMeshInVtk ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetRestLength
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetRestLength_function_type)( unsigned int,unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetRestLength"
                , GetRestLength_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetRestLength )
                , ( bp::arg("indexA"), bp::arg("indexB") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetSurfaceAreaOfVoronoiElement
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetSurfaceAreaOfVoronoiElement_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetSurfaceAreaOfVoronoiElement"
                , GetSurfaceAreaOfVoronoiElement_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetSurfaceAreaOfVoronoiElement )
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfVoronoiElement
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfVoronoiElement_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetVolumeOfVoronoiElement"
                , GetVolumeOfVoronoiElement_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfVoronoiElement )
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetVoronoiEdgeLength
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVoronoiEdgeLength_function_type)( unsigned int,unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetVoronoiEdgeLength"
                , GetVoronoiEdgeLength_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetVoronoiEdgeLength )
                , ( bp::arg("index1"), bp::arg("index2") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetWidth
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetWidth)
                , default_GetWidth_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetWriteVtkAsPoints
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*GetWriteVtkAsPoints_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetWriteVtkAsPoints"
                , GetWriteVtkAsPoints_function_type( &::MeshBasedCellPopulation< 2, 2 >::GetWriteVtkAsPoints ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::OpenWritersFiles
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::MeshBasedCellPopulation< 2, 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::MeshBasedCellPopulation< 2, 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetAreaBasedDampingConstant
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetAreaBasedDampingConstant_function_type)( bool ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetAreaBasedDampingConstant"
                , SetAreaBasedDampingConstant_function_type( &::MeshBasedCellPopulation< 2, 2 >::SetAreaBasedDampingConstant )
                , ( bp::arg("useAreaBasedDampingConstant") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetAreaBasedDampingConstantParameter
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetAreaBasedDampingConstantParameter_function_type)( double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetAreaBasedDampingConstantParameter"
                , SetAreaBasedDampingConstantParameter_function_type( &::MeshBasedCellPopulation< 2, 2 >::SetAreaBasedDampingConstantParameter )
                , ( bp::arg("areaBasedDampingConstantParameter") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetNode
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::MeshBasedCellPopulation< 2, 2 >::SetNode)
                , default_SetNode_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetOutputMeshInVtk
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputMeshInVtk_function_type)( bool ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetOutputMeshInVtk"
                , SetOutputMeshInVtk_function_type( &::MeshBasedCellPopulation< 2, 2 >::SetOutputMeshInVtk )
                , ( bp::arg("outputMeshInVtk") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetRestLength
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRestLength_function_type)( unsigned int,unsigned int,double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetRestLength"
                , SetRestLength_function_type( &::MeshBasedCellPopulation< 2, 2 >::SetRestLength )
                , ( bp::arg("indexA"), bp::arg("indexB"), bp::arg("restLength") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetWriteVtkAsPoints
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetWriteVtkAsPoints_function_type)( bool ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SetWriteVtkAsPoints"
                , SetWriteVtkAsPoints_function_type( &::MeshBasedCellPopulation< 2, 2 >::SetWriteVtkAsPoints )
                , ( bp::arg("writeVtkAsPoints") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SpringsBegin
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::MeshBasedCellPopulation< 2, 2 >::SpringIterator ( exported_class_t::*SpringsBegin_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SpringsBegin"
                , SpringsBegin_function_type( &::MeshBasedCellPopulation< 2, 2 >::SpringsBegin ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SpringsEnd
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::MeshBasedCellPopulation< 2, 2 >::SpringIterator ( exported_class_t::*SpringsEnd_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SpringsEnd"
                , SpringsEnd_function_type( &::MeshBasedCellPopulation< 2, 2 >::SpringsEnd ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::TessellateIfNeeded
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*TessellateIfNeeded_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "TessellateIfNeeded"
                , TessellateIfNeeded_function_type( &::MeshBasedCellPopulation< 2, 2 >::TessellateIfNeeded ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::Update
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "Update"
                , Update_function_type(&::MeshBasedCellPopulation< 2, 2 >::Update)
                , default_Update_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::UpdateGhostNodesAfterReMesh
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "UpdateGhostNodesAfterReMesh"
                , UpdateGhostNodesAfterReMesh_function_type( &MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateGhostNodesAfterReMesh )
                , ( bp::arg("rMap") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::UseAreaBasedDampingConstant
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*UseAreaBasedDampingConstant_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "UseAreaBasedDampingConstant"
                , UseAreaBasedDampingConstant_function_type( &::MeshBasedCellPopulation< 2, 2 >::UseAreaBasedDampingConstant ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::Validate
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*Validate_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "Validate"
                , Validate_function_type( &MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_Validate ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::WriteVtkResultsToFile
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type(&::MeshBasedCellPopulation< 2, 2 >::WriteVtkResultsToFile)
                , default_WriteVtkResultsToFile_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_WriteVtkResultsToFile)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode)
                , default_IsGhostNode_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle)
                , default_IsParticle_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations
        
            typedef MeshBasedCellPopulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            MeshBasedCellPopulation2_2_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&MeshBasedCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        MeshBasedCellPopulation2_2_exposer.def("AddPopulationWriterVoronoiDataWriter", &MeshBasedCellPopulation<2,2>::AddPopulationWriter<VoronoiDataWriter>);
    }

    { //::MeshBasedCellPopulation< 3, 3 >
        typedef bp::class_< MeshBasedCellPopulation_less__3_comma__3__greater__wrapper, bp::bases< AbstractCentreBasedCellPopulation< 3, 3 > >, boost::noncopyable > MeshBasedCellPopulation3_3_exposer_t;
        MeshBasedCellPopulation3_3_exposer_t MeshBasedCellPopulation3_3_exposer = MeshBasedCellPopulation3_3_exposer_t( "MeshBasedCellPopulation3_3", bp::init< MutableMesh< 3, 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true) )) );
        bp::scope MeshBasedCellPopulation3_3_scope( MeshBasedCellPopulation3_3_exposer );
        bp::class_< MeshBasedCellPopulation< 3, 3 >::SpringIterator, boost::noncopyable >( "SpringIterator", bp::init< MeshBasedCellPopulation< 3, 3 > &, TetrahedralMesh< 3, 3 >::EdgeIterator >(( bp::arg("rCellPopulation"), bp::arg("edgeIter") )) )    
            .def( 
                "GetCellA"
                , (::CellPtr ( ::MeshBasedCellPopulation<3, 3>::SpringIterator::* )(  ))( &::MeshBasedCellPopulation< 3, 3 >::SpringIterator::GetCellA ) )    
            .def( 
                "GetCellB"
                , (::CellPtr ( ::MeshBasedCellPopulation<3, 3>::SpringIterator::* )(  ))( &::MeshBasedCellPopulation< 3, 3 >::SpringIterator::GetCellB ) )    
            .def( bp::self != bp::self );
        MeshBasedCellPopulation3_3_exposer.def( bp::init< MutableMesh< 3, 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< MutableMesh< 3, 3 > &, MeshBasedCellPopulation< 3, 3 > >();
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AddCell
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::MeshBasedCellPopulation< 3, 3 >::AddCell)
                , default_AddCell_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AddNode
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 3 > * ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AddNode_function_type)( ::Node< 3 > * ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::MeshBasedCellPopulation< 3, 3 >::AddNode)
                , default_AddNode_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::CalculateRestLengths
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CalculateRestLengths_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "CalculateRestLengths"
                , CalculateRestLengths_function_type( &::MeshBasedCellPopulation< 3, 3 >::CalculateRestLengths ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::CheckCellPointers
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckCellPointers_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "CheckCellPointers"
                , CheckCellPointers_function_type( &::MeshBasedCellPopulation< 3, 3 >::CheckCellPointers ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::CreateVoronoiTessellation
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CreateVoronoiTessellation_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "CreateVoronoiTessellation"
                , CreateVoronoiTessellation_function_type( &::MeshBasedCellPopulation< 3, 3 >::CreateVoronoiTessellation ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::DivideLongSprings
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*DivideLongSprings_function_type)( double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "DivideLongSprings"
                , DivideLongSprings_function_type( &::MeshBasedCellPopulation< 3, 3 >::DivideLongSprings )
                , ( bp::arg("springDivisionThreshold") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetAreaBasedDampingConstantParameter
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetAreaBasedDampingConstantParameter_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetAreaBasedDampingConstantParameter"
                , GetAreaBasedDampingConstantParameter_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetAreaBasedDampingConstantParameter ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetDampingConstant
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetNumNodes
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetOutputMeshInVtk
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputMeshInVtk_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetOutputMeshInVtk"
                , GetOutputMeshInVtk_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetOutputMeshInVtk ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetRestLength
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetRestLength_function_type)( unsigned int,unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetRestLength"
                , GetRestLength_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetRestLength )
                , ( bp::arg("indexA"), bp::arg("indexB") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetSurfaceAreaOfVoronoiElement
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetSurfaceAreaOfVoronoiElement_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetSurfaceAreaOfVoronoiElement"
                , GetSurfaceAreaOfVoronoiElement_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetSurfaceAreaOfVoronoiElement )
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfVoronoiElement
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfVoronoiElement_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetVolumeOfVoronoiElement"
                , GetVolumeOfVoronoiElement_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfVoronoiElement )
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetVoronoiEdgeLength
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVoronoiEdgeLength_function_type)( unsigned int,unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetVoronoiEdgeLength"
                , GetVoronoiEdgeLength_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetVoronoiEdgeLength )
                , ( bp::arg("index1"), bp::arg("index2") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetWidth
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetWidth)
                , default_GetWidth_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetWriteVtkAsPoints
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetWriteVtkAsPoints_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetWriteVtkAsPoints"
                , GetWriteVtkAsPoints_function_type( &::MeshBasedCellPopulation< 3, 3 >::GetWriteVtkAsPoints ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::OpenWritersFiles
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::MeshBasedCellPopulation< 3, 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::MeshBasedCellPopulation< 3, 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetAreaBasedDampingConstant
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAreaBasedDampingConstant_function_type)( bool ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetAreaBasedDampingConstant"
                , SetAreaBasedDampingConstant_function_type( &::MeshBasedCellPopulation< 3, 3 >::SetAreaBasedDampingConstant )
                , ( bp::arg("useAreaBasedDampingConstant") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetAreaBasedDampingConstantParameter
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAreaBasedDampingConstantParameter_function_type)( double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetAreaBasedDampingConstantParameter"
                , SetAreaBasedDampingConstantParameter_function_type( &::MeshBasedCellPopulation< 3, 3 >::SetAreaBasedDampingConstantParameter )
                , ( bp::arg("areaBasedDampingConstantParameter") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetNode
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::MeshBasedCellPopulation< 3, 3 >::SetNode)
                , default_SetNode_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetOutputMeshInVtk
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputMeshInVtk_function_type)( bool ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetOutputMeshInVtk"
                , SetOutputMeshInVtk_function_type( &::MeshBasedCellPopulation< 3, 3 >::SetOutputMeshInVtk )
                , ( bp::arg("outputMeshInVtk") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetRestLength
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRestLength_function_type)( unsigned int,unsigned int,double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetRestLength"
                , SetRestLength_function_type( &::MeshBasedCellPopulation< 3, 3 >::SetRestLength )
                , ( bp::arg("indexA"), bp::arg("indexB"), bp::arg("restLength") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetWriteVtkAsPoints
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetWriteVtkAsPoints_function_type)( bool ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SetWriteVtkAsPoints"
                , SetWriteVtkAsPoints_function_type( &::MeshBasedCellPopulation< 3, 3 >::SetWriteVtkAsPoints )
                , ( bp::arg("writeVtkAsPoints") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SpringsBegin
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::MeshBasedCellPopulation< 3, 3 >::SpringIterator ( exported_class_t::*SpringsBegin_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SpringsBegin"
                , SpringsBegin_function_type( &::MeshBasedCellPopulation< 3, 3 >::SpringsBegin ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SpringsEnd
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::MeshBasedCellPopulation< 3, 3 >::SpringIterator ( exported_class_t::*SpringsEnd_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SpringsEnd"
                , SpringsEnd_function_type( &::MeshBasedCellPopulation< 3, 3 >::SpringsEnd ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::TessellateIfNeeded
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*TessellateIfNeeded_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "TessellateIfNeeded"
                , TessellateIfNeeded_function_type( &::MeshBasedCellPopulation< 3, 3 >::TessellateIfNeeded ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::Update
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "Update"
                , Update_function_type(&::MeshBasedCellPopulation< 3, 3 >::Update)
                , default_Update_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::UpdateGhostNodesAfterReMesh
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "UpdateGhostNodesAfterReMesh"
                , UpdateGhostNodesAfterReMesh_function_type( &MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateGhostNodesAfterReMesh )
                , ( bp::arg("rMap") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::UseAreaBasedDampingConstant
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*UseAreaBasedDampingConstant_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "UseAreaBasedDampingConstant"
                , UseAreaBasedDampingConstant_function_type( &::MeshBasedCellPopulation< 3, 3 >::UseAreaBasedDampingConstant ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::Validate
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*Validate_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "Validate"
                , Validate_function_type( &MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_Validate ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::WriteVtkResultsToFile
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type(&::MeshBasedCellPopulation< 3, 3 >::WriteVtkResultsToFile)
                , default_WriteVtkResultsToFile_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_WriteVtkResultsToFile)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode)
                , default_IsGhostNode_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle)
                , default_IsParticle_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations
        
            typedef MeshBasedCellPopulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            MeshBasedCellPopulation3_3_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&MeshBasedCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        MeshBasedCellPopulation3_3_exposer.def("AddPopulationWriterVoronoiDataWriter", &MeshBasedCellPopulation<3,3>::AddPopulationWriter<VoronoiDataWriter>);
    }

    { //::MeshBasedCellPopulationWithGhostNodes< 2 >
        typedef bp::class_< MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper, bp::bases< MeshBasedCellPopulation< 2, 2 > >, boost::noncopyable > MeshBasedCellPopulationWithGhostNodes2_exposer_t;
        MeshBasedCellPopulationWithGhostNodes2_exposer_t MeshBasedCellPopulationWithGhostNodes2_exposer = MeshBasedCellPopulationWithGhostNodes2_exposer_t( "MeshBasedCellPopulationWithGhostNodes2", bp::init< MutableMesh< 2, 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, double > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("ghostSpringStiffness")=15. )) );
        bp::scope MeshBasedCellPopulationWithGhostNodes2_scope( MeshBasedCellPopulationWithGhostNodes2_exposer );
        MeshBasedCellPopulationWithGhostNodes2_exposer.def( bp::init< MutableMesh< 2, 2 > &, bp::optional< double > >(( bp::arg("rMesh"), bp::arg("ghostSpringStiffness")=15. )) );
        bp::implicitly_convertible< MutableMesh< 2, 2 > &, MeshBasedCellPopulationWithGhostNodes< 2 > >();
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::AcceptCellWritersAcrossPopulation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::AddCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::AddCell)
                , default_AddCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::ApplyGhostForces
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*ApplyGhostForces_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "ApplyGhostForces"
                , ApplyGhostForces_function_type( &::MeshBasedCellPopulationWithGhostNodes< 2 >::ApplyGhostForces ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::CalculateForceBetweenGhostNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*CalculateForceBetweenGhostNodes_function_type)( unsigned int const &,unsigned int const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "CalculateForceBetweenGhostNodes"
                , CalculateForceBetweenGhostNodes_function_type( &::MeshBasedCellPopulationWithGhostNodes< 2 >::CalculateForceBetweenGhostNodes )
                , ( bp::arg("rNodeAGlobalIndex"), bp::arg("rNodeBGlobalIndex") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::GetGhostNodeIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetGhostNodeIndices_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetGhostNodeIndices"
                , GetGhostNodeIndices_function_type( &::MeshBasedCellPopulationWithGhostNodes< 2 >::GetGhostNodeIndices ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::GetNeighbouringLocationIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::GetTetrahedralMeshForPdeModifier
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::TetrahedralMesh< 2, 2 > * ( exported_class_t::*GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            typedef ::TetrahedralMesh< 2, 2 > * ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::IsGhostNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::IsGhostNode)
                , default_IsGhostNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::OpenWritersFiles
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::OutputCellPopulationParameters
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::UpdateGhostNodesAfterReMesh
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "UpdateGhostNodesAfterReMesh"
                , UpdateGhostNodesAfterReMesh_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::UpdateGhostNodesAfterReMesh)
                , default_UpdateGhostNodesAfterReMesh_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_UpdateGhostNodesAfterReMesh)
                , ( bp::arg("rMap") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::WriteVtkResultsToFile
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type(&::MeshBasedCellPopulationWithGhostNodes< 2 >::WriteVtkResultsToFile)
                , default_WriteVtkResultsToFile_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_WriteVtkResultsToFile)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 2 >::rGetGhostNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::std::vector< bool > & ( exported_class_t::*rGetGhostNodes_function_type)(  ) ;
            
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::MeshBasedCellPopulation< 2, 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::AddNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 2 > * ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_AddNode_function_type)( ::Node< 2 > * ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::MeshBasedCellPopulation< 2, 2 >::AddNode)
                , default_AddNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetDampingConstant
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetNumNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::GetWidth
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::MeshBasedCellPopulation< 2, 2 >::GetWidth)
                , default_GetWidth_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle)
                , default_IsParticle_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::MeshBasedCellPopulation< 2, 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::SetNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::MeshBasedCellPopulation< 2, 2 >::SetNode)
                , default_SetNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::Update
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "Update"
                , Update_function_type(&::MeshBasedCellPopulation< 2, 2 >::Update)
                , default_Update_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::MeshBasedCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef MeshBasedCellPopulationWithGhostNodes< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::MeshBasedCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&MeshBasedCellPopulationWithGhostNodes_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        MeshBasedCellPopulationWithGhostNodes2_exposer.def("AddPopulationWriterVoronoiDataWriter", &MeshBasedCellPopulationWithGhostNodes<2>::AddPopulationWriter<VoronoiDataWriter>);
    }

    { //::MeshBasedCellPopulationWithGhostNodes< 3 >
        typedef bp::class_< MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper, bp::bases< MeshBasedCellPopulation< 3, 3 > >, boost::noncopyable > MeshBasedCellPopulationWithGhostNodes3_exposer_t;
        MeshBasedCellPopulationWithGhostNodes3_exposer_t MeshBasedCellPopulationWithGhostNodes3_exposer = MeshBasedCellPopulationWithGhostNodes3_exposer_t( "MeshBasedCellPopulationWithGhostNodes3", bp::init< MutableMesh< 3, 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, double > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("ghostSpringStiffness")=15. )) );
        bp::scope MeshBasedCellPopulationWithGhostNodes3_scope( MeshBasedCellPopulationWithGhostNodes3_exposer );
        MeshBasedCellPopulationWithGhostNodes3_exposer.def( bp::init< MutableMesh< 3, 3 > &, bp::optional< double > >(( bp::arg("rMesh"), bp::arg("ghostSpringStiffness")=15. )) );
        bp::implicitly_convertible< MutableMesh< 3, 3 > &, MeshBasedCellPopulationWithGhostNodes< 3 > >();
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::AcceptCellWritersAcrossPopulation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::AddCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::AddCell)
                , default_AddCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::ApplyGhostForces
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*ApplyGhostForces_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "ApplyGhostForces"
                , ApplyGhostForces_function_type( &::MeshBasedCellPopulationWithGhostNodes< 3 >::ApplyGhostForces ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::CalculateForceBetweenGhostNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*CalculateForceBetweenGhostNodes_function_type)( unsigned int const &,unsigned int const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "CalculateForceBetweenGhostNodes"
                , CalculateForceBetweenGhostNodes_function_type( &::MeshBasedCellPopulationWithGhostNodes< 3 >::CalculateForceBetweenGhostNodes )
                , ( bp::arg("rNodeAGlobalIndex"), bp::arg("rNodeBGlobalIndex") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::GetGhostNodeIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetGhostNodeIndices_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetGhostNodeIndices"
                , GetGhostNodeIndices_function_type( &::MeshBasedCellPopulationWithGhostNodes< 3 >::GetGhostNodeIndices ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::GetNeighbouringLocationIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::GetTetrahedralMeshForPdeModifier
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::TetrahedralMesh< 3, 3 > * ( exported_class_t::*GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            typedef ::TetrahedralMesh< 3, 3 > * ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::IsGhostNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::IsGhostNode)
                , default_IsGhostNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::OpenWritersFiles
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::OutputCellPopulationParameters
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::UpdateGhostNodesAfterReMesh
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_UpdateGhostNodesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "UpdateGhostNodesAfterReMesh"
                , UpdateGhostNodesAfterReMesh_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::UpdateGhostNodesAfterReMesh)
                , default_UpdateGhostNodesAfterReMesh_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_UpdateGhostNodesAfterReMesh)
                , ( bp::arg("rMap") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::WriteVtkResultsToFile
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_WriteVtkResultsToFile_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "WriteVtkResultsToFile"
                , WriteVtkResultsToFile_function_type(&::MeshBasedCellPopulationWithGhostNodes< 3 >::WriteVtkResultsToFile)
                , default_WriteVtkResultsToFile_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_WriteVtkResultsToFile)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::MeshBasedCellPopulationWithGhostNodes< 3 >::rGetGhostNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::std::vector< bool > & ( exported_class_t::*rGetGhostNodes_function_type)(  ) ;
            
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::MeshBasedCellPopulation< 3, 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::AddNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 3 > * ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_AddNode_function_type)( ::Node< 3 > * ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::MeshBasedCellPopulation< 3, 3 >::AddNode)
                , default_AddNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetDampingConstant
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetNumNodes
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::GetWidth
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::MeshBasedCellPopulation< 3, 3 >::GetWidth)
                , default_GetWidth_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle)
                , default_IsParticle_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::MeshBasedCellPopulation< 3, 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::SetNode
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::MeshBasedCellPopulation< 3, 3 >::SetNode)
                , default_SetNode_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::Update
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "Update"
                , Update_function_type(&::MeshBasedCellPopulation< 3, 3 >::Update)
                , default_Update_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::MeshBasedCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef MeshBasedCellPopulationWithGhostNodes< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            MeshBasedCellPopulationWithGhostNodes3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::MeshBasedCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&MeshBasedCellPopulationWithGhostNodes_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        MeshBasedCellPopulationWithGhostNodes3_exposer.def("AddPopulationWriterVoronoiDataWriter", &MeshBasedCellPopulationWithGhostNodes<3>::AddPopulationWriter<VoronoiDataWriter>);
    }

    bp::class_< NagaiHondaForce_less__2__greater__wrapper, bp::bases< AbstractForce< 2, 2 > > >( "NagaiHondaForce2", bp::init< >() )    
        .def( 
            "AddForceContribution"
            , (void ( ::NagaiHondaForce<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::NagaiHondaForce< 2 >::AddForceContribution)
            , (void ( NagaiHondaForce_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&NagaiHondaForce_less__2__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "GetAdhesionParameter"
            , (double ( ::NagaiHondaForce<2>::* )( ::Node< 2 > *,::Node< 2 > *,::VertexBasedCellPopulation< 2 > & ))(&::NagaiHondaForce< 2 >::GetAdhesionParameter)
            , (double ( NagaiHondaForce_less__2__greater__wrapper::* )( ::Node< 2 > *,::Node< 2 > *,::VertexBasedCellPopulation< 2 > & ))(&NagaiHondaForce_less__2__greater__wrapper::default_GetAdhesionParameter)
            , ( bp::arg("pNodeA"), bp::arg("pNodeB"), bp::arg("rVertexCellPopulation") ) )    
        .def( 
            "GetNagaiHondaCellBoundaryAdhesionEnergyParameter"
            , (double ( ::NagaiHondaForce<2>::* )(  ))( &::NagaiHondaForce< 2 >::GetNagaiHondaCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetNagaiHondaCellCellAdhesionEnergyParameter"
            , (double ( ::NagaiHondaForce<2>::* )(  ))( &::NagaiHondaForce< 2 >::GetNagaiHondaCellCellAdhesionEnergyParameter ) )    
        .def( 
            "GetNagaiHondaDeformationEnergyParameter"
            , (double ( ::NagaiHondaForce<2>::* )(  ))( &::NagaiHondaForce< 2 >::GetNagaiHondaDeformationEnergyParameter ) )    
        .def( 
            "GetNagaiHondaMembraneSurfaceEnergyParameter"
            , (double ( ::NagaiHondaForce<2>::* )(  ))( &::NagaiHondaForce< 2 >::GetNagaiHondaMembraneSurfaceEnergyParameter ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::NagaiHondaForce<2>::* )( ::out_stream & ))(&::NagaiHondaForce< 2 >::OutputForceParameters)
            , (void ( NagaiHondaForce_less__2__greater__wrapper::* )( ::out_stream & ))(&NagaiHondaForce_less__2__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetNagaiHondaCellBoundaryAdhesionEnergyParameter"
            , (void ( ::NagaiHondaForce<2>::* )( double ))( &::NagaiHondaForce< 2 >::SetNagaiHondaCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("nagaiHondaCellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaCellCellAdhesionEnergyParameter"
            , (void ( ::NagaiHondaForce<2>::* )( double ))( &::NagaiHondaForce< 2 >::SetNagaiHondaCellCellAdhesionEnergyParameter )
            , ( bp::arg("nagaiHondaCellCellAdhesionEnergyEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaDeformationEnergyParameter"
            , (void ( ::NagaiHondaForce<2>::* )( double ))( &::NagaiHondaForce< 2 >::SetNagaiHondaDeformationEnergyParameter )
            , ( bp::arg("nagaiHondaDeformationEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaMembraneSurfaceEnergyParameter"
            , (void ( ::NagaiHondaForce<2>::* )( double ))( &::NagaiHondaForce< 2 >::SetNagaiHondaMembraneSurfaceEnergyParameter )
            , ( bp::arg("nagaiHondaMembraneSurfaceEnergyParameter") ) );

    bp::class_< NagaiHondaForce_less__3__greater__wrapper, bp::bases< AbstractForce< 3, 3 > > >( "NagaiHondaForce3", bp::init< >() )    
        .def( 
            "AddForceContribution"
            , (void ( ::NagaiHondaForce<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::NagaiHondaForce< 3 >::AddForceContribution)
            , (void ( NagaiHondaForce_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&NagaiHondaForce_less__3__greater__wrapper::default_AddForceContribution)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "GetAdhesionParameter"
            , (double ( ::NagaiHondaForce<3>::* )( ::Node< 3 > *,::Node< 3 > *,::VertexBasedCellPopulation< 3 > & ))(&::NagaiHondaForce< 3 >::GetAdhesionParameter)
            , (double ( NagaiHondaForce_less__3__greater__wrapper::* )( ::Node< 3 > *,::Node< 3 > *,::VertexBasedCellPopulation< 3 > & ))(&NagaiHondaForce_less__3__greater__wrapper::default_GetAdhesionParameter)
            , ( bp::arg("pNodeA"), bp::arg("pNodeB"), bp::arg("rVertexCellPopulation") ) )    
        .def( 
            "GetNagaiHondaCellBoundaryAdhesionEnergyParameter"
            , (double ( ::NagaiHondaForce<3>::* )(  ))( &::NagaiHondaForce< 3 >::GetNagaiHondaCellBoundaryAdhesionEnergyParameter ) )    
        .def( 
            "GetNagaiHondaCellCellAdhesionEnergyParameter"
            , (double ( ::NagaiHondaForce<3>::* )(  ))( &::NagaiHondaForce< 3 >::GetNagaiHondaCellCellAdhesionEnergyParameter ) )    
        .def( 
            "GetNagaiHondaDeformationEnergyParameter"
            , (double ( ::NagaiHondaForce<3>::* )(  ))( &::NagaiHondaForce< 3 >::GetNagaiHondaDeformationEnergyParameter ) )    
        .def( 
            "GetNagaiHondaMembraneSurfaceEnergyParameter"
            , (double ( ::NagaiHondaForce<3>::* )(  ))( &::NagaiHondaForce< 3 >::GetNagaiHondaMembraneSurfaceEnergyParameter ) )    
        .def( 
            "OutputForceParameters"
            , (void ( ::NagaiHondaForce<3>::* )( ::out_stream & ))(&::NagaiHondaForce< 3 >::OutputForceParameters)
            , (void ( NagaiHondaForce_less__3__greater__wrapper::* )( ::out_stream & ))(&NagaiHondaForce_less__3__greater__wrapper::default_OutputForceParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetNagaiHondaCellBoundaryAdhesionEnergyParameter"
            , (void ( ::NagaiHondaForce<3>::* )( double ))( &::NagaiHondaForce< 3 >::SetNagaiHondaCellBoundaryAdhesionEnergyParameter )
            , ( bp::arg("nagaiHondaCellBoundaryAdhesionEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaCellCellAdhesionEnergyParameter"
            , (void ( ::NagaiHondaForce<3>::* )( double ))( &::NagaiHondaForce< 3 >::SetNagaiHondaCellCellAdhesionEnergyParameter )
            , ( bp::arg("nagaiHondaCellCellAdhesionEnergyEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaDeformationEnergyParameter"
            , (void ( ::NagaiHondaForce<3>::* )( double ))( &::NagaiHondaForce< 3 >::SetNagaiHondaDeformationEnergyParameter )
            , ( bp::arg("nagaiHondaDeformationEnergyParameter") ) )    
        .def( 
            "SetNagaiHondaMembraneSurfaceEnergyParameter"
            , (void ( ::NagaiHondaForce<3>::* )( double ))( &::NagaiHondaForce< 3 >::SetNagaiHondaMembraneSurfaceEnergyParameter )
            , ( bp::arg("nagaiHondaMembraneSurfaceEnergyParameter") ) );

    { //::NodeBasedCellPopulation< 2 >
        typedef bp::class_< NodeBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractCentreBasedCellPopulation< 2, 2 > >, boost::noncopyable > NodeBasedCellPopulation2_exposer_t;
        NodeBasedCellPopulation2_exposer_t NodeBasedCellPopulation2_exposer = NodeBasedCellPopulation2_exposer_t( "NodeBasedCellPopulation2", bp::init< NodesOnlyMesh< 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true) )) );
        bp::scope NodeBasedCellPopulation2_scope( NodeBasedCellPopulation2_exposer );
        NodeBasedCellPopulation2_exposer.def( bp::init< NodesOnlyMesh< 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< NodesOnlyMesh< 2 > &, NodeBasedCellPopulation< 2 > >();
        { //::NodeBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::NodeBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::NodeBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::NodeBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::AddCell
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::NodeBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::AddReceivedCells
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AddReceivedCells"
                , AddReceivedCells_function_type( &::NodeBasedCellPopulation< 2 >::AddReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::Clear
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "Clear"
                , Clear_function_type( &::NodeBasedCellPopulation< 2 >::Clear ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetCellNodePair
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::pair< boost::shared_ptr< Cell >, Node< 2 > > ( exported_class_t::*GetCellNodePair_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetCellNodePair"
                , GetCellNodePair_function_type( &::NodeBasedCellPopulation< 2 >::GetCellNodePair )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::NodeBasedCellPopulation< 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetMechanicsCutOffLength
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetMechanicsCutOffLength_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetMechanicsCutOffLength"
                , GetMechanicsCutOffLength_function_type( &::NodeBasedCellPopulation< 2 >::GetMechanicsCutOffLength ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetNeighbouringNodeIndices
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::NodeBasedCellPopulation< 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetNodesWithinNeighbourhoodRadius
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNodesWithinNeighbourhoodRadius_function_type)( unsigned int,double ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetNodesWithinNeighbourhoodRadius"
                , GetNodesWithinNeighbourhoodRadius_function_type( &::NodeBasedCellPopulation< 2 >::GetNodesWithinNeighbourhoodRadius )
                , ( bp::arg("index"), bp::arg("neighbourhoodRadius") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetNumNodes
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::NodeBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetReceivedCells
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*GetReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetReceivedCells"
                , GetReceivedCells_function_type( &::NodeBasedCellPopulation< 2 >::GetReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetSizeOfCellPopulation
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::NodeBasedCellPopulation< 2 >::GetSizeOfCellPopulation ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*GetUseVariableRadii_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetUseVariableRadii"
                , GetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 2 >::GetUseVariableRadii ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::NodeBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::GetWidth
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::NodeBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::NonBlockingSendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*NonBlockingSendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "NonBlockingSendCellsToNeighbourProcesses"
                , NonBlockingSendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 2 >::NonBlockingSendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::NodeBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::NodeBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::SendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SendCellsToNeighbourProcesses"
                , SendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 2 >::SendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::SetLoadBalanceFrequency
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceFrequency_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SetLoadBalanceFrequency"
                , SetLoadBalanceFrequency_function_type( &::NodeBasedCellPopulation< 2 >::SetLoadBalanceFrequency )
                , ( bp::arg("loadBalanceFrequency") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::SetLoadBalanceMesh
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceMesh_function_type)( bool ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SetLoadBalanceMesh"
                , SetLoadBalanceMesh_function_type( &::NodeBasedCellPopulation< 2 >::SetLoadBalanceMesh )
                , ( bp::arg("loadBalanceMesh") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::SetNode
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::NodeBasedCellPopulation< 2 >::SetNode)
                , default_SetNode_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::SetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetUseVariableRadii_function_type)( bool ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SetUseVariableRadii"
                , SetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 2 >::SetUseVariableRadii )
                , ( bp::arg("useVariableRadii")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::Update
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::NodeBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::UpdateCellProcessLocation
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::NodeBasedCellPopulation< 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::UpdateParticlesAfterReMesh
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*UpdateParticlesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "UpdateParticlesAfterReMesh"
                , UpdateParticlesAfterReMesh_function_type( &NodeBasedCellPopulation_less__2__greater__wrapper::default_UpdateParticlesAfterReMesh )
                , ( bp::arg("rMap") ) );
        
        }
        { //::NodeBasedCellPopulation< 2 >::Validate
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*Validate_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "Validate"
                , Validate_function_type( &NodeBasedCellPopulation_less__2__greater__wrapper::default_Validate ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &NodeBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsGhostNode)
                , default_IsGhostNode_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 2, 2 >::IsParticle)
                , default_IsParticle_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::OpenWritersFiles
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef NodeBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( NodeBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            NodeBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&NodeBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::NodeBasedCellPopulation< 3 >
        typedef bp::class_< NodeBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractCentreBasedCellPopulation< 3, 3 > >, boost::noncopyable > NodeBasedCellPopulation3_exposer_t;
        NodeBasedCellPopulation3_exposer_t NodeBasedCellPopulation3_exposer = NodeBasedCellPopulation3_exposer_t( "NodeBasedCellPopulation3", bp::init< NodesOnlyMesh< 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< std::vector< unsigned int >, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true) )) );
        bp::scope NodeBasedCellPopulation3_scope( NodeBasedCellPopulation3_exposer );
        NodeBasedCellPopulation3_exposer.def( bp::init< NodesOnlyMesh< 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< NodesOnlyMesh< 3 > &, NodeBasedCellPopulation< 3 > >();
        { //::NodeBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::NodeBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AddCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::NodeBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::AddReceivedCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddReceivedCells"
                , AddReceivedCells_function_type( &::NodeBasedCellPopulation< 3 >::AddReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Clear
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Clear_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Clear"
                , Clear_function_type( &::NodeBasedCellPopulation< 3 >::Clear ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetCellNodePair
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::pair< boost::shared_ptr< Cell >, Node< 3 > > ( exported_class_t::*GetCellNodePair_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellNodePair"
                , GetCellNodePair_function_type( &::NodeBasedCellPopulation< 3 >::GetCellNodePair )
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::NodeBasedCellPopulation< 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetMechanicsCutOffLength
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetMechanicsCutOffLength_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetMechanicsCutOffLength"
                , GetMechanicsCutOffLength_function_type( &::NodeBasedCellPopulation< 3 >::GetMechanicsCutOffLength ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::NodeBasedCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNodesWithinNeighbourhoodRadius
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNodesWithinNeighbourhoodRadius_function_type)( unsigned int,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNodesWithinNeighbourhoodRadius"
                , GetNodesWithinNeighbourhoodRadius_function_type( &::NodeBasedCellPopulation< 3 >::GetNodesWithinNeighbourhoodRadius )
                , ( bp::arg("index"), bp::arg("neighbourhoodRadius") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetNumNodes
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::NodeBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetReceivedCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*GetReceivedCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetReceivedCells"
                , GetReceivedCells_function_type( &::NodeBasedCellPopulation< 3 >::GetReceivedCells ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetSizeOfCellPopulation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetSizeOfCellPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetSizeOfCellPopulation"
                , GetSizeOfCellPopulation_function_type( &::NodeBasedCellPopulation< 3 >::GetSizeOfCellPopulation ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetUseVariableRadii_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetUseVariableRadii"
                , GetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 3 >::GetUseVariableRadii ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::NodeBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::GetWidth
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::NodeBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::NonBlockingSendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*NonBlockingSendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "NonBlockingSendCellsToNeighbourProcesses"
                , NonBlockingSendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 3 >::NonBlockingSendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::NodeBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::NodeBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SendCellsToNeighbourProcesses
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SendCellsToNeighbourProcesses_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SendCellsToNeighbourProcesses"
                , SendCellsToNeighbourProcesses_function_type( &::NodeBasedCellPopulation< 3 >::SendCellsToNeighbourProcesses ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetLoadBalanceFrequency
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceFrequency_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetLoadBalanceFrequency"
                , SetLoadBalanceFrequency_function_type( &::NodeBasedCellPopulation< 3 >::SetLoadBalanceFrequency )
                , ( bp::arg("loadBalanceFrequency") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetLoadBalanceMesh
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetLoadBalanceMesh_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetLoadBalanceMesh"
                , SetLoadBalanceMesh_function_type( &::NodeBasedCellPopulation< 3 >::SetLoadBalanceMesh )
                , ( bp::arg("loadBalanceMesh") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::NodeBasedCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::SetUseVariableRadii
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUseVariableRadii_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SetUseVariableRadii"
                , SetUseVariableRadii_function_type( &::NodeBasedCellPopulation< 3 >::SetUseVariableRadii )
                , ( bp::arg("useVariableRadii")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Update
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::NodeBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::NodeBasedCellPopulation< 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::UpdateParticlesAfterReMesh
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*UpdateParticlesAfterReMesh_function_type)( ::NodeMap & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateParticlesAfterReMesh"
                , UpdateParticlesAfterReMesh_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateParticlesAfterReMesh )
                , ( bp::arg("rMap") ) );
        
        }
        { //::NodeBasedCellPopulation< 3 >::Validate
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*Validate_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "Validate"
                , Validate_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_Validate ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &NodeBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsGhostNode_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsGhostNode_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsGhostNode"
                , IsGhostNode_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsGhostNode)
                , default_IsGhostNode_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsGhostNode)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsParticle_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsParticle_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsParticle"
                , IsParticle_function_type(&::AbstractCentreBasedCellPopulation< 3, 3 >::IsParticle)
                , default_IsParticle_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::OpenWritersFiles
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef NodeBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( NodeBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            NodeBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&NodeBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::OffLatticeSimulation< 2, 2 >
        typedef bp::class_< OffLatticeSimulation_less__2_comma__2__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 2, 2 > >, boost::noncopyable > OffLatticeSimulation2_2_exposer_t;
        OffLatticeSimulation2_2_exposer_t OffLatticeSimulation2_2_exposer = OffLatticeSimulation2_2_exposer_t( "OffLatticeSimulation2_2", bp::init< AbstractCellPopulation< 2, 2 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OffLatticeSimulation2_2_scope( OffLatticeSimulation2_2_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 2, 2 > &, OffLatticeSimulation< 2, 2 > >();
        { //::OffLatticeSimulation< 2, 2 >::AddCellPopulationBoundaryCondition
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellPopulationBoundaryCondition_function_type)( ::boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 2, 2 > > ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "AddCellPopulationBoundaryCondition"
                , AddCellPopulationBoundaryCondition_function_type( &::OffLatticeSimulation< 2, 2 >::AddCellPopulationBoundaryCondition )
                , ( bp::arg("pBoundaryCondition") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::AddForce
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*AddForce_function_type)( ::boost::shared_ptr< AbstractForce< 2, 2 > > ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "AddForce"
                , AddForce_function_type( &::OffLatticeSimulation< 2, 2 >::AddForce )
                , ( bp::arg("pForce") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::ApplyBoundaries
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*ApplyBoundaries_function_type)( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "ApplyBoundaries"
                , ApplyBoundaries_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::ApplyBoundaries )
                , ( bp::arg("oldNodeLoctions") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::GetNumericalMethod
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractNumericalMethod< 2, 2 > > const ( exported_class_t::*GetNumericalMethod_function_type)(  ) const;
            
            OffLatticeSimulation2_2_exposer.def( 
                "GetNumericalMethod"
                , GetNumericalMethod_function_type( &::OffLatticeSimulation< 2, 2 >::GetNumericalMethod ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::OutputAdditionalSimulationSetup
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OffLatticeSimulation< 2, 2 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::OutputSimulationParameters
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OffLatticeSimulation< 2, 2 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::RemoveAllCellPopulationBoundaryConditions
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllCellPopulationBoundaryConditions_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "RemoveAllCellPopulationBoundaryConditions"
                , RemoveAllCellPopulationBoundaryConditions_function_type( &::OffLatticeSimulation< 2, 2 >::RemoveAllCellPopulationBoundaryConditions ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::RemoveAllForces
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllForces_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "RemoveAllForces"
                , RemoveAllForces_function_type( &::OffLatticeSimulation< 2, 2 >::RemoveAllForces ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::RevertToOldLocations
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*RevertToOldLocations_function_type)( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "RevertToOldLocations"
                , RevertToOldLocations_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::RevertToOldLocations )
                , ( bp::arg("oldNodeLoctions") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::SetNumericalMethod
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNumericalMethod_function_type)( ::boost::shared_ptr< AbstractNumericalMethod< 2, 2 > > ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "SetNumericalMethod"
                , SetNumericalMethod_function_type( &::OffLatticeSimulation< 2, 2 >::SetNumericalMethod )
                , ( bp::arg("pNumericalMethod") ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::SetupSolve
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::UpdateCellLocationsAndTopology
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OffLatticeSimulation< 2, 2 >::WriteVisualizerSetupFile
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellBirth
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef unsigned int ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef unsigned int ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef bool ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation
        
            typedef OffLatticeSimulation< 2, 2 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__2_comma__2__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OffLatticeSimulation2_2_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OffLatticeSimulation_less__2_comma__2__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
    }

    { //::OffLatticeSimulation< 3, 3 >
        typedef bp::class_< OffLatticeSimulation_less__3_comma__3__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 3, 3 > >, boost::noncopyable > OffLatticeSimulation3_3_exposer_t;
        OffLatticeSimulation3_3_exposer_t OffLatticeSimulation3_3_exposer = OffLatticeSimulation3_3_exposer_t( "OffLatticeSimulation3_3", bp::init< AbstractCellPopulation< 3, 3 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OffLatticeSimulation3_3_scope( OffLatticeSimulation3_3_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 3, 3 > &, OffLatticeSimulation< 3, 3 > >();
        { //::OffLatticeSimulation< 3, 3 >::AddCellPopulationBoundaryCondition
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellPopulationBoundaryCondition_function_type)( ::boost::shared_ptr< AbstractCellPopulationBoundaryCondition< 3, 3 > > ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "AddCellPopulationBoundaryCondition"
                , AddCellPopulationBoundaryCondition_function_type( &::OffLatticeSimulation< 3, 3 >::AddCellPopulationBoundaryCondition )
                , ( bp::arg("pBoundaryCondition") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::AddForce
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddForce_function_type)( ::boost::shared_ptr< AbstractForce< 3, 3 > > ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "AddForce"
                , AddForce_function_type( &::OffLatticeSimulation< 3, 3 >::AddForce )
                , ( bp::arg("pForce") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::ApplyBoundaries
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*ApplyBoundaries_function_type)( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "ApplyBoundaries"
                , ApplyBoundaries_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::ApplyBoundaries )
                , ( bp::arg("oldNodeLoctions") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::GetNumericalMethod
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractNumericalMethod< 3, 3 > > const ( exported_class_t::*GetNumericalMethod_function_type)(  ) const;
            
            OffLatticeSimulation3_3_exposer.def( 
                "GetNumericalMethod"
                , GetNumericalMethod_function_type( &::OffLatticeSimulation< 3, 3 >::GetNumericalMethod ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::OutputAdditionalSimulationSetup
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OffLatticeSimulation< 3, 3 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::OutputSimulationParameters
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OffLatticeSimulation< 3, 3 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::RemoveAllCellPopulationBoundaryConditions
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllCellPopulationBoundaryConditions_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "RemoveAllCellPopulationBoundaryConditions"
                , RemoveAllCellPopulationBoundaryConditions_function_type( &::OffLatticeSimulation< 3, 3 >::RemoveAllCellPopulationBoundaryConditions ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::RemoveAllForces
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllForces_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "RemoveAllForces"
                , RemoveAllForces_function_type( &::OffLatticeSimulation< 3, 3 >::RemoveAllForces ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::RevertToOldLocations
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*RevertToOldLocations_function_type)( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "RevertToOldLocations"
                , RevertToOldLocations_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::RevertToOldLocations )
                , ( bp::arg("oldNodeLoctions") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::SetNumericalMethod
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNumericalMethod_function_type)( ::boost::shared_ptr< AbstractNumericalMethod< 3, 3 > > ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "SetNumericalMethod"
                , SetNumericalMethod_function_type( &::OffLatticeSimulation< 3, 3 >::SetNumericalMethod )
                , ( bp::arg("pNumericalMethod") ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::SetupSolve
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::UpdateCellLocationsAndTopology
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OffLatticeSimulation< 3, 3 >::WriteVisualizerSetupFile
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellBirth
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef unsigned int ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef unsigned int ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef bool ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation
        
            typedef OffLatticeSimulation< 3, 3 > exported_class_t;
            typedef void ( OffLatticeSimulation_less__3_comma__3__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OffLatticeSimulation3_3_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OffLatticeSimulation_less__3_comma__3__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
    }

    { //::OnLatticeSimulation< 2 >
        typedef bp::class_< OnLatticeSimulation_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 2, 2 > >, boost::noncopyable > OnLatticeSimulation2_exposer_t;
        OnLatticeSimulation2_exposer_t OnLatticeSimulation2_exposer = OnLatticeSimulation2_exposer_t( "OnLatticeSimulation2", bp::init< AbstractCellPopulation< 2, 2 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OnLatticeSimulation2_scope( OnLatticeSimulation2_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 2, 2 > &, OnLatticeSimulation< 2 > >();
        { //::OnLatticeSimulation< 2 >::AddUpdateRule
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type( &::OnLatticeSimulation< 2 >::AddUpdateRule )
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OnLatticeSimulation_less__2__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::OutputSimulationParameters
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OnLatticeSimulation< 2 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OnLatticeSimulation_less__2__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::RemoveAllUpdateRules
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type( &::OnLatticeSimulation< 2 >::RemoveAllUpdateRules ) );
        
        }
        { //::OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OnLatticeSimulation< 2 >::UpdateCellPopulation
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellBirth
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__2__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__2__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OnLatticeSimulation_less__2__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OnLatticeSimulation_less__2__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::SetupSolve
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef bool ( OnLatticeSimulation_less__2__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
    }

    { //::OnLatticeSimulation< 3 >
        typedef bp::class_< OnLatticeSimulation_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 3, 3 > >, boost::noncopyable > OnLatticeSimulation3_exposer_t;
        OnLatticeSimulation3_exposer_t OnLatticeSimulation3_exposer = OnLatticeSimulation3_exposer_t( "OnLatticeSimulation3", bp::init< AbstractCellPopulation< 3, 3 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OnLatticeSimulation3_scope( OnLatticeSimulation3_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 3, 3 > &, OnLatticeSimulation< 3 > >();
        { //::OnLatticeSimulation< 3 >::AddUpdateRule
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type( &::OnLatticeSimulation< 3 >::AddUpdateRule )
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OnLatticeSimulation_less__3__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::OutputSimulationParameters
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OnLatticeSimulation< 3 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OnLatticeSimulation_less__3__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::RemoveAllUpdateRules
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type( &::OnLatticeSimulation< 3 >::RemoveAllUpdateRules ) );
        
        }
        { //::OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OnLatticeSimulation< 3 >::UpdateCellPopulation
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellBirth
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__3__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__3__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OnLatticeSimulation_less__3__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OnLatticeSimulation_less__3__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::SetupSolve
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef bool ( OnLatticeSimulation_less__3__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
    }

    bp::class_< PlaneBasedCellKiller_less__2__greater__wrapper, bp::bases< AbstractCellKiller< 2 > > >( "PlaneBasedCellKiller2", bp::init< AbstractCellPopulation< 2, 2 > *, boost::numeric::ublas::c_vector< double, 2 >, boost::numeric::ublas::c_vector< double, 2 > >(( bp::arg("pCellPopulation"), bp::arg("point"), bp::arg("normal") )) )    
        .def( 
            "CheckAndLabelCellsForApoptosisOrDeath"
            , (void ( ::PlaneBasedCellKiller<2>::* )(  ))(&::PlaneBasedCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath)
            , (void ( PlaneBasedCellKiller_less__2__greater__wrapper::* )(  ))(&PlaneBasedCellKiller_less__2__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) )    
        .def( 
            "OutputCellKillerParameters"
            , (void ( ::PlaneBasedCellKiller<2>::* )( ::out_stream & ))(&::PlaneBasedCellKiller< 2 >::OutputCellKillerParameters)
            , (void ( PlaneBasedCellKiller_less__2__greater__wrapper::* )( ::out_stream & ))(&PlaneBasedCellKiller_less__2__greater__wrapper::default_OutputCellKillerParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "rGetNormalToPlane"
            , (::boost::numeric::ublas::c_vector< double, 2 > const & ( ::PlaneBasedCellKiller<2>::* )(  )const)( &::PlaneBasedCellKiller< 2 >::rGetNormalToPlane )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "rGetPointOnPlane"
            , (::boost::numeric::ublas::c_vector< double, 2 > const & ( ::PlaneBasedCellKiller<2>::* )(  )const)( &::PlaneBasedCellKiller< 2 >::rGetPointOnPlane )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PlaneBasedCellKiller_less__3__greater__wrapper, bp::bases< AbstractCellKiller< 3 > > >( "PlaneBasedCellKiller3", bp::init< AbstractCellPopulation< 3, 3 > *, boost::numeric::ublas::c_vector< double, 3 >, boost::numeric::ublas::c_vector< double, 3 > >(( bp::arg("pCellPopulation"), bp::arg("point"), bp::arg("normal") )) )    
        .def( 
            "CheckAndLabelCellsForApoptosisOrDeath"
            , (void ( ::PlaneBasedCellKiller<3>::* )(  ))(&::PlaneBasedCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath)
            , (void ( PlaneBasedCellKiller_less__3__greater__wrapper::* )(  ))(&PlaneBasedCellKiller_less__3__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) )    
        .def( 
            "OutputCellKillerParameters"
            , (void ( ::PlaneBasedCellKiller<3>::* )( ::out_stream & ))(&::PlaneBasedCellKiller< 3 >::OutputCellKillerParameters)
            , (void ( PlaneBasedCellKiller_less__3__greater__wrapper::* )( ::out_stream & ))(&PlaneBasedCellKiller_less__3__greater__wrapper::default_OutputCellKillerParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "rGetNormalToPlane"
            , (::boost::numeric::ublas::c_vector< double, 3 > const & ( ::PlaneBasedCellKiller<3>::* )(  )const)( &::PlaneBasedCellKiller< 3 >::rGetNormalToPlane )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "rGetPointOnPlane"
            , (::boost::numeric::ublas::c_vector< double, 3 > const & ( ::PlaneBasedCellKiller<3>::* )(  )const)( &::PlaneBasedCellKiller< 3 >::rGetPointOnPlane )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PlaneBoundaryCondition_less__2_comma__2__greater__wrapper, bp::bases< AbstractCellPopulationBoundaryCondition< 2, 2 > > >( "PlaneBoundaryCondition2_2", bp::init< AbstractCellPopulation< 2, 2 > *, boost::numeric::ublas::c_vector< double, 2 >, boost::numeric::ublas::c_vector< double, 2 > >(( bp::arg("pCellPopulation"), bp::arg("point"), bp::arg("normal") )) )    
        .def( 
            "GetUseJiggledNodesOnPlane"
            , (bool ( ::PlaneBoundaryCondition<2, 2>::* )(  ))( &::PlaneBoundaryCondition< 2, 2 >::GetUseJiggledNodesOnPlane ) )    
        .def( 
            "ImposeBoundaryCondition"
            , (void ( ::PlaneBoundaryCondition<2, 2>::* )( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & ))(&::PlaneBoundaryCondition< 2, 2 >::ImposeBoundaryCondition)
            , (void ( PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::* )( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & ))(&PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::default_ImposeBoundaryCondition)
            , ( bp::arg("rOldLocations") ) )    
        .def( 
            "OutputCellPopulationBoundaryConditionParameters"
            , (void ( ::PlaneBoundaryCondition<2, 2>::* )( ::out_stream & ))(&::PlaneBoundaryCondition< 2, 2 >::OutputCellPopulationBoundaryConditionParameters)
            , (void ( PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::default_OutputCellPopulationBoundaryConditionParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetUseJiggledNodesOnPlane"
            , (void ( ::PlaneBoundaryCondition<2, 2>::* )( bool ))( &::PlaneBoundaryCondition< 2, 2 >::SetUseJiggledNodesOnPlane )
            , ( bp::arg("useJiggledNodesOnPlane") ) )    
        .def( 
            "VerifyBoundaryCondition"
            , (bool ( ::PlaneBoundaryCondition<2, 2>::* )(  ))(&::PlaneBoundaryCondition< 2, 2 >::VerifyBoundaryCondition)
            , (bool ( PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::* )(  ))(&PlaneBoundaryCondition_less__2_comma__2__greater__wrapper::default_VerifyBoundaryCondition) )    
        .def( 
            "rGetNormalToPlane"
            , (::boost::numeric::ublas::c_vector< double, 2 > const & ( ::PlaneBoundaryCondition<2, 2>::* )(  )const)( &::PlaneBoundaryCondition< 2, 2 >::rGetNormalToPlane )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "rGetPointOnPlane"
            , (::boost::numeric::ublas::c_vector< double, 2 > const & ( ::PlaneBoundaryCondition<2, 2>::* )(  )const)( &::PlaneBoundaryCondition< 2, 2 >::rGetPointOnPlane )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PlaneBoundaryCondition_less__3_comma__3__greater__wrapper, bp::bases< AbstractCellPopulationBoundaryCondition< 3, 3 > > >( "PlaneBoundaryCondition3_3", bp::init< AbstractCellPopulation< 3, 3 > *, boost::numeric::ublas::c_vector< double, 3 >, boost::numeric::ublas::c_vector< double, 3 > >(( bp::arg("pCellPopulation"), bp::arg("point"), bp::arg("normal") )) )    
        .def( 
            "GetUseJiggledNodesOnPlane"
            , (bool ( ::PlaneBoundaryCondition<3, 3>::* )(  ))( &::PlaneBoundaryCondition< 3, 3 >::GetUseJiggledNodesOnPlane ) )    
        .def( 
            "ImposeBoundaryCondition"
            , (void ( ::PlaneBoundaryCondition<3, 3>::* )( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & ))(&::PlaneBoundaryCondition< 3, 3 >::ImposeBoundaryCondition)
            , (void ( PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::* )( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & ))(&PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::default_ImposeBoundaryCondition)
            , ( bp::arg("rOldLocations") ) )    
        .def( 
            "OutputCellPopulationBoundaryConditionParameters"
            , (void ( ::PlaneBoundaryCondition<3, 3>::* )( ::out_stream & ))(&::PlaneBoundaryCondition< 3, 3 >::OutputCellPopulationBoundaryConditionParameters)
            , (void ( PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::default_OutputCellPopulationBoundaryConditionParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetUseJiggledNodesOnPlane"
            , (void ( ::PlaneBoundaryCondition<3, 3>::* )( bool ))( &::PlaneBoundaryCondition< 3, 3 >::SetUseJiggledNodesOnPlane )
            , ( bp::arg("useJiggledNodesOnPlane") ) )    
        .def( 
            "VerifyBoundaryCondition"
            , (bool ( ::PlaneBoundaryCondition<3, 3>::* )(  ))(&::PlaneBoundaryCondition< 3, 3 >::VerifyBoundaryCondition)
            , (bool ( PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::* )(  ))(&PlaneBoundaryCondition_less__3_comma__3__greater__wrapper::default_VerifyBoundaryCondition) )    
        .def( 
            "rGetNormalToPlane"
            , (::boost::numeric::ublas::c_vector< double, 3 > const & ( ::PlaneBoundaryCondition<3, 3>::* )(  )const)( &::PlaneBoundaryCondition< 3, 3 >::rGetNormalToPlane )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "rGetPointOnPlane"
            , (::boost::numeric::ublas::c_vector< double, 3 > const & ( ::PlaneBoundaryCondition<3, 3>::* )(  )const)( &::PlaneBoundaryCondition< 3, 3 >::rGetPointOnPlane )
            , bp::return_value_policy< bp::copy_const_reference >() );

    { //::PottsBasedCellPopulation< 2 >
        typedef bp::class_< PottsBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 2 > >, boost::noncopyable > PottsBasedCellPopulation2_exposer_t;
        PottsBasedCellPopulation2_exposer_t PottsBasedCellPopulation2_exposer = PottsBasedCellPopulation2_exposer_t( "PottsBasedCellPopulation2", bp::init< PottsMesh< 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< bool, bool, std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        bp::scope PottsBasedCellPopulation2_scope( PottsBasedCellPopulation2_exposer );
        PottsBasedCellPopulation2_exposer.def( bp::init< PottsMesh< 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 2 > &, PottsBasedCellPopulation< 2 > >();
        { //::PottsBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::PottsBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AddCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::PottsBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::AddUpdateRule
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::PottsBasedCellPopulation< 2 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::CreateElementTessellation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CreateElementTessellation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "CreateElementTessellation"
                , CreateElementTessellation_function_type( &::PottsBasedCellPopulation< 2 >::CreateElementTessellation ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::CreateMutableMesh
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CreateMutableMesh_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "CreateMutableMesh"
                , CreateMutableMesh_function_type( &::PottsBasedCellPopulation< 2 >::CreateMutableMesh ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::PottsBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::PottsBasedCellPopulation< 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::PottsBasedCellPopulation< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::Node< 2 > * ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            typedef ::Node< 2 > * ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNode_function_type)( unsigned int ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumElements
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type( &::PottsBasedCellPopulation< 2 >::GetNumElements ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumNodes
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::PottsBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumSweepsPerTimestep_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNumSweepsPerTimestep"
                , GetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 2 >::GetNumSweepsPerTimestep ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetTemperature
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetTemperature_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetTemperature"
                , GetTemperature_function_type( &::PottsBasedCellPopulation< 2 >::GetTemperature ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetTetrahedralMeshForPdeModifier
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::TetrahedralMesh< 2, 2 > * ( exported_class_t::*GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            typedef ::TetrahedralMesh< 2, 2 > * ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::PottsBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::GetWidth
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::PottsBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::PottsBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::OpenWritersFiles
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::PottsBasedCellPopulation< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::PottsBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::PottsBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::SetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNumSweepsPerTimestep_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetNumSweepsPerTimestep"
                , SetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 2 >::SetNumSweepsPerTimestep )
                , ( bp::arg("numSweepsPerTimestep") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::SetTemperature
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTemperature_function_type)( double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetTemperature"
                , SetTemperature_function_type( &::PottsBasedCellPopulation< 2 >::SetTemperature )
                , ( bp::arg("temperature") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::Update
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::PottsBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::UpdateCellLocations
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::PottsBasedCellPopulation< 2 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::PottsBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::WriteResultsToFiles
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::PottsBasedCellPopulation< 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::PottsBasedCellPopulation< 2 >::rGetMesh
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::PottsMesh< 2 > & ( exported_class_t::*rGetMesh_function_type)(  ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 2 >::rGetMesh
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::PottsMesh< 2 > const & ( exported_class_t::*rGetMesh_function_type)(  ) const;
            
            PottsBasedCellPopulation2_exposer.def( 
                "rGetMesh"
                , rGetMesh_function_type( &::PottsBasedCellPopulation< 2 >::rGetMesh )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &PottsBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            PottsBasedCellPopulation2_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::AbstractOnLatticeCellPopulation< 2 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::AbstractOnLatticeCellPopulation< 2 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 2 >::SetNode
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 2 >::SetNode)
                , default_SetNode_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef PottsBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            PottsBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&PottsBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        PottsBasedCellPopulation2_exposer.def("AddCellWriterCellLabelWriter", &PottsBasedCellPopulation<2>::AddCellWriter<CellLabelWriter>);
    }

    { //::PottsBasedCellPopulation< 3 >
        typedef bp::class_< PottsBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 3 > >, boost::noncopyable > PottsBasedCellPopulation3_exposer_t;
        PottsBasedCellPopulation3_exposer_t PottsBasedCellPopulation3_exposer = PottsBasedCellPopulation3_exposer_t( "PottsBasedCellPopulation3", bp::init< PottsMesh< 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< bool, bool, std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        bp::scope PottsBasedCellPopulation3_scope( PottsBasedCellPopulation3_exposer );
        PottsBasedCellPopulation3_exposer.def( bp::init< PottsMesh< 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 3 > &, PottsBasedCellPopulation< 3 > >();
        { //::PottsBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::PottsBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::PottsBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::PottsBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::AddCell
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::PottsBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::AddUpdateRule
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::PottsBasedCellPopulation< 3 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::CreateElementTessellation
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*CreateElementTessellation_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "CreateElementTessellation"
                , CreateElementTessellation_function_type( &::PottsBasedCellPopulation< 3 >::CreateElementTessellation ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::CreateMutableMesh
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*CreateMutableMesh_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "CreateMutableMesh"
                , CreateMutableMesh_function_type( &::PottsBasedCellPopulation< 3 >::CreateMutableMesh ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::PottsBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetLocationOfCellCentre
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::PottsBasedCellPopulation< 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetNeighbouringLocationIndices
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::PottsBasedCellPopulation< 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetNode
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::Node< 3 > * ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            typedef ::Node< 3 > * ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetNode_function_type)( unsigned int ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetNumElements
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type( &::PottsBasedCellPopulation< 3 >::GetNumElements ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetNumNodes
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::PottsBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumSweepsPerTimestep_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetNumSweepsPerTimestep"
                , GetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 3 >::GetNumSweepsPerTimestep ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetTemperature
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetTemperature_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetTemperature"
                , GetTemperature_function_type( &::PottsBasedCellPopulation< 3 >::GetTemperature ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetTetrahedralMeshForPdeModifier
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::TetrahedralMesh< 3, 3 > * ( exported_class_t::*GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            typedef ::TetrahedralMesh< 3, 3 > * ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetTetrahedralMeshForPdeModifier_function_type)(  ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::PottsBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::GetWidth
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::PottsBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::PottsBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::OpenWritersFiles
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::PottsBasedCellPopulation< 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::PottsBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::PottsBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::SetNumSweepsPerTimestep
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNumSweepsPerTimestep_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "SetNumSweepsPerTimestep"
                , SetNumSweepsPerTimestep_function_type( &::PottsBasedCellPopulation< 3 >::SetNumSweepsPerTimestep )
                , ( bp::arg("numSweepsPerTimestep") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::SetTemperature
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetTemperature_function_type)( double ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "SetTemperature"
                , SetTemperature_function_type( &::PottsBasedCellPopulation< 3 >::SetTemperature )
                , ( bp::arg("temperature") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::Update
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::PottsBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::UpdateCellLocations
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::PottsBasedCellPopulation< 3 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::PottsBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::WriteResultsToFiles
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::PottsBasedCellPopulation< 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
        { //::PottsBasedCellPopulation< 3 >::rGetMesh
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::PottsMesh< 3 > & ( exported_class_t::*rGetMesh_function_type)(  ) ;
            
        
        }
        { //::PottsBasedCellPopulation< 3 >::rGetMesh
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::PottsMesh< 3 > const & ( exported_class_t::*rGetMesh_function_type)(  ) const;
            
            PottsBasedCellPopulation3_exposer.def( 
                "rGetMesh"
                , rGetMesh_function_type( &::PottsBasedCellPopulation< 3 >::rGetMesh )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &PottsBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            PottsBasedCellPopulation3_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::SetNode
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef PottsBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( PottsBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            PottsBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&PottsBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        PottsBasedCellPopulation3_exposer.def("AddCellWriterCellLabelWriter", &PottsBasedCellPopulation<3>::AddCellWriter<CellLabelWriter>);
    }

    bp::class_< RandomCellKiller_less__2__greater__wrapper, bp::bases< AbstractCellKiller< 2 > > >( "RandomCellKiller2", bp::init< AbstractCellPopulation< 2, 2 > *, double >(( bp::arg("pCellPopulation"), bp::arg("probabilityOfDeathInAnHour") )) )    
        .def( 
            "CheckAndLabelCellsForApoptosisOrDeath"
            , (void ( ::RandomCellKiller<2>::* )(  ))(&::RandomCellKiller< 2 >::CheckAndLabelCellsForApoptosisOrDeath)
            , (void ( RandomCellKiller_less__2__greater__wrapper::* )(  ))(&RandomCellKiller_less__2__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) )    
        .def( 
            "CheckAndLabelSingleCellForApoptosis"
            , (void ( ::RandomCellKiller<2>::* )( ::CellPtr ))( &::RandomCellKiller< 2 >::CheckAndLabelSingleCellForApoptosis )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetDeathProbabilityInAnHour"
            , (double ( ::RandomCellKiller<2>::* )(  )const)( &::RandomCellKiller< 2 >::GetDeathProbabilityInAnHour ) )    
        .def( 
            "OutputCellKillerParameters"
            , (void ( ::RandomCellKiller<2>::* )( ::out_stream & ))(&::RandomCellKiller< 2 >::OutputCellKillerParameters)
            , (void ( RandomCellKiller_less__2__greater__wrapper::* )( ::out_stream & ))(&RandomCellKiller_less__2__greater__wrapper::default_OutputCellKillerParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< RandomCellKiller_less__3__greater__wrapper, bp::bases< AbstractCellKiller< 3 > > >( "RandomCellKiller3", bp::init< AbstractCellPopulation< 3, 3 > *, double >(( bp::arg("pCellPopulation"), bp::arg("probabilityOfDeathInAnHour") )) )    
        .def( 
            "CheckAndLabelCellsForApoptosisOrDeath"
            , (void ( ::RandomCellKiller<3>::* )(  ))(&::RandomCellKiller< 3 >::CheckAndLabelCellsForApoptosisOrDeath)
            , (void ( RandomCellKiller_less__3__greater__wrapper::* )(  ))(&RandomCellKiller_less__3__greater__wrapper::default_CheckAndLabelCellsForApoptosisOrDeath) )    
        .def( 
            "CheckAndLabelSingleCellForApoptosis"
            , (void ( ::RandomCellKiller<3>::* )( ::CellPtr ))( &::RandomCellKiller< 3 >::CheckAndLabelSingleCellForApoptosis )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetDeathProbabilityInAnHour"
            , (double ( ::RandomCellKiller<3>::* )(  )const)( &::RandomCellKiller< 3 >::GetDeathProbabilityInAnHour ) )    
        .def( 
            "OutputCellKillerParameters"
            , (void ( ::RandomCellKiller<3>::* )( ::out_stream & ))(&::RandomCellKiller< 3 >::OutputCellKillerParameters)
            , (void ( RandomCellKiller_less__3__greater__wrapper::* )( ::out_stream & ))(&RandomCellKiller_less__3__greater__wrapper::default_OutputCellKillerParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< SimpleOxygenBasedCellCycleModel_wrapper, bp::bases< AbstractSimplePhaseBasedCellCycleModel >, boost::noncopyable >( "SimpleOxygenBasedCellCycleModel", bp::init< SimpleOxygenBasedCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "CreateCellCycleModel"
            , (::AbstractCellCycleModel * ( ::SimpleOxygenBasedCellCycleModel::* )(  ))(&::SimpleOxygenBasedCellCycleModel::CreateCellCycleModel)
            , (::AbstractCellCycleModel * ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_CreateCellCycleModel)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetCriticalHypoxicDuration"
            , (double ( ::SimpleOxygenBasedCellCycleModel::* )(  )const)( &::SimpleOxygenBasedCellCycleModel::GetCriticalHypoxicDuration ) )    
        .def( 
            "GetCurrentHypoxiaOnsetTime"
            , (double ( ::SimpleOxygenBasedCellCycleModel::* )(  )const)( &::SimpleOxygenBasedCellCycleModel::GetCurrentHypoxiaOnsetTime ) )    
        .def( 
            "GetCurrentHypoxicDuration"
            , (double ( ::SimpleOxygenBasedCellCycleModel::* )(  )const)( &::SimpleOxygenBasedCellCycleModel::GetCurrentHypoxicDuration ) )    
        .def( 
            "GetHypoxicConcentration"
            , (double ( ::SimpleOxygenBasedCellCycleModel::* )(  )const)( &::SimpleOxygenBasedCellCycleModel::GetHypoxicConcentration ) )    
        .def( 
            "GetQuiescentConcentration"
            , (double ( ::SimpleOxygenBasedCellCycleModel::* )(  )const)( &::SimpleOxygenBasedCellCycleModel::GetQuiescentConcentration ) )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )( ::out_stream & ))(&::SimpleOxygenBasedCellCycleModel::OutputCellCycleModelParameters)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )( ::out_stream & ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCriticalHypoxicDuration"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )( double ))( &::SimpleOxygenBasedCellCycleModel::SetCriticalHypoxicDuration )
            , ( bp::arg("criticalHypoxicDuration") ) )    
        .def( 
            "SetCurrentHypoxiaOnsetTime"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )( double ))( &::SimpleOxygenBasedCellCycleModel::SetCurrentHypoxiaOnsetTime )
            , ( bp::arg("currentHypoxiaOnsetTime") ) )    
        .def( 
            "SetHypoxicConcentration"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )( double ))( &::SimpleOxygenBasedCellCycleModel::SetHypoxicConcentration )
            , ( bp::arg("hypoxicConcentration") ) )    
        .def( 
            "SetQuiescentConcentration"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )( double ))( &::SimpleOxygenBasedCellCycleModel::SetQuiescentConcentration )
            , ( bp::arg("quiescentConcentration") ) )    
        .def( 
            "UpdateCellCyclePhase"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )(  ))(&::SimpleOxygenBasedCellCycleModel::UpdateCellCyclePhase)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_UpdateCellCyclePhase) )    
        .def( 
            "UpdateHypoxicDuration"
            , (void ( ::SimpleOxygenBasedCellCycleModel::* )(  ))( &::SimpleOxygenBasedCellCycleModel::UpdateHypoxicDuration ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG1Duration)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  )const)(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetG1Duration) )    
        .def( 
            "GetG2Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG2Duration)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  )const)(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetG2Duration) )    
        .def( 
            "GetMDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetMDuration)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  )const)(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetMDuration) )    
        .def( 
            "GetSDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetSDuration)
            , (double ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  )const)(&SimpleOxygenBasedCellCycleModel_wrapper::default_GetSDuration) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::Initialise)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::InitialiseDaughterCell)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ReadyToDivide)
            , (bool ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::ResetForDivision)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )( double ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) )    
        .def( 
            "SetG1Duration"
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )(  ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_SetG1Duration) )    
        .def( 
            "SetStemCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )( double ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_SetStemCellG1Duration)
            , ( bp::arg("stemCellG1Duration") ) )    
        .def( 
            "SetTransitCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration)
            , (void ( SimpleOxygenBasedCellCycleModel_wrapper::* )( double ))(&SimpleOxygenBasedCellCycleModel_wrapper::default_SetTransitCellG1Duration)
            , ( bp::arg("transitCellG1Duration") ) );

    bp::class_< SimpleTargetAreaModifier_less__2__greater__wrapper, bp::bases< AbstractTargetAreaModifier< 2 > > >( "SimpleTargetAreaModifier2", bp::init< >() )    
        .def( 
            "GetGrowthDuration"
            , (double ( ::SimpleTargetAreaModifier<2>::* )(  ))( &::SimpleTargetAreaModifier< 2 >::GetGrowthDuration ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::SimpleTargetAreaModifier<2>::* )( ::out_stream & ))(&::SimpleTargetAreaModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetGrowthDuration"
            , (void ( ::SimpleTargetAreaModifier<2>::* )( double ))( &::SimpleTargetAreaModifier< 2 >::SetGrowthDuration )
            , ( bp::arg("growthDuration") ) )    
        .def( 
            "UpdateTargetAreaOfCell"
            , (void ( ::SimpleTargetAreaModifier<2>::* )( ::CellPtr const ))(&::SimpleTargetAreaModifier< 2 >::UpdateTargetAreaOfCell)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::CellPtr const ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_UpdateTargetAreaOfCell)
            , ( bp::arg("pCell") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::AbstractTargetAreaModifier< 2 >::SetupSolve)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractTargetAreaModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractTargetAreaModifier< 2 >::UpdateAtEndOfTimeStep)
            , (void ( SimpleTargetAreaModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&SimpleTargetAreaModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< SimpleTargetAreaModifier_less__3__greater__wrapper, bp::bases< AbstractTargetAreaModifier< 3 > > >( "SimpleTargetAreaModifier3", bp::init< >() )    
        .def( 
            "GetGrowthDuration"
            , (double ( ::SimpleTargetAreaModifier<3>::* )(  ))( &::SimpleTargetAreaModifier< 3 >::GetGrowthDuration ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::SimpleTargetAreaModifier<3>::* )( ::out_stream & ))(&::SimpleTargetAreaModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetGrowthDuration"
            , (void ( ::SimpleTargetAreaModifier<3>::* )( double ))( &::SimpleTargetAreaModifier< 3 >::SetGrowthDuration )
            , ( bp::arg("growthDuration") ) )    
        .def( 
            "UpdateTargetAreaOfCell"
            , (void ( ::SimpleTargetAreaModifier<3>::* )( ::CellPtr const ))(&::SimpleTargetAreaModifier< 3 >::UpdateTargetAreaOfCell)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::CellPtr const ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_UpdateTargetAreaOfCell)
            , ( bp::arg("pCell") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::AbstractTargetAreaModifier< 3 >::SetupSolve)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::AbstractTargetAreaModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractTargetAreaModifier< 3 >::UpdateAtEndOfTimeStep)
            , (void ( SimpleTargetAreaModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&SimpleTargetAreaModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< SimulationTime_wrapper, boost::noncopyable >( "SimulationTime", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "Destroy"
            , (void (*)(  ))( &::SimulationTime::Destroy ) )    
        .def( 
            "GetTime"
            , (double ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTime ) )    
        .def( 
            "GetTimeStep"
            , (double ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTimeStep ) )    
        .def( 
            "GetTimeStepsElapsed"
            , (unsigned int ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTimeStepsElapsed ) )    
        .def( 
            "IncrementTimeOneStep"
            , (void ( ::SimulationTime::* )(  ))( &::SimulationTime::IncrementTimeOneStep ) )    
        .def( 
            "Instance"
            , (::SimulationTime * (*)(  ))( &::SimulationTime::Instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "IsEndTimeAndNumberOfTimeStepsSetUp"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsEndTimeAndNumberOfTimeStepsSetUp ) )    
        .def( 
            "IsFinished"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsFinished ) )    
        .def( 
            "IsStartTimeSetUp"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsStartTimeSetUp ) )    
        .def( 
            "ResetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationTime::* )( double const &,unsigned int const & ))( &::SimulationTime::ResetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("rEndTime"), bp::arg("rNumberOfTimeStepsInThisRun") ) )    
        .def( 
            "SetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationTime::* )( double,unsigned int ))( &::SimulationTime::SetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("endTime"), bp::arg("totalTimeStepsInSimulation") ) )    
        .def( 
            "SetStartTime"
            , (void ( ::SimulationTime::* )( double ))( &::SimulationTime::SetStartTime )
            , ( bp::arg("startTime") ) )    
        .staticmethod( "Destroy" )    
        .staticmethod( "Instance" );

    bp::class_< SphereGeometryBoundaryCondition_less__2__greater__wrapper, bp::bases< AbstractCellPopulationBoundaryCondition< 2, 2 > > >( "SphereGeometryBoundaryCondition2", bp::init< AbstractCellPopulation< 2, 2 > *, boost::numeric::ublas::c_vector< double, 2 >, double, bp::optional< double > >(( bp::arg("pCellPopulation"), bp::arg("centre"), bp::arg("radius"), bp::arg("distance")=1.0000000000000001E-5 )) )    
        .def( 
            "GetRadiusOfSphere"
            , (double ( ::SphereGeometryBoundaryCondition<2>::* )(  )const)( &::SphereGeometryBoundaryCondition< 2 >::GetRadiusOfSphere ) )    
        .def( 
            "ImposeBoundaryCondition"
            , (void ( ::SphereGeometryBoundaryCondition<2>::* )( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & ))(&::SphereGeometryBoundaryCondition< 2 >::ImposeBoundaryCondition)
            , (void ( SphereGeometryBoundaryCondition_less__2__greater__wrapper::* )( ::std::map< Node<2> *, boost::numeric::ublas::c_vector<double, 2> > const & ))(&SphereGeometryBoundaryCondition_less__2__greater__wrapper::default_ImposeBoundaryCondition)
            , ( bp::arg("rOldLocations") ) )    
        .def( 
            "OutputCellPopulationBoundaryConditionParameters"
            , (void ( ::SphereGeometryBoundaryCondition<2>::* )( ::out_stream & ))(&::SphereGeometryBoundaryCondition< 2 >::OutputCellPopulationBoundaryConditionParameters)
            , (void ( SphereGeometryBoundaryCondition_less__2__greater__wrapper::* )( ::out_stream & ))(&SphereGeometryBoundaryCondition_less__2__greater__wrapper::default_OutputCellPopulationBoundaryConditionParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "VerifyBoundaryCondition"
            , (bool ( ::SphereGeometryBoundaryCondition<2>::* )(  ))(&::SphereGeometryBoundaryCondition< 2 >::VerifyBoundaryCondition)
            , (bool ( SphereGeometryBoundaryCondition_less__2__greater__wrapper::* )(  ))(&SphereGeometryBoundaryCondition_less__2__greater__wrapper::default_VerifyBoundaryCondition) )    
        .def( 
            "rGetCentreOfSphere"
            , (::boost::numeric::ublas::c_vector< double, 2 > const & ( ::SphereGeometryBoundaryCondition<2>::* )(  )const)( &::SphereGeometryBoundaryCondition< 2 >::rGetCentreOfSphere )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< SphereGeometryBoundaryCondition_less__3__greater__wrapper, bp::bases< AbstractCellPopulationBoundaryCondition< 3, 3 > > >( "SphereGeometryBoundaryCondition3", bp::init< AbstractCellPopulation< 3, 3 > *, boost::numeric::ublas::c_vector< double, 3 >, double, bp::optional< double > >(( bp::arg("pCellPopulation"), bp::arg("centre"), bp::arg("radius"), bp::arg("distance")=1.0000000000000001E-5 )) )    
        .def( 
            "GetRadiusOfSphere"
            , (double ( ::SphereGeometryBoundaryCondition<3>::* )(  )const)( &::SphereGeometryBoundaryCondition< 3 >::GetRadiusOfSphere ) )    
        .def( 
            "ImposeBoundaryCondition"
            , (void ( ::SphereGeometryBoundaryCondition<3>::* )( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & ))(&::SphereGeometryBoundaryCondition< 3 >::ImposeBoundaryCondition)
            , (void ( SphereGeometryBoundaryCondition_less__3__greater__wrapper::* )( ::std::map< Node<3> *, boost::numeric::ublas::c_vector<double, 3> > const & ))(&SphereGeometryBoundaryCondition_less__3__greater__wrapper::default_ImposeBoundaryCondition)
            , ( bp::arg("rOldLocations") ) )    
        .def( 
            "OutputCellPopulationBoundaryConditionParameters"
            , (void ( ::SphereGeometryBoundaryCondition<3>::* )( ::out_stream & ))(&::SphereGeometryBoundaryCondition< 3 >::OutputCellPopulationBoundaryConditionParameters)
            , (void ( SphereGeometryBoundaryCondition_less__3__greater__wrapper::* )( ::out_stream & ))(&SphereGeometryBoundaryCondition_less__3__greater__wrapper::default_OutputCellPopulationBoundaryConditionParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "VerifyBoundaryCondition"
            , (bool ( ::SphereGeometryBoundaryCondition<3>::* )(  ))(&::SphereGeometryBoundaryCondition< 3 >::VerifyBoundaryCondition)
            , (bool ( SphereGeometryBoundaryCondition_less__3__greater__wrapper::* )(  ))(&SphereGeometryBoundaryCondition_less__3__greater__wrapper::default_VerifyBoundaryCondition) )    
        .def( 
            "rGetCentreOfSphere"
            , (::boost::numeric::ublas::c_vector< double, 3 > const & ( ::SphereGeometryBoundaryCondition<3>::* )(  )const)( &::SphereGeometryBoundaryCondition< 3 >::rGetCentreOfSphere )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< StemCellProliferativeType, bp::bases< AbstractCellProliferativeType > >( "StemCellProliferativeType", bp::init< >() );

    bp::class_< SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 2 > > >( "SurfaceAreaConstraintPottsUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&::SurfaceAreaConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution)
            , (double ( SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetDeformationEnergyParameter"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )(  ))( &::SurfaceAreaConstraintPottsUpdateRule< 2 >::GetDeformationEnergyParameter ) )    
        .def( 
            "GetMatureCellTargetSurfaceArea"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )(  )const)( &::SurfaceAreaConstraintPottsUpdateRule< 2 >::GetMatureCellTargetSurfaceArea ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )( ::out_stream & ))(&::SurfaceAreaConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&SurfaceAreaConstraintPottsUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDeformationEnergyParameter"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )( double ))( &::SurfaceAreaConstraintPottsUpdateRule< 2 >::SetDeformationEnergyParameter )
            , ( bp::arg("deformationEnergyParameter") ) )    
        .def( 
            "SetMatureCellTargetSurfaceArea"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<2>::* )( double ))( &::SurfaceAreaConstraintPottsUpdateRule< 2 >::SetMatureCellTargetSurfaceArea )
            , ( bp::arg("matureCellTargetSurfaceArea") ) );

    bp::class_< SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 3 > > >( "SurfaceAreaConstraintPottsUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&::SurfaceAreaConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution)
            , (double ( SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetDeformationEnergyParameter"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )(  ))( &::SurfaceAreaConstraintPottsUpdateRule< 3 >::GetDeformationEnergyParameter ) )    
        .def( 
            "GetMatureCellTargetSurfaceArea"
            , (double ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )(  )const)( &::SurfaceAreaConstraintPottsUpdateRule< 3 >::GetMatureCellTargetSurfaceArea ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )( ::out_stream & ))(&::SurfaceAreaConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&SurfaceAreaConstraintPottsUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDeformationEnergyParameter"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )( double ))( &::SurfaceAreaConstraintPottsUpdateRule< 3 >::SetDeformationEnergyParameter )
            , ( bp::arg("deformationEnergyParameter") ) )    
        .def( 
            "SetMatureCellTargetSurfaceArea"
            , (void ( ::SurfaceAreaConstraintPottsUpdateRule<3>::* )( double ))( &::SurfaceAreaConstraintPottsUpdateRule< 3 >::SetMatureCellTargetSurfaceArea )
            , ( bp::arg("matureCellTargetSurfaceArea") ) );

    bp::class_< TransitCellProliferativeType, bp::bases< AbstractCellProliferativeType > >( "TransitCellProliferativeType", bp::init< >() );

    bp::class_< UniformCellCycleModel_wrapper, bp::bases< AbstractSimpleCellCycleModel >, boost::noncopyable >( "UniformCellCycleModel", bp::init< UniformCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "CreateCellCycleModel"
            , (::AbstractCellCycleModel * ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::CreateCellCycleModel)
            , (::AbstractCellCycleModel * ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_CreateCellCycleModel)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetMaxCellCycleDuration"
            , (double ( ::UniformCellCycleModel::* )(  ))( &::UniformCellCycleModel::GetMaxCellCycleDuration ) )    
        .def( 
            "GetMinCellCycleDuration"
            , (double ( ::UniformCellCycleModel::* )(  ))( &::UniformCellCycleModel::GetMinCellCycleDuration ) )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::UniformCellCycleModel::* )( ::out_stream & ))(&::UniformCellCycleModel::OutputCellCycleModelParameters)
            , (void ( UniformCellCycleModel_wrapper::* )( ::out_stream & ))(&UniformCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::SetCellCycleDuration)
            , (void ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_SetCellCycleDuration) )    
        .def( 
            "SetMaxCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )( double ))( &::UniformCellCycleModel::SetMaxCellCycleDuration )
            , ( bp::arg("maxCellCycleDuration") ) )    
        .def( 
            "SetMinCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )( double ))( &::UniformCellCycleModel::SetMinCellCycleDuration )
            , ( bp::arg("minCellCycleDuration") ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::Initialise)
            , (void ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::InitialiseDaughterCell)
            , (void ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::ReadyToDivide)
            , (bool ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimpleCellCycleModel::* )(  ))(&::AbstractSimpleCellCycleModel::ResetForDivision)
            , (void ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( UniformCellCycleModel_wrapper::* )( double ))(&UniformCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) );

    bp::class_< UniformG1GenerationalCellCycleModel_wrapper, bp::bases< AbstractSimpleGenerationalCellCycleModel >, boost::noncopyable >( "UniformG1GenerationalCellCycleModel", bp::init< UniformG1GenerationalCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "CreateCellCycleModel"
            , (::AbstractCellCycleModel * ( ::UniformG1GenerationalCellCycleModel::* )(  ))(&::UniformG1GenerationalCellCycleModel::CreateCellCycleModel)
            , (::AbstractCellCycleModel * ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_CreateCellCycleModel)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::UniformG1GenerationalCellCycleModel::* )( ::out_stream & ))(&::UniformG1GenerationalCellCycleModel::OutputCellCycleModelParameters)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )( ::out_stream & ))(&UniformG1GenerationalCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetG1Duration"
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_SetG1Duration) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetG1Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG1Duration)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  )const)(&UniformG1GenerationalCellCycleModel_wrapper::default_GetG1Duration) )    
        .def( 
            "GetG2Duration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetG2Duration)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  )const)(&UniformG1GenerationalCellCycleModel_wrapper::default_GetG2Duration) )    
        .def( 
            "GetMDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetMDuration)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  )const)(&UniformG1GenerationalCellCycleModel_wrapper::default_GetMDuration) )    
        .def( 
            "GetSDuration"
            , (double ( ::AbstractPhaseBasedCellCycleModel::* )(  )const)(&::AbstractPhaseBasedCellCycleModel::GetSDuration)
            , (double ( UniformG1GenerationalCellCycleModel_wrapper::* )(  )const)(&UniformG1GenerationalCellCycleModel_wrapper::default_GetSDuration) )    
        .def( 
            "Initialise"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::Initialise)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_Initialise) )    
        .def( 
            "InitialiseDaughterCell"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )(  ))(&::AbstractSimpleGenerationalCellCycleModel::InitialiseDaughterCell)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_InitialiseDaughterCell) )    
        .def( 
            "ReadyToDivide"
            , (bool ( ::AbstractPhaseBasedCellCycleModel::* )(  ))(&::AbstractPhaseBasedCellCycleModel::ReadyToDivide)
            , (bool ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_ReadyToDivide) )    
        .def( 
            "ResetForDivision"
            , (void ( ::AbstractSimpleGenerationalCellCycleModel::* )(  ))(&::AbstractSimpleGenerationalCellCycleModel::ResetForDivision)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_ResetForDivision) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )( double ))(&UniformG1GenerationalCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) )    
        .def( 
            "SetStemCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetStemCellG1Duration)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )( double ))(&UniformG1GenerationalCellCycleModel_wrapper::default_SetStemCellG1Duration)
            , ( bp::arg("stemCellG1Duration") ) )    
        .def( 
            "SetTransitCellG1Duration"
            , (void ( ::AbstractPhaseBasedCellCycleModel::* )( double ))(&::AbstractPhaseBasedCellCycleModel::SetTransitCellG1Duration)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )( double ))(&UniformG1GenerationalCellCycleModel_wrapper::default_SetTransitCellG1Duration)
            , ( bp::arg("transitCellG1Duration") ) )    
        .def( 
            "UpdateCellCyclePhase"
            , (void ( ::AbstractSimplePhaseBasedCellCycleModel::* )(  ))(&::AbstractSimplePhaseBasedCellCycleModel::UpdateCellCyclePhase)
            , (void ( UniformG1GenerationalCellCycleModel_wrapper::* )(  ))(&UniformG1GenerationalCellCycleModel_wrapper::default_UpdateCellCyclePhase) );

    { //::VertexBasedCellPopulation< 2 >
        typedef bp::class_< VertexBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractOffLatticeCellPopulation< 2, 2 > >, boost::noncopyable > VertexBasedCellPopulation2_exposer_t;
        VertexBasedCellPopulation2_exposer_t VertexBasedCellPopulation2_exposer = VertexBasedCellPopulation2_exposer_t( "VertexBasedCellPopulation2", bp::init< MutableVertexMesh< 2, 2 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< bool, bool, std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        bp::scope VertexBasedCellPopulation2_scope( VertexBasedCellPopulation2_exposer );
        VertexBasedCellPopulation2_exposer.def( bp::init< MutableVertexMesh< 2, 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< MutableVertexMesh< 2, 2 > &, VertexBasedCellPopulation< 2 > >();
        { //::VertexBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::VertexBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::VertexBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::VertexBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AddCell
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::VertexBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AddCellIdOfT2Swap
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellIdOfT2Swap_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AddCellIdOfT2Swap"
                , AddCellIdOfT2Swap_function_type( &::VertexBasedCellPopulation< 2 >::AddCellIdOfT2Swap )
                , ( bp::arg("idOfT2Swap") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AddLocationOfT2Swap
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddLocationOfT2Swap_function_type)( ::boost::numeric::ublas::c_vector< double, 2 > ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AddLocationOfT2Swap"
                , AddLocationOfT2Swap_function_type( &::VertexBasedCellPopulation< 2 >::AddLocationOfT2Swap )
                , ( bp::arg("locationOfT2Swap") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::AddNode
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 2 > * ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AddNode_function_type)( ::Node< 2 > * ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::VertexBasedCellPopulation< 2 >::AddNode)
                , default_AddNode_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::CheckForStepSizeException
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 2 > &,double ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::VertexBasedCellPopulation< 2 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::ClearLocationsAndCellIdsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*ClearLocationsAndCellIdsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "ClearLocationsAndCellIdsOfT2Swaps"
                , ClearLocationsAndCellIdsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 2 >::ClearLocationsAndCellIdsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::VertexBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetCellIdsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellIdsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetCellIdsOfT2Swaps"
                , GetCellIdsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 2 >::GetCellIdsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetDampingConstant
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::VertexBasedCellPopulation< 2 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetDefaultTimeStep
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::VertexBasedCellPopulation< 2 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetLocationOfCellCentre
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::VertexBasedCellPopulation< 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetLocationsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 2> > ( exported_class_t::*GetLocationsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetLocationsOfT2Swaps"
                , GetLocationsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 2 >::GetLocationsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetNeighbouringLocationIndices
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::VertexBasedCellPopulation< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetNeighbouringNodeIndices
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::VertexBasedCellPopulation< 2 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetNumElements
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type( &::VertexBasedCellPopulation< 2 >::GetNumElements ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetNumNodes
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::VertexBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetOutputCellRearrangementLocations
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputCellRearrangementLocations_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetOutputCellRearrangementLocations"
                , GetOutputCellRearrangementLocations_function_type( &::VertexBasedCellPopulation< 2 >::GetOutputCellRearrangementLocations ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetRosetteRankOfCell
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetRosetteRankOfCell_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetRosetteRankOfCell"
                , GetRosetteRankOfCell_function_type( &::VertexBasedCellPopulation< 2 >::GetRosetteRankOfCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetVertexBasedDivisionRule
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractVertexBasedDivisionRule< 2 > > ( exported_class_t::*GetVertexBasedDivisionRule_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetVertexBasedDivisionRule"
                , GetVertexBasedDivisionRule_function_type( &::VertexBasedCellPopulation< 2 >::GetVertexBasedDivisionRule ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::VertexBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::GetWidth
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::VertexBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::VertexBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::VertexBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::OpenWritersFiles
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::VertexBasedCellPopulation< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::VertexBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::VertexBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::SetNode
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 2 > & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::VertexBasedCellPopulation< 2 >::SetNode)
                , default_SetNode_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::SetOutputCellRearrangementLocations
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputCellRearrangementLocations_function_type)( bool ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "SetOutputCellRearrangementLocations"
                , SetOutputCellRearrangementLocations_function_type( &::VertexBasedCellPopulation< 2 >::SetOutputCellRearrangementLocations )
                , ( bp::arg("outputCellRearrangementLocations") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::SetVertexBasedDivisionRule
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVertexBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractVertexBasedDivisionRule< 2 > > ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "SetVertexBasedDivisionRule"
                , SetVertexBasedDivisionRule_function_type( &::VertexBasedCellPopulation< 2 >::SetVertexBasedDivisionRule )
                , ( bp::arg("pVertexBasedDivisionRule") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::SimulationSetupHook
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::VertexBasedCellPopulation< 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::Update
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::VertexBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::VertexBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::VertexBasedCellPopulation< 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &VertexBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsRoomToDivide
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 2, 2 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef VertexBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( VertexBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            VertexBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&VertexBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::VertexBasedCellPopulation< 3 >
        typedef bp::class_< VertexBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractOffLatticeCellPopulation< 3, 3 > >, boost::noncopyable > VertexBasedCellPopulation3_exposer_t;
        VertexBasedCellPopulation3_exposer_t VertexBasedCellPopulation3_exposer = VertexBasedCellPopulation3_exposer_t( "VertexBasedCellPopulation3", bp::init< MutableVertexMesh< 3, 3 > &, std::vector< boost::shared_ptr<Cell> > &, bp::optional< bool, bool, std::vector< unsigned int > > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(true), bp::arg("locationIndices")=std::vector<unsigned int>() )) );
        bp::scope VertexBasedCellPopulation3_scope( VertexBasedCellPopulation3_exposer );
        VertexBasedCellPopulation3_exposer.def( bp::init< MutableVertexMesh< 3, 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< MutableVertexMesh< 3, 3 > &, VertexBasedCellPopulation< 3 > >();
        { //::VertexBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::VertexBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::VertexBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::VertexBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AddCell
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::VertexBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AddCellIdOfT2Swap
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellIdOfT2Swap_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AddCellIdOfT2Swap"
                , AddCellIdOfT2Swap_function_type( &::VertexBasedCellPopulation< 3 >::AddCellIdOfT2Swap )
                , ( bp::arg("idOfT2Swap") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AddLocationOfT2Swap
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddLocationOfT2Swap_function_type)( ::boost::numeric::ublas::c_vector< double, 3 > ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AddLocationOfT2Swap"
                , AddLocationOfT2Swap_function_type( &::VertexBasedCellPopulation< 3 >::AddLocationOfT2Swap )
                , ( bp::arg("locationOfT2Swap") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::AddNode
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*AddNode_function_type)( ::Node< 3 > * ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AddNode_function_type)( ::Node< 3 > * ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AddNode"
                , AddNode_function_type(&::VertexBasedCellPopulation< 3 >::AddNode)
                , default_AddNode_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AddNode)
                , ( bp::arg("pNewNode") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::CheckForStepSizeException
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_CheckForStepSizeException_function_type)( unsigned int,::boost::numeric::ublas::c_vector< double, 3 > &,double ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "CheckForStepSizeException"
                , CheckForStepSizeException_function_type(&::VertexBasedCellPopulation< 3 >::CheckForStepSizeException)
                , default_CheckForStepSizeException_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_CheckForStepSizeException)
                , ( bp::arg("nodeIndex"), bp::arg("rDisplacement"), bp::arg("dt") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::ClearLocationsAndCellIdsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*ClearLocationsAndCellIdsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "ClearLocationsAndCellIdsOfT2Swaps"
                , ClearLocationsAndCellIdsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 3 >::ClearLocationsAndCellIdsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::VertexBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetCellIdsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetCellIdsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetCellIdsOfT2Swaps"
                , GetCellIdsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 3 >::GetCellIdsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetDampingConstant
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDampingConstant_function_type)( unsigned int ) ;
            typedef double ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetDampingConstant_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetDampingConstant"
                , GetDampingConstant_function_type(&::VertexBasedCellPopulation< 3 >::GetDampingConstant)
                , default_GetDampingConstant_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetDampingConstant)
                , ( bp::arg("nodeIndex") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetDefaultTimeStep
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::VertexBasedCellPopulation< 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetLocationOfCellCentre
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::VertexBasedCellPopulation< 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetLocationsOfT2Swaps
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ( exported_class_t::*GetLocationsOfT2Swaps_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetLocationsOfT2Swaps"
                , GetLocationsOfT2Swaps_function_type( &::VertexBasedCellPopulation< 3 >::GetLocationsOfT2Swaps ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetNeighbouringLocationIndices
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::VertexBasedCellPopulation< 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::VertexBasedCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetNumElements
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumElements_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetNumElements"
                , GetNumElements_function_type( &::VertexBasedCellPopulation< 3 >::GetNumElements ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetNumNodes
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::VertexBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetOutputCellRearrangementLocations
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*GetOutputCellRearrangementLocations_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetOutputCellRearrangementLocations"
                , GetOutputCellRearrangementLocations_function_type( &::VertexBasedCellPopulation< 3 >::GetOutputCellRearrangementLocations ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetRosetteRankOfCell
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetRosetteRankOfCell_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetRosetteRankOfCell"
                , GetRosetteRankOfCell_function_type( &::VertexBasedCellPopulation< 3 >::GetRosetteRankOfCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetVertexBasedDivisionRule
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractVertexBasedDivisionRule< 3 > > ( exported_class_t::*GetVertexBasedDivisionRule_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetVertexBasedDivisionRule"
                , GetVertexBasedDivisionRule_function_type( &::VertexBasedCellPopulation< 3 >::GetVertexBasedDivisionRule ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::VertexBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::GetWidth
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::VertexBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::VertexBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::VertexBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::OpenWritersFiles
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::VertexBasedCellPopulation< 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::VertexBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::VertexBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::SetNode
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::VertexBasedCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::SetOutputCellRearrangementLocations
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputCellRearrangementLocations_function_type)( bool ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "SetOutputCellRearrangementLocations"
                , SetOutputCellRearrangementLocations_function_type( &::VertexBasedCellPopulation< 3 >::SetOutputCellRearrangementLocations )
                , ( bp::arg("outputCellRearrangementLocations") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::SetVertexBasedDivisionRule
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVertexBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractVertexBasedDivisionRule< 3 > > ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "SetVertexBasedDivisionRule"
                , SetVertexBasedDivisionRule_function_type( &::VertexBasedCellPopulation< 3 >::SetVertexBasedDivisionRule )
                , ( bp::arg("pVertexBasedDivisionRule") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::SimulationSetupHook
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::VertexBasedCellPopulation< 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::Update
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::VertexBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::VertexBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::VertexBasedCellPopulation< 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &VertexBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsRoomToDivide
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodeLocations_function_type)( double ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_UpdateNodeLocations_function_type)( double ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "UpdateNodeLocations"
                , UpdateNodeLocations_function_type(&::AbstractOffLatticeCellPopulation< 3, 3 >::UpdateNodeLocations)
                , default_UpdateNodeLocations_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_UpdateNodeLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef VertexBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( VertexBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            VertexBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&VertexBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    bp::class_< VolumeConstraintPottsUpdateRule_less__2__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 2 > > >( "VolumeConstraintPottsUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::VolumeConstraintPottsUpdateRule<2>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&::VolumeConstraintPottsUpdateRule< 2 >::EvaluateHamiltonianContribution)
            , (double ( VolumeConstraintPottsUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 2 > & ))(&VolumeConstraintPottsUpdateRule_less__2__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetDeformationEnergyParameter"
            , (double ( ::VolumeConstraintPottsUpdateRule<2>::* )(  ))( &::VolumeConstraintPottsUpdateRule< 2 >::GetDeformationEnergyParameter ) )    
        .def( 
            "GetMatureCellTargetVolume"
            , (double ( ::VolumeConstraintPottsUpdateRule<2>::* )(  )const)( &::VolumeConstraintPottsUpdateRule< 2 >::GetMatureCellTargetVolume ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::VolumeConstraintPottsUpdateRule<2>::* )( ::out_stream & ))(&::VolumeConstraintPottsUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( VolumeConstraintPottsUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&VolumeConstraintPottsUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDeformationEnergyParameter"
            , (void ( ::VolumeConstraintPottsUpdateRule<2>::* )( double ))( &::VolumeConstraintPottsUpdateRule< 2 >::SetDeformationEnergyParameter )
            , ( bp::arg("deformationEnergyParameter") ) )    
        .def( 
            "SetMatureCellTargetVolume"
            , (void ( ::VolumeConstraintPottsUpdateRule<2>::* )( double ))( &::VolumeConstraintPottsUpdateRule< 2 >::SetMatureCellTargetVolume )
            , ( bp::arg("matureCellTargetVolume") ) );

    bp::class_< VolumeConstraintPottsUpdateRule_less__3__greater__wrapper, bp::bases< AbstractPottsUpdateRule< 3 > > >( "VolumeConstraintPottsUpdateRule3", bp::init< >() )    
        .def( 
            "EvaluateHamiltonianContribution"
            , (double ( ::VolumeConstraintPottsUpdateRule<3>::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&::VolumeConstraintPottsUpdateRule< 3 >::EvaluateHamiltonianContribution)
            , (double ( VolumeConstraintPottsUpdateRule_less__3__greater__wrapper::* )( unsigned int,unsigned int,::PottsBasedCellPopulation< 3 > & ))(&VolumeConstraintPottsUpdateRule_less__3__greater__wrapper::default_EvaluateHamiltonianContribution)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation") ) )    
        .def( 
            "GetDeformationEnergyParameter"
            , (double ( ::VolumeConstraintPottsUpdateRule<3>::* )(  ))( &::VolumeConstraintPottsUpdateRule< 3 >::GetDeformationEnergyParameter ) )    
        .def( 
            "GetMatureCellTargetVolume"
            , (double ( ::VolumeConstraintPottsUpdateRule<3>::* )(  )const)( &::VolumeConstraintPottsUpdateRule< 3 >::GetMatureCellTargetVolume ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::VolumeConstraintPottsUpdateRule<3>::* )( ::out_stream & ))(&::VolumeConstraintPottsUpdateRule< 3 >::OutputUpdateRuleParameters)
            , (void ( VolumeConstraintPottsUpdateRule_less__3__greater__wrapper::* )( ::out_stream & ))(&VolumeConstraintPottsUpdateRule_less__3__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDeformationEnergyParameter"
            , (void ( ::VolumeConstraintPottsUpdateRule<3>::* )( double ))( &::VolumeConstraintPottsUpdateRule< 3 >::SetDeformationEnergyParameter )
            , ( bp::arg("deformationEnergyParameter") ) )    
        .def( 
            "SetMatureCellTargetVolume"
            , (void ( ::VolumeConstraintPottsUpdateRule<3>::* )( double ))( &::VolumeConstraintPottsUpdateRule< 3 >::SetMatureCellTargetVolume )
            , ( bp::arg("matureCellTargetVolume") ) );

    bp::class_< VtkSceneModifier_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 2, 2 > > >( "VtkSceneModifier2", bp::init< >() )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::VtkSceneModifier<2>::* )( ::out_stream & ))(&::VtkSceneModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( VtkSceneModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&VtkSceneModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetVtkScene"
            , (void ( ::VtkSceneModifier<2>::* )( ::boost::shared_ptr< VtkScene< 2 > > ))( &::VtkSceneModifier< 2 >::SetVtkScene )
            , ( bp::arg("pScene") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::VtkSceneModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::VtkSceneModifier< 2 >::SetupSolve)
            , (void ( VtkSceneModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&VtkSceneModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::VtkSceneModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::VtkSceneModifier< 2 >::UpdateAtEndOfTimeStep)
            , (void ( VtkSceneModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&VtkSceneModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::VtkSceneModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))( &::VtkSceneModifier< 2 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( VtkSceneModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&VtkSceneModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
            , (void ( VtkSceneModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&VtkSceneModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< VtkSceneModifier_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 3, 3 > > >( "VtkSceneModifier3", bp::init< >() )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::VtkSceneModifier<3>::* )( ::out_stream & ))(&::VtkSceneModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( VtkSceneModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&VtkSceneModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetVtkScene"
            , (void ( ::VtkSceneModifier<3>::* )( ::boost::shared_ptr< VtkScene< 3 > > ))( &::VtkSceneModifier< 3 >::SetVtkScene )
            , ( bp::arg("pScene") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::VtkSceneModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::VtkSceneModifier< 3 >::SetupSolve)
            , (void ( VtkSceneModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&VtkSceneModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::VtkSceneModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::VtkSceneModifier< 3 >::UpdateAtEndOfTimeStep)
            , (void ( VtkSceneModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&VtkSceneModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::VtkSceneModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))( &::VtkSceneModifier< 3 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( VtkSceneModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&VtkSceneModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
            , (void ( VtkSceneModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&VtkSceneModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< WildTypeCellMutationState, bp::bases< AbstractCellMutationState > >( "WildTypeCellMutationState", bp::init< >() );

    { //::Instantiation
    
        typedef int ( *Instantiation_function_type )(  );
        
        bp::def( 
            "Instantiation"
            , Instantiation_function_type( &::Instantiation ) );
    
    }
}
