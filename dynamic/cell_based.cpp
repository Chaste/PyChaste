// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "indexing_suite/set.hpp"

#include "cell_based_headers.hpp"

namespace bp = boost::python;

struct AbstractUpdateRule_less__2__greater__wrapper : AbstractUpdateRule< 2 >, bp::wrapper< AbstractUpdateRule< 2 > > {

    AbstractUpdateRule_less__2__greater__wrapper( )
    : AbstractUpdateRule<2>( )
      , bp::wrapper< AbstractUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" );
        func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCaUpdateRule_less__2__greater__wrapper : AbstractCaUpdateRule< 2 >, bp::wrapper< AbstractCaUpdateRule< 2 > > {

    AbstractCaUpdateRule_less__2__greater__wrapper( )
    : AbstractCaUpdateRule<2>( )
      , bp::wrapper< AbstractCaUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ){
        bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" );
        return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper : AbstractCellBasedSimulation< 2, 2 >, bp::wrapper< AbstractCellBasedSimulation< 2, 2 > > {

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval(  );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    virtual void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        AbstractCellBasedSimulation< 2, 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" );
        func_OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 2, 2 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" );
        func_UpdateCellLocationsAndTopology(  );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 2, 2 >::UpdateCellPopulation( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile( );
    }

};

struct AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper : AbstractCellBasedSimulation< 3, 3 >, bp::wrapper< AbstractCellBasedSimulation< 3, 3 > > {

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval(  );
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    virtual void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ){
        AbstractCellBasedSimulation< 3, 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" );
        func_OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 3, 3 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred( );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" );
        func_UpdateCellLocationsAndTopology(  );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        AbstractCellBasedSimulation< 3, 3 >::UpdateCellPopulation( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile( );
    }

};

struct AbstractCellCycleModel_wrapper : AbstractCellCycleModel, bp::wrapper< AbstractCellCycleModel > {

    AbstractCellCycleModel_wrapper(::AbstractCellCycleModel const & rModel )
    : AbstractCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< AbstractCellCycleModel >(){
        // copy constructor
    
    }

    AbstractCellCycleModel_wrapper( )
    : AbstractCellCycleModel( )
      , bp::wrapper< AbstractCellCycleModel >(){
        // null constructor
    
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ){
        bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" );
        return func_CreateCellCycleModel(  );
    }

    virtual double GetAverageStemCellCycleTime(  ){
        bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" );
        return func_GetAverageStemCellCycleTime(  );
    }

    virtual double GetAverageTransitCellCycleTime(  ){
        bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" );
        return func_GetAverageTransitCellCycleTime(  );
    }

    virtual void Initialise(  ) {
        if( bp::override func_Initialise = this->get_override( "Initialise" ) )
            func_Initialise(  );
        else{
            this->AbstractCellCycleModel::Initialise(  );
        }
    }
    
    void default_Initialise(  ) {
        AbstractCellCycleModel::Initialise( );
    }

    virtual void InitialiseDaughterCell(  ) {
        if( bp::override func_InitialiseDaughterCell = this->get_override( "InitialiseDaughterCell" ) )
            func_InitialiseDaughterCell(  );
        else{
            this->AbstractCellCycleModel::InitialiseDaughterCell(  );
        }
    }
    
    void default_InitialiseDaughterCell(  ) {
        AbstractCellCycleModel::InitialiseDaughterCell( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" );
        func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual bool ReadyToDivide(  ){
        bp::override func_ReadyToDivide = this->get_override( "ReadyToDivide" );
        return func_ReadyToDivide(  );
    }

    virtual void ResetForDivision(  ) {
        if( bp::override func_ResetForDivision = this->get_override( "ResetForDivision" ) )
            func_ResetForDivision(  );
        else{
            this->AbstractCellCycleModel::ResetForDivision(  );
        }
    }
    
    void default_ResetForDivision(  ) {
        AbstractCellCycleModel::ResetForDivision( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

struct AbstractCellPopulation_less__2_comma__2__greater__wrapper : AbstractCellPopulation< 2, 2 >, bp::wrapper< AbstractCellPopulation< 2, 2 > > {

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" );
        func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 2 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractCellPopulation_less__3_comma__3__greater__wrapper : AbstractCellPopulation< 3, 3 >, bp::wrapper< AbstractCellPopulation< 3, 3 > > {

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ){
        bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" );
        return func_GetDefaultTimeStep(  );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ){
        bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" );
        return func_GetNeighbouringNodeIndices( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" );
        func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SetNode( unsigned int nodeIndex, ::ChastePoint< 3 > & rNewLocation ){
        bp::override func_SetNode = this->get_override( "SetNode" );
        func_SetNode( nodeIndex, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractOnLatticeCellPopulation_less__2__greater__wrapper : AbstractOnLatticeCellPopulation< 2 >, bp::wrapper< AbstractOnLatticeCellPopulation< 2 > > {

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ){
        bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" );
        func_AddUpdateRule( pUpdateRule );
    }

    virtual void UpdateCellLocations( double dt ){
        bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" );
        func_UpdateCellLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 2 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 2, 2 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 2, 2 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 2, 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct AbstractOnLatticeCellPopulation_less__3__greater__wrapper : AbstractOnLatticeCellPopulation< 3 >, bp::wrapper< AbstractOnLatticeCellPopulation< 3 > > {

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ){
        bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" );
        func_AddUpdateRule( pUpdateRule );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const default_GetUpdateRuleCollection(  ) const  {
        return AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection( );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules( );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void UpdateCellLocations( double dt ){
        bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" );
        func_UpdateCellLocations( dt );
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ){
        bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" );
        func_AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ){
        bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" );
        func_AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ){
        bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" );
        func_AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ){
        bp::override func_AddCell = this->get_override( "AddCell" );
        return func_AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ){
        bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" );
        return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ){
        bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" );
        return func_GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ){
        bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" );
        return func_GetNeighbouringLocationIndices( pCell );
    }

    virtual ::Node< 3 > * GetNode( unsigned int index ){
        bp::override func_GetNode = this->get_override( "GetNode" );
        return func_GetNode( index );
    }

    virtual unsigned int GetNumNodes(  ){
        bp::override func_GetNumNodes = this->get_override( "GetNumNodes" );
        return func_GetNumNodes(  );
    }

    virtual ::TetrahedralMesh< 3, 3 > * GetTetrahedralMeshForPdeModifier(  ){
        bp::override func_GetTetrahedralMeshForPdeModifier = this->get_override( "GetTetrahedralMeshForPdeModifier" );
        return func_GetTetrahedralMeshForPdeModifier(  );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ){
        bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" );
        return func_GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ){
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ){
        bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" );
        return func_IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return AbstractCellPopulation< 3, 3 >::IsRoomToDivide( pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        AbstractCellPopulation< 3, 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ){
        bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" );
        return func_RemoveDeadCells(  );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ){
        bp::override func_Update = this->get_override( "Update" );
        func_Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void Validate(  ){
        bp::override func_Validate = this->get_override( "Validate" );
        func_Validate(  );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

    virtual void WriteVtkResultsToFile( ::std::string const & rDirectory ){
        bp::override func_WriteVtkResultsToFile = this->get_override( "WriteVtkResultsToFile" );
        func_WriteVtkResultsToFile( rDirectory );
    }

};

struct CaBasedCellPopulation_less__2__greater__wrapper : CaBasedCellPopulation< 2 >, bp::wrapper< CaBasedCellPopulation< 2 > > {

    CaBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices, unsigned int latticeCarryingCapacity=1U, bool deleteMesh=false, bool validate=false )
    : CaBasedCellPopulation<2>( boost::ref(rMesh), boost::ref(rCells), locationIndices, latticeCarryingCapacity, deleteMesh, validate )
      , bp::wrapper< CaBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    CaBasedCellPopulation_less__2__greater__wrapper(::PottsMesh< 2 > & rMesh )
    : CaBasedCellPopulation<2>( boost::ref(rMesh) )
      , bp::wrapper< CaBasedCellPopulation< 2 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > pCellWriter, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > pPopulationCountWriter ) {
        CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->CaBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > pPopulationWriter ) {
        CaBasedCellPopulation< 2 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->CaBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return CaBasedCellPopulation< 2 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->CaBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 2 > > pUpdateRule ) {
        CaBasedCellPopulation< 2 >::AddUpdateRule( pUpdateRule );
    }

    virtual double EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        if( bp::override func_EvaluateDivisionPropensity = this->get_override( "EvaluateDivisionPropensity" ) )
            return func_EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        }
    }
    
    double default_EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 2 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 2 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->CaBasedCellPopulation< 2 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return CaBasedCellPopulation< 2 >::GetNumNodes( );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->CaBasedCellPopulation< 2 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const default_GetUpdateRuleCollection(  ) const  {
        return CaBasedCellPopulation< 2 >::GetUpdateRuleCollection( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->CaBasedCellPopulation< 2 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return CaBasedCellPopulation< 2 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsRoomToDivide( pCell );
    }

    virtual bool IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_IsSiteAvailable = this->get_override( "IsSiteAvailable" ) )
            return func_IsSiteAvailable( index, pCell );
        else{
            return this->CaBasedCellPopulation< 2 >::IsSiteAvailable( index, pCell );
        }
    }
    
    bool default_IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 2 >::IsSiteAvailable( index, pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->CaBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        CaBasedCellPopulation< 2 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->CaBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        CaBasedCellPopulation< 2 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->CaBasedCellPopulation< 2 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        CaBasedCellPopulation< 2 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->CaBasedCellPopulation< 2 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return CaBasedCellPopulation< 2 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->CaBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        CaBasedCellPopulation< 2 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->CaBasedCellPopulation< 2 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        CaBasedCellPopulation< 2 >::UpdateCellLocations( dt );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex( index );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 2, 2 > * pSimulation ) {
        AbstractCellPopulation< 2, 2 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 2, 2 >::WriteResultsToFiles( rDirectory );
    }

};

struct CaBasedCellPopulation_less__3__greater__wrapper : CaBasedCellPopulation< 3 >, bp::wrapper< CaBasedCellPopulation< 3 > > {

    CaBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh, ::std::vector< boost::shared_ptr<Cell> > & rCells, ::std::vector< unsigned int > const locationIndices, unsigned int latticeCarryingCapacity=1U, bool deleteMesh=false, bool validate=false )
    : CaBasedCellPopulation<3>( boost::ref(rMesh), boost::ref(rCells), locationIndices, latticeCarryingCapacity, deleteMesh, validate )
      , bp::wrapper< CaBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    CaBasedCellPopulation_less__3__greater__wrapper(::PottsMesh< 3 > & rMesh )
    : CaBasedCellPopulation<3>( boost::ref(rMesh) )
      , bp::wrapper< CaBasedCellPopulation< 3 > >(){
        // constructor
    
    }

    virtual void AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        if( bp::override func_AcceptCellWriter = this->get_override( "AcceptCellWriter" ) )
            func_AcceptCellWriter( pCellWriter, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
        }
    }
    
    void default_AcceptCellWriter( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > pCellWriter, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::AcceptCellWriter( pCellWriter, pCell );
    }

    virtual void AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        if( bp::override func_AcceptPopulationCountWriter = this->get_override( "AcceptPopulationCountWriter" ) )
            func_AcceptPopulationCountWriter( pPopulationCountWriter );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
        }
    }
    
    void default_AcceptPopulationCountWriter( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > pPopulationCountWriter ) {
        CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter( pPopulationCountWriter );
    }

    virtual void AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        if( bp::override func_AcceptPopulationWriter = this->get_override( "AcceptPopulationWriter" ) )
            func_AcceptPopulationWriter( pPopulationWriter );
        else{
            this->CaBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
        }
    }
    
    void default_AcceptPopulationWriter( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > pPopulationWriter ) {
        CaBasedCellPopulation< 3 >::AcceptPopulationWriter( pPopulationWriter );
    }

    virtual ::CellPtr AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        if( bp::override func_AddCell = this->get_override( "AddCell" ) )
            return func_AddCell( pNewCell, pParentCell );
        else{
            return this->CaBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
        }
    }
    
    ::CellPtr default_AddCell( ::CellPtr pNewCell, ::CellPtr pParentCell=::CellPtr( ) ) {
        return CaBasedCellPopulation< 3 >::AddCell( pNewCell, pParentCell );
    }

    virtual void AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_AddCellUsingLocationIndex = this->get_override( "AddCellUsingLocationIndex" ) )
            func_AddCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_AddCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex( index, pCell );
    }

    virtual void AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        if( bp::override func_AddUpdateRule = this->get_override( "AddUpdateRule" ) )
            func_AddUpdateRule( pUpdateRule );
        else{
            this->CaBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
        }
    }
    
    void default_AddUpdateRule( ::boost::shared_ptr< AbstractUpdateRule< 3 > > pUpdateRule ) {
        CaBasedCellPopulation< 3 >::AddUpdateRule( pUpdateRule );
    }

    virtual double EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        if( bp::override func_EvaluateDivisionPropensity = this->get_override( "EvaluateDivisionPropensity" ) )
            return func_EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
        }
    }
    
    double default_EvaluateDivisionPropensity( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity( currentNodeIndex, targetNodeIndex, pCell );
    }

    virtual double GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        if( bp::override func_GetCellDataItemAtPdeNode = this->get_override( "GetCellDataItemAtPdeNode" ) )
            return func_GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        else{
            return this->CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
        }
    }
    
    double default_GetCellDataItemAtPdeNode( unsigned int pdeNodeIndex, ::std::string & rVariableName, bool dirichletBoundaryConditionApplies=false, double dirichletBoundaryValue=0. ) {
        return CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode( pdeNodeIndex, rVariableName, dirichletBoundaryConditionApplies, dirichletBoundaryValue );
    }

    virtual ::boost::numeric::ublas::c_vector< double, 3 > GetLocationOfCellCentre( ::CellPtr pCell ) {
        if( bp::override func_GetLocationOfCellCentre = this->get_override( "GetLocationOfCellCentre" ) )
            return func_GetLocationOfCellCentre( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
        }
    }
    
    ::boost::numeric::ublas::c_vector< double, 3 > default_GetLocationOfCellCentre( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetLocationOfCellCentre( pCell );
    }

    virtual ::std::set< unsigned int > GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        if( bp::override func_GetNeighbouringLocationIndices = this->get_override( "GetNeighbouringLocationIndices" ) )
            return func_GetNeighbouringLocationIndices( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringLocationIndices( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices( pCell );
    }

    virtual unsigned int GetNumNodes(  ) {
        if( bp::override func_GetNumNodes = this->get_override( "GetNumNodes" ) )
            return func_GetNumNodes(  );
        else{
            return this->CaBasedCellPopulation< 3 >::GetNumNodes(  );
        }
    }
    
    unsigned int default_GetNumNodes(  ) {
        return CaBasedCellPopulation< 3 >::GetNumNodes( );
    }

    virtual ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const GetUpdateRuleCollection(  ) const  {
        if( bp::override func_GetUpdateRuleCollection = this->get_override( "GetUpdateRuleCollection" ) )
            return func_GetUpdateRuleCollection(  );
        else{
            return this->CaBasedCellPopulation< 3 >::GetUpdateRuleCollection(  );
        }
    }
    
    ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const default_GetUpdateRuleCollection(  ) const  {
        return CaBasedCellPopulation< 3 >::GetUpdateRuleCollection( );
    }

    virtual double GetVolumeOfCell( ::CellPtr pCell ) {
        if( bp::override func_GetVolumeOfCell = this->get_override( "GetVolumeOfCell" ) )
            return func_GetVolumeOfCell( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
        }
    }
    
    double default_GetVolumeOfCell( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::GetVolumeOfCell( pCell );
    }

    virtual double GetWidth( unsigned int const & rDimension ) {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth( rDimension );
        else{
            return this->CaBasedCellPopulation< 3 >::GetWidth( rDimension );
        }
    }
    
    double default_GetWidth( unsigned int const & rDimension ) {
        return CaBasedCellPopulation< 3 >::GetWidth( rDimension );
    }

    virtual bool IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        if( bp::override func_IsCellAssociatedWithADeletedLocation = this->get_override( "IsCellAssociatedWithADeletedLocation" ) )
            return func_IsCellAssociatedWithADeletedLocation( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
        }
    }
    
    bool default_IsCellAssociatedWithADeletedLocation( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation( pCell );
    }

    virtual bool IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        if( bp::override func_IsPdeNodeAssociatedWithNonApoptoticCell = this->get_override( "IsPdeNodeAssociatedWithNonApoptoticCell" ) )
            return func_IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        else{
            return this->CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
        }
    }
    
    bool default_IsPdeNodeAssociatedWithNonApoptoticCell( unsigned int pdeNodeIndex ) {
        return CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell( pdeNodeIndex );
    }

    virtual bool IsRoomToDivide( ::CellPtr pCell ) {
        if( bp::override func_IsRoomToDivide = this->get_override( "IsRoomToDivide" ) )
            return func_IsRoomToDivide( pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsRoomToDivide( pCell );
        }
    }
    
    bool default_IsRoomToDivide( ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsRoomToDivide( pCell );
    }

    virtual bool IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_IsSiteAvailable = this->get_override( "IsSiteAvailable" ) )
            return func_IsSiteAvailable( index, pCell );
        else{
            return this->CaBasedCellPopulation< 3 >::IsSiteAvailable( index, pCell );
        }
    }
    
    bool default_IsSiteAvailable( unsigned int index, ::CellPtr pCell ) {
        return CaBasedCellPopulation< 3 >::IsSiteAvailable( index, pCell );
    }

    virtual void OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        if( bp::override func_OpenWritersFiles = this->get_override( "OpenWritersFiles" ) )
            func_OpenWritersFiles( boost::ref(rOutputFileHandler) );
        else{
            this->CaBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
        }
    }
    
    void default_OpenWritersFiles( ::OutputFileHandler & rOutputFileHandler ) {
        CaBasedCellPopulation< 3 >::OpenWritersFiles( boost::ref(rOutputFileHandler) );
    }

    virtual void OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellPopulationParameters = this->get_override( "OutputCellPopulationParameters" ) )
            func_OutputCellPopulationParameters( boost::ref(rParamsFile) );
        else{
            this->CaBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellPopulationParameters( ::out_stream & rParamsFile ) {
        CaBasedCellPopulation< 3 >::OutputCellPopulationParameters( boost::ref(rParamsFile) );
    }

    virtual void RemoveAllUpdateRules(  ) {
        if( bp::override func_RemoveAllUpdateRules = this->get_override( "RemoveAllUpdateRules" ) )
            func_RemoveAllUpdateRules(  );
        else{
            this->CaBasedCellPopulation< 3 >::RemoveAllUpdateRules(  );
        }
    }
    
    void default_RemoveAllUpdateRules(  ) {
        CaBasedCellPopulation< 3 >::RemoveAllUpdateRules( );
    }

    virtual void RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        if( bp::override func_RemoveCellUsingLocationIndex = this->get_override( "RemoveCellUsingLocationIndex" ) )
            func_RemoveCellUsingLocationIndex( index, pCell );
        else{
            this->CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex( index, pCell );
        }
    }
    
    void default_RemoveCellUsingLocationIndex( unsigned int index, ::CellPtr pCell ) {
        CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex( index, pCell );
    }

    virtual unsigned int RemoveDeadCells(  ) {
        if( bp::override func_RemoveDeadCells = this->get_override( "RemoveDeadCells" ) )
            return func_RemoveDeadCells(  );
        else{
            return this->CaBasedCellPopulation< 3 >::RemoveDeadCells(  );
        }
    }
    
    unsigned int default_RemoveDeadCells(  ) {
        return CaBasedCellPopulation< 3 >::RemoveDeadCells( );
    }

    virtual void Update( bool hasHadBirthsOrDeaths=true ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update( hasHadBirthsOrDeaths );
        else{
            this->CaBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
        }
    }
    
    void default_Update( bool hasHadBirthsOrDeaths=true ) {
        CaBasedCellPopulation< 3 >::Update( hasHadBirthsOrDeaths );
    }

    virtual void UpdateCellLocations( double dt ) {
        if( bp::override func_UpdateCellLocations = this->get_override( "UpdateCellLocations" ) )
            func_UpdateCellLocations( dt );
        else{
            this->CaBasedCellPopulation< 3 >::UpdateCellLocations( dt );
        }
    }
    
    void default_UpdateCellLocations( double dt ) {
        CaBasedCellPopulation< 3 >::UpdateCellLocations( dt );
    }

    virtual void AcceptCellWritersAcrossPopulation(  ){
        if( bp::override func_AcceptCellWritersAcrossPopulation = this->get_override( "AcceptCellWritersAcrossPopulation" ) )
            func_AcceptCellWritersAcrossPopulation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation(  );
        }
    }
    
    virtual void default_AcceptCellWritersAcrossPopulation(  ){
        AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation( );
    }

    virtual ::CellPtr GetCellUsingLocationIndex( unsigned int index ) {
        if( bp::override func_GetCellUsingLocationIndex = this->get_override( "GetCellUsingLocationIndex" ) )
            return func_GetCellUsingLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
        }
    }
    
    ::CellPtr default_GetCellUsingLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex( index );
    }

    virtual double GetDefaultTimeStep(  ) {
        if( bp::override func_GetDefaultTimeStep = this->get_override( "GetDefaultTimeStep" ) )
            return func_GetDefaultTimeStep(  );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep(  );
        }
    }
    
    double default_GetDefaultTimeStep(  ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep( );
    }

    virtual ::std::set< unsigned int > GetNeighbouringNodeIndices( unsigned int index ) {
        if( bp::override func_GetNeighbouringNodeIndices = this->get_override( "GetNeighbouringNodeIndices" ) )
            return func_GetNeighbouringNodeIndices( index );
        else{
            return this->AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
        }
    }
    
    ::std::set< unsigned int > default_GetNeighbouringNodeIndices( unsigned int index ) {
        return AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices( index );
    }

    virtual bool IsCellAttachedToLocationIndex( unsigned int index ) {
        if( bp::override func_IsCellAttachedToLocationIndex = this->get_override( "IsCellAttachedToLocationIndex" ) )
            return func_IsCellAttachedToLocationIndex( index );
        else{
            return this->AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
        }
    }
    
    bool default_IsCellAttachedToLocationIndex( unsigned int index ) {
        return AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex( index );
    }

    virtual void SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        if( bp::override func_SetNode = this->get_override( "SetNode" ) )
            func_SetNode( index, boost::ref(rNewLocation) );
        else{
            this->AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
        }
    }
    
    void default_SetNode( unsigned int index, ::ChastePoint< 3 > & rNewLocation ) {
        AbstractOnLatticeCellPopulation< 3 >::SetNode( index, boost::ref(rNewLocation) );
    }

    virtual void SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        if( bp::override func_SimulationSetupHook = this->get_override( "SimulationSetupHook" ) )
            func_SimulationSetupHook( boost::python::ptr(pSimulation) );
        else{
            this->AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
        }
    }
    
    void default_SimulationSetupHook( ::AbstractCellBasedSimulation< 3, 3 > * pSimulation ) {
        AbstractCellPopulation< 3, 3 >::SimulationSetupHook( boost::python::ptr(pSimulation) );
    }

    virtual void UpdateCellProcessLocation(  ) {
        if( bp::override func_UpdateCellProcessLocation = this->get_override( "UpdateCellProcessLocation" ) )
            func_UpdateCellProcessLocation(  );
        else{
            this->AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation(  );
        }
    }
    
    void default_UpdateCellProcessLocation(  ) {
        AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation( );
    }

    virtual void WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        if( bp::override func_WriteDataToVisualizerSetupFile = this->get_override( "WriteDataToVisualizerSetupFile" ) )
            func_WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
        }
    }
    
    void default_WriteDataToVisualizerSetupFile( ::out_stream & pVizSetupFile ) {
        AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile( boost::ref(pVizSetupFile) );
    }

    virtual void WriteResultsToFiles( ::std::string const & rDirectory ) {
        if( bp::override func_WriteResultsToFiles = this->get_override( "WriteResultsToFiles" ) )
            func_WriteResultsToFiles( rDirectory );
        else{
            this->AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
        }
    }
    
    void default_WriteResultsToFiles( ::std::string const & rDirectory ) {
        AbstractCellPopulation< 3, 3 >::WriteResultsToFiles( rDirectory );
    }

};

struct DiffusionCaUpdateRule_less__2__greater__wrapper : DiffusionCaUpdateRule< 2 >, bp::wrapper< DiffusionCaUpdateRule< 2 > > {

    DiffusionCaUpdateRule_less__2__greater__wrapper(DiffusionCaUpdateRule<2> const & arg )
    : DiffusionCaUpdateRule<2>( arg )
      , bp::wrapper< DiffusionCaUpdateRule< 2 > >(){
        // copy constructor
        
    }

    DiffusionCaUpdateRule_less__2__greater__wrapper( )
    : DiffusionCaUpdateRule<2>( )
      , bp::wrapper< DiffusionCaUpdateRule< 2 > >(){
        // null constructor
    
    }

    virtual double EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        if( bp::override func_EvaluateProbability = this->get_override( "EvaluateProbability" ) )
            return func_EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        else{
            return this->DiffusionCaUpdateRule< 2 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
        }
    }
    
    double default_EvaluateProbability( unsigned int currentNodeIndex, unsigned int targetNodeIndex, ::CaBasedCellPopulation< 2 > & rCellPopulation, double dt, double deltaX, ::CellPtr cell ) {
        return DiffusionCaUpdateRule< 2 >::EvaluateProbability( currentNodeIndex, targetNodeIndex, boost::ref(rCellPopulation), dt, deltaX, cell );
    }

    virtual void OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputUpdateRuleParameters = this->get_override( "OutputUpdateRuleParameters" ) )
            func_OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        else{
            this->DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputUpdateRuleParameters( ::out_stream & rParamsFile ) {
        DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters( boost::ref(rParamsFile) );
    }

};

struct OnLatticeSimulation_less__2__greater__wrapper : OnLatticeSimulation< 2 >, bp::wrapper< OnLatticeSimulation< 2 > > {

    OnLatticeSimulation_less__2__greater__wrapper(::AbstractCellPopulation< 2, 2 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OnLatticeSimulation<2>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OnLatticeSimulation< 2 > >(){
        // constructor
    
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 2 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->OnLatticeSimulation< 2 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        OnLatticeSimulation< 2 >::UpdateCellPopulation( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 2, 2 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile( );
    }

};

struct OnLatticeSimulation_less__3__greater__wrapper : OnLatticeSimulation< 3 >, bp::wrapper< OnLatticeSimulation< 3 > > {

    OnLatticeSimulation_less__3__greater__wrapper(::AbstractCellPopulation< 3, 3 > & rCellPopulation, bool deleteCellPopulationInDestructor=false, bool initialiseCells=true )
    : OnLatticeSimulation<3>( boost::ref(rCellPopulation), deleteCellPopulationInDestructor, initialiseCells )
      , bp::wrapper< OnLatticeSimulation< 3 > >(){
        // constructor
    
    }

    virtual void OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputAdditionalSimulationSetup = this->get_override( "OutputAdditionalSimulationSetup" ) )
            func_OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputAdditionalSimulationSetup( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup( boost::ref(rParamsFile) );
    }

    virtual void OutputSimulationParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationParameters = this->get_override( "OutputSimulationParameters" ) )
            func_OutputSimulationParameters( boost::ref(rParamsFile) );
        else{
            this->OnLatticeSimulation< 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationParameters( ::out_stream & rParamsFile ) {
        OnLatticeSimulation< 3 >::OutputSimulationParameters( boost::ref(rParamsFile) );
    }

    virtual void UpdateCellLocationsAndTopology(  ){
        if( bp::override func_UpdateCellLocationsAndTopology = this->get_override( "UpdateCellLocationsAndTopology" ) )
            func_UpdateCellLocationsAndTopology(  );
        else{
            this->OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology(  );
        }
    }
    
    virtual void default_UpdateCellLocationsAndTopology(  ){
        OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology( );
    }

    virtual void UpdateCellPopulation(  ){
        if( bp::override func_UpdateCellPopulation = this->get_override( "UpdateCellPopulation" ) )
            func_UpdateCellPopulation(  );
        else{
            this->OnLatticeSimulation< 3 >::UpdateCellPopulation(  );
        }
    }
    
    virtual void default_UpdateCellPopulation(  ){
        OnLatticeSimulation< 3 >::UpdateCellPopulation( );
    }

    virtual unsigned int DoCellBirth(  ){
        if( bp::override func_DoCellBirth = this->get_override( "DoCellBirth" ) )
            return func_DoCellBirth(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::DoCellBirth(  );
        }
    }
    
    virtual unsigned int default_DoCellBirth(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellBirth( );
    }

    unsigned int DoCellRemoval(  ){
        return AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval(  );
    }

    void OutputSimulationSetup(  ){
        AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup(  );
    }

    virtual void SetupSolve(  ){
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::SetupSolve(  );
        }
    }
    
    virtual void default_SetupSolve(  ){
        AbstractCellBasedSimulation< 3, 3 >::SetupSolve( );
    }

    virtual bool StoppingEventHasOccurred(  ){
        if( bp::override func_StoppingEventHasOccurred = this->get_override( "StoppingEventHasOccurred" ) )
            return func_StoppingEventHasOccurred(  );
        else{
            return this->AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred(  );
        }
    }
    
    virtual bool default_StoppingEventHasOccurred(  ){
        return AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred( );
    }

    virtual void WriteVisualizerSetupFile(  ){
        if( bp::override func_WriteVisualizerSetupFile = this->get_override( "WriteVisualizerSetupFile" ) )
            func_WriteVisualizerSetupFile(  );
        else{
            this->AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile(  );
        }
    }
    
    virtual void default_WriteVisualizerSetupFile(  ){
        AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile( );
    }

};

struct SimulationTime_wrapper : SimulationTime, bp::wrapper< SimulationTime > {

    SimulationTime_wrapper( )
    : SimulationTime( )
      , bp::wrapper< SimulationTime >(){
        // null constructor
    
    }

};

struct UniformCellCycleModel_wrapper : UniformCellCycleModel, bp::wrapper< UniformCellCycleModel > {

    UniformCellCycleModel_wrapper(::UniformCellCycleModel const & rModel )
    : UniformCellCycleModel( boost::ref(rModel) )
      , bp::wrapper< UniformCellCycleModel >(){
        // copy constructor
    
    }

    UniformCellCycleModel_wrapper( )
    : UniformCellCycleModel( )
      , bp::wrapper< UniformCellCycleModel >(){
        // null constructor
    
    }

    virtual ::AbstractCellCycleModel * CreateCellCycleModel(  ) {
        if( bp::override func_CreateCellCycleModel = this->get_override( "CreateCellCycleModel" ) )
            return func_CreateCellCycleModel(  );
        else{
            return this->UniformCellCycleModel::CreateCellCycleModel(  );
        }
    }
    
    ::AbstractCellCycleModel * default_CreateCellCycleModel(  ) {
        return UniformCellCycleModel::CreateCellCycleModel( );
    }

    virtual double GetAverageStemCellCycleTime(  ) {
        if( bp::override func_GetAverageStemCellCycleTime = this->get_override( "GetAverageStemCellCycleTime" ) )
            return func_GetAverageStemCellCycleTime(  );
        else{
            return this->UniformCellCycleModel::GetAverageStemCellCycleTime(  );
        }
    }
    
    double default_GetAverageStemCellCycleTime(  ) {
        return UniformCellCycleModel::GetAverageStemCellCycleTime( );
    }

    virtual double GetAverageTransitCellCycleTime(  ) {
        if( bp::override func_GetAverageTransitCellCycleTime = this->get_override( "GetAverageTransitCellCycleTime" ) )
            return func_GetAverageTransitCellCycleTime(  );
        else{
            return this->UniformCellCycleModel::GetAverageTransitCellCycleTime(  );
        }
    }
    
    double default_GetAverageTransitCellCycleTime(  ) {
        return UniformCellCycleModel::GetAverageTransitCellCycleTime( );
    }

    virtual void OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputCellCycleModelParameters = this->get_override( "OutputCellCycleModelParameters" ) )
            func_OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        else{
            this->UniformCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputCellCycleModelParameters( ::out_stream & rParamsFile ) {
        UniformCellCycleModel::OutputCellCycleModelParameters( boost::ref(rParamsFile) );
    }

    virtual void SetCellCycleDuration(  ) {
        if( bp::override func_SetCellCycleDuration = this->get_override( "SetCellCycleDuration" ) )
            func_SetCellCycleDuration(  );
        else{
            this->UniformCellCycleModel::SetCellCycleDuration(  );
        }
    }
    
    void default_SetCellCycleDuration(  ) {
        UniformCellCycleModel::SetCellCycleDuration( );
    }

    virtual bool CanCellTerminallyDifferentiate(  ) {
        if( bp::override func_CanCellTerminallyDifferentiate = this->get_override( "CanCellTerminallyDifferentiate" ) )
            return func_CanCellTerminallyDifferentiate(  );
        else{
            return this->AbstractCellCycleModel::CanCellTerminallyDifferentiate(  );
        }
    }
    
    bool default_CanCellTerminallyDifferentiate(  ) {
        return AbstractCellCycleModel::CanCellTerminallyDifferentiate( );
    }

    virtual void SetBirthTime( double birthTime ) {
        if( bp::override func_SetBirthTime = this->get_override( "SetBirthTime" ) )
            func_SetBirthTime( birthTime );
        else{
            this->AbstractCellCycleModel::SetBirthTime( birthTime );
        }
    }
    
    void default_SetBirthTime( double birthTime ) {
        AbstractCellCycleModel::SetBirthTime( birthTime );
    }

};

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< Cell > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractUpdateRule< 2 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractUpdateRule< 3 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_PyChaste_cell_based){
    { //::std::vector< unsigned int >
        typedef bp::class_< std::vector< unsigned int > > vector_less__unsigned_int__greater__exposer_t;
        vector_less__unsigned_int__greater__exposer_t vector_less__unsigned_int__greater__exposer = vector_less__unsigned_int__greater__exposer_t( "vector_less__unsigned_int__greater_" );
        bp::scope vector_less__unsigned_int__greater__scope( vector_less__unsigned_int__greater__exposer );
        vector_less__unsigned_int__greater__exposer.def( bp::indexing::vector_suite< std::vector< unsigned int > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::shared_ptr<Cell> >
        typedef bp::class_< std::vector< boost::shared_ptr<Cell> > > VecCellPtr_exposer_t;
        VecCellPtr_exposer_t VecCellPtr_exposer = VecCellPtr_exposer_t( "VecCellPtr" );
        bp::scope VecCellPtr_scope( VecCellPtr_exposer );
        VecCellPtr_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<Cell> > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > >() );
    }

    { //::std::set< unsigned int >
        typedef bp::class_< std::set< unsigned int > > set_less__unsigned_int__greater__exposer_t;
        set_less__unsigned_int__greater__exposer_t set_less__unsigned_int__greater__exposer = set_less__unsigned_int__greater__exposer_t( "set_less__unsigned_int__greater_" );
        bp::scope set_less__unsigned_int__greater__scope( set_less__unsigned_int__greater__exposer );
        set_less__unsigned_int__greater__exposer.def( bp::indexing::set_suite< std::set< unsigned int > >() );
    }

    { //::std::set< boost::shared_ptr<Cell> >
        typedef bp::class_< std::set< boost::shared_ptr<Cell> > > set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t;
        set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer = set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer_t( "set_less__boost_scope_shared_ptr_less_Cell_greater___greater_" );
        bp::scope set_less__boost_scope_shared_ptr_less_Cell_greater___greater__scope( set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer );
        set_less__boost_scope_shared_ptr_less_Cell_greater___greater__exposer.def( bp::indexing::set_suite< std::set< boost::shared_ptr<Cell> > >() );
    }

    bp::class_< Identifiable >( "Identifiable" )    
        .def( 
            "GetIdentifier"
            , (::std::string ( ::Identifiable::* )(  )const)( &::Identifiable::GetIdentifier ) );

    { //::AbstractUpdateRule< 2 >
        typedef bp::class_< AbstractUpdateRule_less__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractUpdateRule2_exposer_t;
        AbstractUpdateRule2_exposer_t AbstractUpdateRule2_exposer = AbstractUpdateRule2_exposer_t( "AbstractUpdateRule2", bp::init< >() );
        bp::scope AbstractUpdateRule2_scope( AbstractUpdateRule2_exposer );
        { //::AbstractUpdateRule< 2 >::OutputUpdateRuleInfo
        
            typedef AbstractUpdateRule< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleInfo_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule2_exposer.def( 
                "OutputUpdateRuleInfo"
                , OutputUpdateRuleInfo_function_type( &::AbstractUpdateRule< 2 >::OutputUpdateRuleInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractUpdateRule< 2 >::OutputUpdateRuleParameters
        
            typedef AbstractUpdateRule< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputUpdateRuleParameters_function_type)( ::out_stream & ) ;
            
            AbstractUpdateRule2_exposer.def( 
                "OutputUpdateRuleParameters"
                , bp::pure_virtual( OutputUpdateRuleParameters_function_type(&::AbstractUpdateRule< 2 >::OutputUpdateRuleParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractUpdateRule<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractUpdateRule< 2 > >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCaUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiffusionCaUpdateRule< 2 > >, boost::shared_ptr< AbstractUpdateRule< 2 > > >();
    }

    bp::class_< AbstractCaUpdateRule_less__2__greater__wrapper, bp::bases< AbstractUpdateRule< 2 > >, boost::noncopyable >( "AbstractCaUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , bp::pure_virtual( (double ( ::AbstractCaUpdateRule<2>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&::AbstractCaUpdateRule< 2 >::EvaluateProbability) )
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::AbstractCaUpdateRule<2>::* )( ::out_stream & ))(&::AbstractCaUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( AbstractCaUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCaUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) );

    bp::class_< AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellBasedSimulation2_2", bp::no_init )    
        .def( 
            "AddCellKiller"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellKiller< 2 > > ))( &::AbstractCellBasedSimulation< 2, 2 >::AddCellKiller )
            , ( bp::arg("pCellKiller") ) )    
        .def( 
            "AddSimulationModifier"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > ))( &::AbstractCellBasedSimulation< 2, 2 >::AddSimulationModifier )
            , ( bp::arg("pSimulationModifier") ) )    
        .def( 
            "DoCellBirth"
            , (unsigned int ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_DoCellBirth) )    
        .def( 
            "DoCellRemoval"
            , (unsigned int ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::DoCellRemoval) )    
        .def( 
            "GetDt"
            , (double ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetDt ) )    
        .def( 
            "GetNodeLocation"
            , (::std::vector< double > ( ::AbstractCellBasedSimulation<2, 2>::* )( unsigned int const & ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNodeLocation )
            , ( bp::arg("rNodeIndex") ) )    
        .def( 
            "GetNumBirths"
            , (unsigned int ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNumBirths ) )    
        .def( 
            "GetNumDeaths"
            , (unsigned int ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetNumDeaths ) )    
        .def( 
            "GetOutputCellVelocities"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputCellVelocities ) )    
        .def( 
            "GetOutputDirectory"
            , (::std::string ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputDirectory ) )    
        .def( 
            "GetOutputDivisionLocations"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetOutputDivisionLocations ) )    
        .def( 
            "GetUpdateCellPopulationRule"
            , (bool ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::GetUpdateCellPopulationRule ) )    
        .def( 
            "OutputAdditionalSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_OutputAdditionalSimulationSetup)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellBasedSimulation< 2, 2 >::OutputSimulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::OutputSimulationSetup) )    
        .def( 
            "RemoveAllCellKillers"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::RemoveAllCellKillers ) )    
        .def( 
            "SetDt"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( double ))( &::AbstractCellBasedSimulation< 2, 2 >::SetDt )
            , ( bp::arg("dt") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( double ))( &::AbstractCellBasedSimulation< 2, 2 >::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNoBirth"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetNoBirth )
            , ( bp::arg("noBirth") ) )    
        .def( 
            "SetOutputCellVelocities"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputCellVelocities )
            , ( bp::arg("outputCellVelocities") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( ::std::string ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputDirectory )
            , ( bp::arg("outputDirectory") ) )    
        .def( 
            "SetOutputDivisionLocations"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetOutputDivisionLocations )
            , ( bp::arg("outputDivisionLocations") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( unsigned int ))( &::AbstractCellBasedSimulation< 2, 2 >::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingTimestepMultiple") ) )    
        .def( 
            "SetUpdateCellPopulationRule"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )( bool ))( &::AbstractCellBasedSimulation< 2, 2 >::SetUpdateCellPopulationRule )
            , ( bp::arg("updateCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_SetupSolve) )    
        .def( 
            "Solve"
            , (void ( ::AbstractCellBasedSimulation<2, 2>::* )(  ))( &::AbstractCellBasedSimulation< 2, 2 >::Solve ) )    
        .def( 
            "StoppingEventHasOccurred"
            , (bool ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_StoppingEventHasOccurred) )    
        .def( 
            "UpdateCellLocationsAndTopology"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::UpdateCellLocationsAndTopology) )    
        .def( 
            "UpdateCellPopulation"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_UpdateCellPopulation) )    
        .def( 
            "WriteVisualizerSetupFile"
            , (void ( AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__2_comma__2__greater__wrapper::default_WriteVisualizerSetupFile) )
        .def( 
            "rGetCellPopulation"
            , (::AbstractCellPopulation< 2, 2 > const & ( ::AbstractCellBasedSimulation<2, 2>::* )(  )const)( &::AbstractCellBasedSimulation< 2, 2 >::rGetCellPopulation )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellBasedSimulation3_3", bp::no_init )    
        .def( 
            "AddCellKiller"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellKiller< 3 > > ))( &::AbstractCellBasedSimulation< 3, 3 >::AddCellKiller )
            , ( bp::arg("pCellKiller") ) )    
        .def( 
            "AddSimulationModifier"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > ))( &::AbstractCellBasedSimulation< 3, 3 >::AddSimulationModifier )
            , ( bp::arg("pSimulationModifier") ) )    
        .def( 
            "DoCellBirth"
            , (unsigned int ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_DoCellBirth) )    
        .def( 
            "DoCellRemoval"
            , (unsigned int ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::DoCellRemoval) )    
        .def( 
            "GetDt"
            , (double ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetDt ) )    
        .def( 
            "GetNodeLocation"
            , (::std::vector< double > ( ::AbstractCellBasedSimulation<3, 3>::* )( unsigned int const & ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNodeLocation )
            , ( bp::arg("rNodeIndex") ) )    
        .def( 
            "GetNumBirths"
            , (unsigned int ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNumBirths ) )    
        .def( 
            "GetNumDeaths"
            , (unsigned int ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetNumDeaths ) )    
        .def( 
            "GetOutputCellVelocities"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputCellVelocities ) )    
        .def( 
            "GetOutputDirectory"
            , (::std::string ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputDirectory ) )    
        .def( 
            "GetOutputDivisionLocations"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetOutputDivisionLocations ) )    
        .def( 
            "GetUpdateCellPopulationRule"
            , (bool ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::GetUpdateCellPopulationRule ) )    
        .def( 
            "OutputAdditionalSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_OutputAdditionalSimulationSetup)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellBasedSimulation< 3, 3 >::OutputSimulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationSetup"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::OutputSimulationSetup) )    
        .def( 
            "RemoveAllCellKillers"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::RemoveAllCellKillers ) )    
        .def( 
            "SetDt"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( double ))( &::AbstractCellBasedSimulation< 3, 3 >::SetDt )
            , ( bp::arg("dt") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( double ))( &::AbstractCellBasedSimulation< 3, 3 >::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNoBirth"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetNoBirth )
            , ( bp::arg("noBirth") ) )    
        .def( 
            "SetOutputCellVelocities"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputCellVelocities )
            , ( bp::arg("outputCellVelocities") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( ::std::string ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputDirectory )
            , ( bp::arg("outputDirectory") ) )    
        .def( 
            "SetOutputDivisionLocations"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetOutputDivisionLocations )
            , ( bp::arg("outputDivisionLocations") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( unsigned int ))( &::AbstractCellBasedSimulation< 3, 3 >::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingTimestepMultiple") ) )    
        .def( 
            "SetUpdateCellPopulationRule"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )( bool ))( &::AbstractCellBasedSimulation< 3, 3 >::SetUpdateCellPopulationRule )
            , ( bp::arg("updateCellPopulation") ) )    
        .def( 
            "SetupSolve"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_SetupSolve) )    
        .def( 
            "Solve"
            , (void ( ::AbstractCellBasedSimulation<3, 3>::* )(  ))( &::AbstractCellBasedSimulation< 3, 3 >::Solve ) )    
        .def( 
            "StoppingEventHasOccurred"
            , (bool ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_StoppingEventHasOccurred) )    
        .def( 
            "UpdateCellLocationsAndTopology"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::UpdateCellLocationsAndTopology) )    
        .def( 
            "UpdateCellPopulation"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_UpdateCellPopulation) )    
        .def( 
            "WriteVisualizerSetupFile"
            , (void ( AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellBasedSimulation_less__3_comma__3__greater__wrapper::default_WriteVisualizerSetupFile) )
        .def( 
            "rGetCellPopulation"
            , (::AbstractCellPopulation< 3, 3 > const & ( ::AbstractCellBasedSimulation<3, 3>::* )(  )const)( &::AbstractCellBasedSimulation< 3, 3 >::rGetCellPopulation )
            , bp::return_value_policy< bp::copy_const_reference >() );

    { //::AbstractCellCycleModel
        typedef bp::class_< AbstractCellCycleModel_wrapper, bp::bases< Identifiable >, boost::noncopyable > AbstractCellCycleModel_exposer_t;
        AbstractCellCycleModel_exposer_t AbstractCellCycleModel_exposer = AbstractCellCycleModel_exposer_t( "AbstractCellCycleModel", bp::init< AbstractCellCycleModel const & >(( bp::arg("rModel") )) );
        bp::scope AbstractCellCycleModel_scope( AbstractCellCycleModel_exposer );
        AbstractCellCycleModel_exposer.def( bp::init< >() );
        { //::AbstractCellCycleModel::CanCellTerminallyDifferentiate
        
            typedef bool ( ::AbstractCellCycleModel::*CanCellTerminallyDifferentiate_function_type)(  ) ;
            typedef bool ( AbstractCellCycleModel_wrapper::*default_CanCellTerminallyDifferentiate_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "CanCellTerminallyDifferentiate"
                , CanCellTerminallyDifferentiate_function_type(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
                , default_CanCellTerminallyDifferentiate_function_type(&AbstractCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) );
        
        }
        { //::AbstractCellCycleModel::CreateCellCycleModel
        
            typedef ::AbstractCellCycleModel * ( ::AbstractCellCycleModel::*CreateCellCycleModel_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "CreateCellCycleModel"
                , bp::pure_virtual( CreateCellCycleModel_function_type(&::AbstractCellCycleModel::CreateCellCycleModel) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AbstractCellCycleModel::GetAge
        
            typedef double ( ::AbstractCellCycleModel::*GetAge_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "GetAge"
                , GetAge_function_type( &::AbstractCellCycleModel::GetAge ) );
        
        }
        { //::AbstractCellCycleModel::GetAverageStemCellCycleTime
        
            typedef double ( ::AbstractCellCycleModel::*GetAverageStemCellCycleTime_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "GetAverageStemCellCycleTime"
                , bp::pure_virtual( GetAverageStemCellCycleTime_function_type(&::AbstractCellCycleModel::GetAverageStemCellCycleTime) ) );
        
        }
        { //::AbstractCellCycleModel::GetAverageTransitCellCycleTime
        
            typedef double ( ::AbstractCellCycleModel::*GetAverageTransitCellCycleTime_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "GetAverageTransitCellCycleTime"
                , bp::pure_virtual( GetAverageTransitCellCycleTime_function_type(&::AbstractCellCycleModel::GetAverageTransitCellCycleTime) ) );
        
        }
        { //::AbstractCellCycleModel::GetBirthTime
        
            typedef double ( ::AbstractCellCycleModel::*GetBirthTime_function_type)(  ) const;
            
            AbstractCellCycleModel_exposer.def( 
                "GetBirthTime"
                , GetBirthTime_function_type( &::AbstractCellCycleModel::GetBirthTime ) );
        
        }
        { //::AbstractCellCycleModel::GetCell
        
            typedef ::CellPtr ( ::AbstractCellCycleModel::*GetCell_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "GetCell"
                , GetCell_function_type( &::AbstractCellCycleModel::GetCell ) );
        
        }
        { //::AbstractCellCycleModel::GetDimension
        
            typedef unsigned int ( ::AbstractCellCycleModel::*GetDimension_function_type)(  ) const;
            
            AbstractCellCycleModel_exposer.def( 
                "GetDimension"
                , GetDimension_function_type( &::AbstractCellCycleModel::GetDimension ) );
        
        }
        { //::AbstractCellCycleModel::Initialise
        
            typedef void ( ::AbstractCellCycleModel::*Initialise_function_type)(  ) ;
            typedef void ( AbstractCellCycleModel_wrapper::*default_Initialise_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "Initialise"
                , Initialise_function_type(&::AbstractCellCycleModel::Initialise)
                , default_Initialise_function_type(&AbstractCellCycleModel_wrapper::default_Initialise) );
        
        }
        { //::AbstractCellCycleModel::InitialiseDaughterCell
        
            typedef void ( ::AbstractCellCycleModel::*InitialiseDaughterCell_function_type)(  ) ;
            typedef void ( AbstractCellCycleModel_wrapper::*default_InitialiseDaughterCell_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "InitialiseDaughterCell"
                , InitialiseDaughterCell_function_type(&::AbstractCellCycleModel::InitialiseDaughterCell)
                , default_InitialiseDaughterCell_function_type(&AbstractCellCycleModel_wrapper::default_InitialiseDaughterCell) );
        
        }
        { //::AbstractCellCycleModel::OutputCellCycleModelInfo
        
            typedef void ( ::AbstractCellCycleModel::*OutputCellCycleModelInfo_function_type)( ::out_stream & ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "OutputCellCycleModelInfo"
                , OutputCellCycleModelInfo_function_type( &::AbstractCellCycleModel::OutputCellCycleModelInfo )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellCycleModel::OutputCellCycleModelParameters
        
            typedef void ( ::AbstractCellCycleModel::*OutputCellCycleModelParameters_function_type)( ::out_stream & ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "OutputCellCycleModelParameters"
                , bp::pure_virtual( OutputCellCycleModelParameters_function_type(&::AbstractCellCycleModel::OutputCellCycleModelParameters) )
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::AbstractCellCycleModel::ReadyToDivide
        
            typedef bool ( ::AbstractCellCycleModel::*ReadyToDivide_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "ReadyToDivide"
                , bp::pure_virtual( ReadyToDivide_function_type(&::AbstractCellCycleModel::ReadyToDivide) ) );
        
        }
        { //::AbstractCellCycleModel::ResetForDivision
        
            typedef void ( ::AbstractCellCycleModel::*ResetForDivision_function_type)(  ) ;
            typedef void ( AbstractCellCycleModel_wrapper::*default_ResetForDivision_function_type)(  ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "ResetForDivision"
                , ResetForDivision_function_type(&::AbstractCellCycleModel::ResetForDivision)
                , default_ResetForDivision_function_type(&AbstractCellCycleModel_wrapper::default_ResetForDivision) );
        
        }
        { //::AbstractCellCycleModel::SetBirthTime
        
            typedef void ( ::AbstractCellCycleModel::*SetBirthTime_function_type)( double ) ;
            typedef void ( AbstractCellCycleModel_wrapper::*default_SetBirthTime_function_type)( double ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "SetBirthTime"
                , SetBirthTime_function_type(&::AbstractCellCycleModel::SetBirthTime)
                , default_SetBirthTime_function_type(&AbstractCellCycleModel_wrapper::default_SetBirthTime)
                , ( bp::arg("birthTime") ) );
        
        }
        { //::AbstractCellCycleModel::SetCell
        
            typedef void ( ::AbstractCellCycleModel::*SetCell_function_type)( ::CellPtr ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "SetCell"
                , SetCell_function_type( &::AbstractCellCycleModel::SetCell )
                , ( bp::arg("pCell") ) );
        
        }
        { //::AbstractCellCycleModel::SetDimension
        
            typedef void ( ::AbstractCellCycleModel::*SetDimension_function_type)( unsigned int ) ;
            
            AbstractCellCycleModel_exposer.def( 
                "SetDimension"
                , SetDimension_function_type( &::AbstractCellCycleModel::SetDimension )
                , ( bp::arg("dimension") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellCycleModel > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellCycleModel >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractSimpleCellCycleModel >, boost::shared_ptr< AbstractCellCycleModel > >();
        bp::implicitly_convertible< boost::shared_ptr< UniformCellCycleModel >, boost::shared_ptr< AbstractCellCycleModel > >();
    }

    bp::class_< AbstractCellPopulation_less__2_comma__2__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellPopulation2_2", bp::no_init )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellPopulationCountWriter"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))( &::AbstractCellPopulation< 2, 2 >::AddCellPopulationCountWriter )
            , ( bp::arg("pCellPopulationCountWriter") ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "AddCellWriter"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > > ))( &::AbstractCellPopulation< 2, 2 >::AddCellWriter )
            , ( bp::arg("pCellWriter") ) )    
        .def( 
            "AddPopulationWriter"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))( &::AbstractCellPopulation< 2, 2 >::AddPopulationWriter )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "Begin"
            , (::AbstractCellPopulation< 2, 2 >::Iterator ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::Begin ) )    
        .def( 
            "CloseWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::CloseWritersFiles ) )    
        .def( 
            "CreateOrderedPair"
            , (::std::pair< unsigned int, unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,unsigned int ))( &::AbstractCellPopulation< 2, 2 >::CreateOrderedPair )
            , ( bp::arg("index1"), bp::arg("index2") ) )    
        .def( 
            "End"
            , (::AbstractCellPopulation< 2, 2 >::Iterator ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::End ) )    
        .def( 
            "GetCellAncestors"
            , (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCellAncestors ) )    
        .def( 
            "GetCellCyclePhaseCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCellCyclePhaseCount ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellMutationStateCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCellMutationStateCount ) )    
        .def( 
            "GetCellProliferativeTypeCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCellProliferativeTypeCount ) )    
        .def( 
            "GetCellPropertyRegistry"
            , (::boost::shared_ptr< CellPropertyRegistry > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCellPropertyRegistry ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetCellsUsingLocationIndex"
            , (::std::set< boost::shared_ptr<Cell> > ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))( &::AbstractCellPopulation< 2, 2 >::GetCellsUsingLocationIndex )
            , ( bp::arg("index") ) )    
        .def( 
            "GetCentroidOfCellPopulation"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetCentroidOfCellPopulation ) )    
        .def( 
            "GetDefaultTimeStep"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetDefaultTimeStep) ) )    
        .def( 
            "GetLocationIndexUsingCell"
            , (unsigned int ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))( &::AbstractCellPopulation< 2, 2 >::GetLocationIndexUsingCell )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumAllCells"
            , (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetNumAllCells ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) )    
        .def( 
            "GetNumRealCells"
            , (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetNumRealCells ) )    
        .def( 
            "GetOutputResultsForChasteVisualizer"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetOutputResultsForChasteVisualizer ) )    
        .def( 
            "GetSizeOfCellPopulation"
            , (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::GetSizeOfCellPopulation ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int const & ))(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "InitialiseCells"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::InitialiseCells ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
            , (bool ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::CellPtr ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "MoveCellInLocationMap"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr,unsigned int,unsigned int ))( &::AbstractCellPopulation< 2, 2 >::MoveCellInLocationMap )
            , ( bp::arg("pCell"), bp::arg("old_index"), bp::arg("new_index") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "OutputCellPopulationInfo"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))( &::AbstractCellPopulation< 2, 2 >::OutputCellPopulationInfo )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputCellPopulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::OutputCellPopulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) )    
        .def( 
            "SetCellAncestorsToLocationIndices"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::SetCellAncestorsToLocationIndices ) )    
        .def( 
            "SetCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))( &::AbstractCellPopulation< 2, 2 >::SetCellUsingLocationIndex )
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "SetDataOnAllCells"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const &,double ))( &::AbstractCellPopulation< 2, 2 >::SetDataOnAllCells )
            , ( bp::arg("rDataName"), bp::arg("dataValue") ) )    
        .def( 
            "SetDefaultCellMutationStateAndProliferativeTypeOrdering"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))( &::AbstractCellPopulation< 2, 2 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::ChastePoint< 2 > & ))(&::AbstractCellPopulation< 2, 2 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "SetOutputResultsForChasteVisualizer"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))( &::AbstractCellPopulation< 2, 2 >::SetOutputResultsForChasteVisualizer )
            , ( bp::arg("outputResultsForChasteVisualizer") ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))(&::AbstractCellPopulation< 2, 2 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::out_stream & ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const & ))(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractCellPopulation_less__2_comma__2__greater__wrapper::* )( ::std::string const & ))(&AbstractCellPopulation_less__2_comma__2__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractCellPopulation_less__3_comma__3__greater__wrapper, bp::bases< Identifiable >, boost::noncopyable >( "AbstractCellPopulation3_3", bp::no_init )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellPopulationCountWriter"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))( &::AbstractCellPopulation< 3, 3 >::AddCellPopulationCountWriter )
            , ( bp::arg("pCellPopulationCountWriter") ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "AddCellWriter"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > > ))( &::AbstractCellPopulation< 3, 3 >::AddCellWriter )
            , ( bp::arg("pCellWriter") ) )    
        .def( 
            "AddPopulationWriter"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))( &::AbstractCellPopulation< 3, 3 >::AddPopulationWriter )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "Begin"
            , (::AbstractCellPopulation< 3, 3 >::Iterator ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::Begin ) )    
        .def( 
            "CloseWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::CloseWritersFiles ) )    
        .def( 
            "CreateOrderedPair"
            , (::std::pair< unsigned int, unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,unsigned int ))( &::AbstractCellPopulation< 3, 3 >::CreateOrderedPair )
            , ( bp::arg("index1"), bp::arg("index2") ) )    
        .def( 
            "End"
            , (::AbstractCellPopulation< 3, 3 >::Iterator ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::End ) )    
        .def( 
            "GetCellAncestors"
            , (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCellAncestors ) )    
        .def( 
            "GetCellCyclePhaseCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCellCyclePhaseCount ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellMutationStateCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCellMutationStateCount ) )    
        .def( 
            "GetCellProliferativeTypeCount"
            , (::std::vector< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCellProliferativeTypeCount ) )    
        .def( 
            "GetCellPropertyRegistry"
            , (::boost::shared_ptr< CellPropertyRegistry > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCellPropertyRegistry ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetCellsUsingLocationIndex"
            , (::std::set< boost::shared_ptr<Cell> > ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))( &::AbstractCellPopulation< 3, 3 >::GetCellsUsingLocationIndex )
            , ( bp::arg("index") ) )    
        .def( 
            "GetCentroidOfCellPopulation"
            , (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetCentroidOfCellPopulation ) )    
        .def( 
            "GetDefaultTimeStep"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetDefaultTimeStep) ) )    
        .def( 
            "GetLocationIndexUsingCell"
            , (unsigned int ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))( &::AbstractCellPopulation< 3, 3 >::GetLocationIndexUsingCell )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringNodeIndices) )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNumAllCells"
            , (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetNumAllCells ) )    
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) )    
        .def( 
            "GetNumRealCells"
            , (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetNumRealCells ) )    
        .def( 
            "GetOutputResultsForChasteVisualizer"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetOutputResultsForChasteVisualizer ) )    
        .def( 
            "GetSizeOfCellPopulation"
            , (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::GetSizeOfCellPopulation ) )    
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int const & ))(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "InitialiseCells"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::InitialiseCells ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
            , (bool ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::CellPtr ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "MoveCellInLocationMap"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr,unsigned int,unsigned int ))( &::AbstractCellPopulation< 3, 3 >::MoveCellInLocationMap )
            , ( bp::arg("pCell"), bp::arg("old_index"), bp::arg("new_index") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "OutputCellPopulationInfo"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))( &::AbstractCellPopulation< 3, 3 >::OutputCellPopulationInfo )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputCellPopulationParameters"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::OutputCellPopulationParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) )    
        .def( 
            "SetCellAncestorsToLocationIndices"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::SetCellAncestorsToLocationIndices ) )    
        .def( 
            "SetCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))( &::AbstractCellPopulation< 3, 3 >::SetCellUsingLocationIndex )
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "SetDataOnAllCells"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const &,double ))( &::AbstractCellPopulation< 3, 3 >::SetDataOnAllCells )
            , ( bp::arg("rDataName"), bp::arg("dataValue") ) )    
        .def( 
            "SetDefaultCellMutationStateAndProliferativeTypeOrdering"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))( &::AbstractCellPopulation< 3, 3 >::SetDefaultCellMutationStateAndProliferativeTypeOrdering ) )    
        .def( 
            "SetNode"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::ChastePoint< 3 > & ))(&::AbstractCellPopulation< 3, 3 >::SetNode) )
            , ( bp::arg("nodeIndex"), bp::arg("rNewLocation") ) )    
        .def( 
            "SetOutputResultsForChasteVisualizer"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))( &::AbstractCellPopulation< 3, 3 >::SetOutputResultsForChasteVisualizer )
            , ( bp::arg("outputResultsForChasteVisualizer") ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))(&::AbstractCellPopulation< 3, 3 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )(  ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::out_stream & ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const & ))(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractCellPopulation_less__3_comma__3__greater__wrapper::* )( ::std::string const & ))(&AbstractCellPopulation_less__3_comma__3__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    { //::AbstractCellProperty
        typedef bp::class_< AbstractCellProperty, bp::bases< Identifiable > > AbstractCellProperty_exposer_t;
        AbstractCellProperty_exposer_t AbstractCellProperty_exposer = AbstractCellProperty_exposer_t( "AbstractCellProperty", bp::init< >() );
        bp::scope AbstractCellProperty_scope( AbstractCellProperty_exposer );
        { //::AbstractCellProperty::DecrementCellCount
        
            typedef void ( ::AbstractCellProperty::*DecrementCellCount_function_type)(  ) ;
            
            AbstractCellProperty_exposer.def( 
                "DecrementCellCount"
                , DecrementCellCount_function_type( &::AbstractCellProperty::DecrementCellCount ) );
        
        }
        { //::AbstractCellProperty::GetCellCount
        
            typedef unsigned int ( ::AbstractCellProperty::*GetCellCount_function_type)(  ) const;
            
            AbstractCellProperty_exposer.def( 
                "GetCellCount"
                , GetCellCount_function_type( &::AbstractCellProperty::GetCellCount ) );
        
        }
        { //::AbstractCellProperty::IncrementCellCount
        
            typedef void ( ::AbstractCellProperty::*IncrementCellCount_function_type)(  ) ;
            
            AbstractCellProperty_exposer.def( 
                "IncrementCellCount"
                , IncrementCellCount_function_type( &::AbstractCellProperty::IncrementCellCount ) );
        
        }
        { //::AbstractCellProperty::IsSame
        
            typedef bool ( ::AbstractCellProperty::*IsSame_function_type)( ::AbstractCellProperty const * ) const;
            
            AbstractCellProperty_exposer.def( 
                "IsSame"
                , IsSame_function_type( &::AbstractCellProperty::IsSame )
                , ( bp::arg("pOther") ) );
        
        }
        { //::AbstractCellProperty::IsSame
        
            typedef bool ( ::AbstractCellProperty::*IsSame_function_type)( ::boost::shared_ptr< const AbstractCellProperty > ) const;
            
            AbstractCellProperty_exposer.def( 
                "IsSame"
                , IsSame_function_type( &::AbstractCellProperty::IsSame )
                , ( bp::arg("pOther") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellProperty >, boost::shared_ptr< Identifiable > >();
        bp::implicitly_convertible< boost::shared_ptr< CellVecData >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< TransitCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< StemCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< DefaultCellProliferativeType >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< WildTypeCellMutationState >, boost::shared_ptr< AbstractCellProperty > >();
        bp::implicitly_convertible< boost::shared_ptr< CellData >, boost::shared_ptr< AbstractCellProperty > >();
    }

    bp::class_< AbstractOnLatticeCellPopulation_less__2__greater__wrapper, bp::bases< AbstractCellPopulation< 2, 2 > >, boost::noncopyable >( "AbstractOnLatticeCellPopulation2", bp::no_init )    
        .def( 
            "AddUpdateRule"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<2>::* )( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ))(&::AbstractOnLatticeCellPopulation< 2 >::AddUpdateRule) )
            , ( bp::arg("pUpdateRule") ) )    
        .def( 
            "GetIterateRandomlyOverUpdateRuleCollection"
            , (bool ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))( &::AbstractOnLatticeCellPopulation< 2 >::GetIterateRandomlyOverUpdateRuleCollection ) )    
        .def( 
            "GetUpdateNodesInRandomOrder"
            , (bool ( ::AbstractOnLatticeCellPopulation<2>::* )(  ))( &::AbstractOnLatticeCellPopulation< 2 >::GetUpdateNodesInRandomOrder ) )    
        .def( 
            "SetIterateRandomlyOverUpdateRuleCollection"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 2 >::SetIterateRandomlyOverUpdateRuleCollection )
            , ( bp::arg("iterateRandomly") ) )    
        .def( 
            "SetUpdateNodesInRandomOrder"
            , (void ( ::AbstractOnLatticeCellPopulation<2>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 2 >::SetUpdateNodesInRandomOrder )
            , ( bp::arg("updateNodesInRandomOrder") ) )    
        .def( 
            "UpdateCellLocations"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<2>::* )( double ))(&::AbstractOnLatticeCellPopulation< 2 >::UpdateCellLocations) )
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ))(&::AbstractCellPopulation< 2, 2 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::AddCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 2, 2 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 2 > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::GetNumNodes) ) )
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<2, 2>::* )( unsigned int const & ))(&::AbstractCellPopulation< 2, 2 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( unsigned int ))(&::AbstractCellPopulation< 2, 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<2, 2>::* )( ::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::IsRoomToDivide)
            , (bool ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 2, 2 >::OpenWritersFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 2, 2 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::AbstractCellBasedSimulation< 2, 2 > * ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<2, 2>::* )( bool ))(&::AbstractCellPopulation< 2, 2 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<2, 2>::* )(  ))(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::out_stream & ))(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<2, 2>::* )( ::std::string const & ))(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOnLatticeCellPopulation_less__2__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__2__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    bp::class_< AbstractOnLatticeCellPopulation_less__3__greater__wrapper, bp::bases< AbstractCellPopulation< 3, 3 > >, boost::noncopyable >( "AbstractOnLatticeCellPopulation3", bp::no_init )    
        .def( 
            "AddUpdateRule"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<3>::* )( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ))(&::AbstractOnLatticeCellPopulation< 3 >::AddUpdateRule) )
            , ( bp::arg("pUpdateRule") ) )    
        .def( 
            "GetDefaultTimeStep"
            , (double ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))(&::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep)
            , (double ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) )    
        .def( 
            "GetIterateRandomlyOverUpdateRuleCollection"
            , (bool ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))( &::AbstractOnLatticeCellPopulation< 3 >::GetIterateRandomlyOverUpdateRuleCollection ) )    
        .def( 
            "GetNeighbouringNodeIndices"
            , (::std::set< unsigned int > ( ::AbstractOnLatticeCellPopulation<3>::* )( unsigned int ))(&::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices)
            , (::std::set< unsigned int > ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
            , ( bp::arg("index") ) )    
        .def( 
            "GetUpdateNodesInRandomOrder"
            , (bool ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))( &::AbstractOnLatticeCellPopulation< 3 >::GetUpdateNodesInRandomOrder ) )    
        .def( 
            "GetUpdateRuleCollection"
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( ::AbstractOnLatticeCellPopulation<3>::* )(  )const)(&::AbstractOnLatticeCellPopulation< 3 >::GetUpdateRuleCollection)
            , (::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  )const)(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetUpdateRuleCollection) )    
        .def( 
            "OutputCellPopulationParameters"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( ::out_stream & ))(&::AbstractOnLatticeCellPopulation< 3 >::OutputCellPopulationParameters)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "RemoveAllUpdateRules"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )(  ))(&::AbstractOnLatticeCellPopulation< 3 >::RemoveAllUpdateRules)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_RemoveAllUpdateRules) )    
        .def( 
            "SetIterateRandomlyOverUpdateRuleCollection"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 3 >::SetIterateRandomlyOverUpdateRuleCollection )
            , ( bp::arg("iterateRandomly") ) )    
        .def( 
            "SetNode"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( unsigned int,::ChastePoint< 3 > & ))(&::AbstractOnLatticeCellPopulation< 3 >::SetNode)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::ChastePoint< 3 > & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_SetNode)
            , ( bp::arg("index"), bp::arg("rNewLocation") ) )    
        .def( 
            "SetUpdateNodesInRandomOrder"
            , (void ( ::AbstractOnLatticeCellPopulation<3>::* )( bool ))( &::AbstractOnLatticeCellPopulation< 3 >::SetUpdateNodesInRandomOrder )
            , ( bp::arg("updateNodesInRandomOrder") ) )    
        .def( 
            "UpdateCellLocations"
            , bp::pure_virtual( (void ( ::AbstractOnLatticeCellPopulation<3>::* )( double ))(&::AbstractOnLatticeCellPopulation< 3 >::UpdateCellLocations) )
            , ( bp::arg("dt") ) )    
        .def( 
            "AcceptCellWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AcceptCellWriter) )
            , ( bp::arg("pCellWriter"), bp::arg("pCell") ) )    
        .def( 
            "AcceptCellWritersAcrossPopulation"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation) )    
        .def( 
            "AcceptPopulationCountWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationCountWriter) )
            , ( bp::arg("pPopulationCountWriter") ) )    
        .def( 
            "AcceptPopulationWriter"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ))(&::AbstractCellPopulation< 3, 3 >::AcceptPopulationWriter) )
            , ( bp::arg("pPopulationWriter") ) )    
        .def( 
            "AddCell"
            , bp::pure_virtual( (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCell) )
            , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) )    
        .def( 
            "AddCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::AddCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "GetCellDataItemAtPdeNode"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::std::string &,bool,double ))(&::AbstractCellPopulation< 3, 3 >::GetCellDataItemAtPdeNode) )
            , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) )    
        .def( 
            "GetCellUsingLocationIndex"
            , (::CellPtr ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
            , (::CellPtr ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "GetLocationOfCellCentre"
            , bp::pure_virtual( (::boost::numeric::ublas::c_vector< double, 3 > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetLocationOfCellCentre) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetNeighbouringLocationIndices"
            , bp::pure_virtual( (::std::set< unsigned int > ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetNeighbouringLocationIndices) )
            , ( bp::arg("pCell") ) )
        .def( 
            "GetNumNodes"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::GetNumNodes) ) )
        .def( 
            "GetVolumeOfCell"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::GetVolumeOfCell) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "GetWidth"
            , bp::pure_virtual( (double ( ::AbstractCellPopulation<3, 3>::* )( unsigned int const & ))(&::AbstractCellPopulation< 3, 3 >::GetWidth) )
            , ( bp::arg("rDimension") ) )    
        .def( 
            "IsCellAssociatedWithADeletedLocation"
            , bp::pure_virtual( (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsCellAssociatedWithADeletedLocation) )
            , ( bp::arg("pCell") ) )    
        .def( 
            "IsCellAttachedToLocationIndex"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
            , ( bp::arg("index") ) )    
        .def( 
            "IsPdeNodeAssociatedWithNonApoptoticCell"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( unsigned int ))(&::AbstractCellPopulation< 3, 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
            , ( bp::arg("pdeNodeIndex") ) )    
        .def( 
            "IsRoomToDivide"
            , (bool ( ::AbstractCellPopulation<3, 3>::* )( ::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::IsRoomToDivide)
            , (bool ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
            , ( bp::arg("pCell") ) )    
        .def( 
            "OpenWritersFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::OutputFileHandler & ))(&::AbstractCellPopulation< 3, 3 >::OpenWritersFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::OutputFileHandler & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
            , ( bp::arg("rOutputFileHandler") ) )    
        .def( 
            "RemoveCellUsingLocationIndex"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( unsigned int,::CellPtr ))(&::AbstractCellPopulation< 3, 3 >::RemoveCellUsingLocationIndex)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( unsigned int,::CellPtr ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
            , ( bp::arg("index"), bp::arg("pCell") ) )    
        .def( 
            "RemoveDeadCells"
            , bp::pure_virtual( (unsigned int ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::RemoveDeadCells) ) )    
        .def( 
            "SimulationSetupHook"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::AbstractCellBasedSimulation< 3, 3 > * ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
            , ( bp::arg("pSimulation") ) )    
        .def( 
            "Update"
            , bp::pure_virtual( (void ( ::AbstractCellPopulation<3, 3>::* )( bool ))(&::AbstractCellPopulation< 3, 3 >::Update) )
            , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) )    
        .def( 
            "UpdateCellProcessLocation"
            , (void ( ::AbstractCellPopulation<3, 3>::* )(  ))(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) )    
        .def( 
            "Validate"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )(  ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::Validate) )    
        .def( 
            "WriteDataToVisualizerSetupFile"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::out_stream & ))(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::out_stream & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
            , ( bp::arg("pVizSetupFile") ) )    
        .def( 
            "WriteResultsToFiles"
            , (void ( ::AbstractCellPopulation<3, 3>::* )( ::std::string const & ))(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "WriteVtkResultsToFile"
            , (void ( AbstractOnLatticeCellPopulation_less__3__greater__wrapper::* )( ::std::string const & ))(&AbstractOnLatticeCellPopulation_less__3__greater__wrapper::WriteVtkResultsToFile)
            , ( bp::arg("rDirectory") ) );

    { //::CaBasedCellPopulation< 2 >
        typedef bp::class_< CaBasedCellPopulation_less__2__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 2 > >, boost::noncopyable > CaBasedCellPopulation2_exposer_t;
        CaBasedCellPopulation2_exposer_t CaBasedCellPopulation2_exposer = CaBasedCellPopulation2_exposer_t( "CaBasedCellPopulation2", bp::init< PottsMesh< 2 > &, std::vector< boost::shared_ptr<Cell> > &, std::vector< unsigned int >, bp::optional< unsigned int, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("latticeCarryingCapacity")=(unsigned int)(1U), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(false) )) );
        bp::scope CaBasedCellPopulation2_scope( CaBasedCellPopulation2_exposer );
        CaBasedCellPopulation2_exposer.def( bp::init< PottsMesh< 2 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 2 > &, CaBasedCellPopulation< 2 > >();
        { //::CaBasedCellPopulation< 2 >::AcceptCellWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 2, 2 > >,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 2, 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AcceptPopulationWriter
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 2, 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::CaBasedCellPopulation< 2 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::CaBasedCellPopulation< 2 >::AddCell)
                , default_AddCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 2 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::AddUpdateRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::CaBasedCellPopulation< 2 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "EvaluateDivisionPropensity"
                , EvaluateDivisionPropensity_function_type(&::CaBasedCellPopulation< 2 >::EvaluateDivisionPropensity)
                , default_EvaluateDivisionPropensity_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_EvaluateDivisionPropensity)
                , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractCaBasedDivisionRule< 2 > > ( exported_class_t::*GetCaBasedDivisionRule_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCaBasedDivisionRule"
                , GetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 2 >::GetCaBasedDivisionRule ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::CaBasedCellPopulation< 2 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetLocationOfCellCentre
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::CaBasedCellPopulation< 2 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::CaBasedCellPopulation< 2 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetNumNodes
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::CaBasedCellPopulation< 2 >::GetNumNodes)
                , default_GetNumNodes_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetUpdateRuleCollection
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<2> > > const ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::CaBasedCellPopulation< 2 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetVolumeOfCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::CaBasedCellPopulation< 2 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::GetWidth
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::CaBasedCellPopulation< 2 >::GetWidth)
                , default_GetWidth_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::CaBasedCellPopulation< 2 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::CaBasedCellPopulation< 2 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsRoomToDivide
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::CaBasedCellPopulation< 2 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::IsSiteAvailable
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsSiteAvailable"
                , IsSiteAvailable_function_type(&::CaBasedCellPopulation< 2 >::IsSiteAvailable)
                , default_IsSiteAvailable_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsSiteAvailable)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::OpenWritersFiles
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::CaBasedCellPopulation< 2 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::OutputCellPopulationParameters
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::CaBasedCellPopulation< 2 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveAllUpdateRules
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::CaBasedCellPopulation< 2 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 2 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::RemoveDeadCells
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__2__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::CaBasedCellPopulation< 2 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::CaBasedCellPopulation< 2 >::SetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCaBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractCaBasedDivisionRule< 2 > > ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "SetCaBasedDivisionRule"
                , SetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 2 >::SetCaBasedDivisionRule )
                , ( bp::arg("pCaBasedDivisionRule") ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::Update
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "Update"
                , Update_function_type(&::CaBasedCellPopulation< 2 >::Update)
                , default_Update_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::CaBasedCellPopulation< 2 >::UpdateCellLocations
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::CaBasedCellPopulation< 2 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::AcceptCellWritersAcrossPopulation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &CaBasedCellPopulation_less__2__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__2__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__2__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 2, 2 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::SimulationSetupHook
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 2, 2 > * ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 2, 2 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 2, 2 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 2, 2 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles
        
            typedef CaBasedCellPopulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( CaBasedCellPopulation_less__2__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            CaBasedCellPopulation2_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 2, 2 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&CaBasedCellPopulation_less__2__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    { //::CaBasedCellPopulation< 3 >
        typedef bp::class_< CaBasedCellPopulation_less__3__greater__wrapper, bp::bases< AbstractOnLatticeCellPopulation< 3 > >, boost::noncopyable > CaBasedCellPopulation3_exposer_t;
        CaBasedCellPopulation3_exposer_t CaBasedCellPopulation3_exposer = CaBasedCellPopulation3_exposer_t( "CaBasedCellPopulation3", bp::init< PottsMesh< 3 > &, std::vector< boost::shared_ptr<Cell> > &, std::vector< unsigned int >, bp::optional< unsigned int, bool, bool > >(( bp::arg("rMesh"), bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("latticeCarryingCapacity")=(unsigned int)(1U), bp::arg("deleteMesh")=(bool)(false), bp::arg("validate")=(bool)(false) )) );
        bp::scope CaBasedCellPopulation3_scope( CaBasedCellPopulation3_exposer );
        CaBasedCellPopulation3_exposer.def( bp::init< PottsMesh< 3 > & >(( bp::arg("rMesh") )) );
        bp::implicitly_convertible< PottsMesh< 3 > &, CaBasedCellPopulation< 3 > >();
        { //::CaBasedCellPopulation< 3 >::AcceptCellWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptCellWriter_function_type)( ::boost::shared_ptr< AbstractCellWriter< 3, 3 > >,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptCellWriter"
                , AcceptCellWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptCellWriter)
                , default_AcceptCellWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWriter)
                , ( bp::arg("pCellWriter"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationCountWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationCountWriter< 3, 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptPopulationCountWriter"
                , AcceptPopulationCountWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptPopulationCountWriter)
                , default_AcceptPopulationCountWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationCountWriter)
                , ( bp::arg("pPopulationCountWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AcceptPopulationWriter
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AcceptPopulationWriter_function_type)( ::boost::shared_ptr< AbstractCellPopulationWriter< 3, 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptPopulationWriter"
                , AcceptPopulationWriter_function_type(&::CaBasedCellPopulation< 3 >::AcceptPopulationWriter)
                , default_AcceptPopulationWriter_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptPopulationWriter)
                , ( bp::arg("pPopulationWriter") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddCell_function_type)( ::CellPtr,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddCell"
                , AddCell_function_type(&::CaBasedCellPopulation< 3 >::AddCell)
                , default_AddCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddCell)
                , ( bp::arg("pNewCell"), bp::arg("pParentCell")=::CellPtr( ) ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddCellUsingLocationIndex"
                , AddCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 3 >::AddCellUsingLocationIndex)
                , default_AddCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::AddUpdateRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type(&::CaBasedCellPopulation< 3 >::AddUpdateRule)
                , default_AddUpdateRule_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_AddUpdateRule)
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_EvaluateDivisionPropensity_function_type)( unsigned int,unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "EvaluateDivisionPropensity"
                , EvaluateDivisionPropensity_function_type(&::CaBasedCellPopulation< 3 >::EvaluateDivisionPropensity)
                , default_EvaluateDivisionPropensity_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_EvaluateDivisionPropensity)
                , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractCaBasedDivisionRule< 3 > > ( exported_class_t::*GetCaBasedDivisionRule_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCaBasedDivisionRule"
                , GetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 3 >::GetCaBasedDivisionRule ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetCellDataItemAtPdeNode_function_type)( unsigned int,::std::string &,bool,double ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCellDataItemAtPdeNode"
                , GetCellDataItemAtPdeNode_function_type(&::CaBasedCellPopulation< 3 >::GetCellDataItemAtPdeNode)
                , default_GetCellDataItemAtPdeNode_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetCellDataItemAtPdeNode)
                , ( bp::arg("pdeNodeIndex"), bp::arg("rVariableName"), bp::arg("dirichletBoundaryConditionApplies")=(bool)(false), bp::arg("dirichletBoundaryValue")=0. ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetLocationOfCellCentre
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetLocationOfCellCentre_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetLocationOfCellCentre"
                , GetLocationOfCellCentre_function_type(&::CaBasedCellPopulation< 3 >::GetLocationOfCellCentre)
                , default_GetLocationOfCellCentre_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetLocationOfCellCentre)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringLocationIndices_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNeighbouringLocationIndices"
                , GetNeighbouringLocationIndices_function_type(&::CaBasedCellPopulation< 3 >::GetNeighbouringLocationIndices)
                , default_GetNeighbouringLocationIndices_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringLocationIndices)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetNumNodes
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumNodes_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNumNodes_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNumNodes"
                , GetNumNodes_function_type(&::CaBasedCellPopulation< 3 >::GetNumNodes)
                , default_GetNumNodes_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNumNodes) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetUpdateRuleCollection
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( exported_class_t::*GetUpdateRuleCollection_function_type)(  ) const;
            typedef ::std::vector< boost::shared_ptr<AbstractUpdateRule<3> > > const ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetUpdateRuleCollection_function_type)(  ) const;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetUpdateRuleCollection"
                , GetUpdateRuleCollection_function_type(&::CaBasedCellPopulation< 3 >::GetUpdateRuleCollection)
                , default_GetUpdateRuleCollection_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetUpdateRuleCollection) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetVolumeOfCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetVolumeOfCell_function_type)( ::CellPtr ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetVolumeOfCell_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetVolumeOfCell"
                , GetVolumeOfCell_function_type(&::CaBasedCellPopulation< 3 >::GetVolumeOfCell)
                , default_GetVolumeOfCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetVolumeOfCell)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::GetWidth
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetWidth_function_type)( unsigned int const & ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetWidth_function_type)( unsigned int const & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetWidth"
                , GetWidth_function_type(&::CaBasedCellPopulation< 3 >::GetWidth)
                , default_GetWidth_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetWidth)
                , ( bp::arg("rDimension") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAssociatedWithADeletedLocation_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsCellAssociatedWithADeletedLocation"
                , IsCellAssociatedWithADeletedLocation_function_type(&::CaBasedCellPopulation< 3 >::IsCellAssociatedWithADeletedLocation)
                , default_IsCellAssociatedWithADeletedLocation_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsCellAssociatedWithADeletedLocation)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsPdeNodeAssociatedWithNonApoptoticCell"
                , IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&::CaBasedCellPopulation< 3 >::IsPdeNodeAssociatedWithNonApoptoticCell)
                , default_IsPdeNodeAssociatedWithNonApoptoticCell_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsPdeNodeAssociatedWithNonApoptoticCell)
                , ( bp::arg("pdeNodeIndex") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsRoomToDivide
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsRoomToDivide_function_type)( ::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsRoomToDivide_function_type)( ::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsRoomToDivide"
                , IsRoomToDivide_function_type(&::CaBasedCellPopulation< 3 >::IsRoomToDivide)
                , default_IsRoomToDivide_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsRoomToDivide)
                , ( bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::IsSiteAvailable
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsSiteAvailable_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsSiteAvailable"
                , IsSiteAvailable_function_type(&::CaBasedCellPopulation< 3 >::IsSiteAvailable)
                , default_IsSiteAvailable_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsSiteAvailable)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::OpenWritersFiles
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_OpenWritersFiles_function_type)( ::OutputFileHandler & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "OpenWritersFiles"
                , OpenWritersFiles_function_type(&::CaBasedCellPopulation< 3 >::OpenWritersFiles)
                , default_OpenWritersFiles_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_OpenWritersFiles)
                , ( bp::arg("rOutputFileHandler") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::OutputCellPopulationParameters
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_OutputCellPopulationParameters_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "OutputCellPopulationParameters"
                , OutputCellPopulationParameters_function_type(&::CaBasedCellPopulation< 3 >::OutputCellPopulationParameters)
                , default_OutputCellPopulationParameters_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_OutputCellPopulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveAllUpdateRules
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveAllUpdateRules_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type(&::CaBasedCellPopulation< 3 >::RemoveAllUpdateRules)
                , default_RemoveAllUpdateRules_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveAllUpdateRules) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveCellUsingLocationIndex_function_type)( unsigned int,::CellPtr ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveCellUsingLocationIndex"
                , RemoveCellUsingLocationIndex_function_type(&::CaBasedCellPopulation< 3 >::RemoveCellUsingLocationIndex)
                , default_RemoveCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveCellUsingLocationIndex)
                , ( bp::arg("index"), bp::arg("pCell") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::RemoveDeadCells
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*RemoveDeadCells_function_type)(  ) ;
            typedef unsigned int ( CaBasedCellPopulation_less__3__greater__wrapper::*default_RemoveDeadCells_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "RemoveDeadCells"
                , RemoveDeadCells_function_type(&::CaBasedCellPopulation< 3 >::RemoveDeadCells)
                , default_RemoveDeadCells_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_RemoveDeadCells) );
        
        }
        { //::CaBasedCellPopulation< 3 >::SetCaBasedDivisionRule
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCaBasedDivisionRule_function_type)( ::boost::shared_ptr< AbstractCaBasedDivisionRule< 3 > > ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SetCaBasedDivisionRule"
                , SetCaBasedDivisionRule_function_type( &::CaBasedCellPopulation< 3 >::SetCaBasedDivisionRule )
                , ( bp::arg("pCaBasedDivisionRule") ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::Update
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_Update_function_type)( bool ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "Update"
                , Update_function_type(&::CaBasedCellPopulation< 3 >::Update)
                , default_Update_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_Update)
                , ( bp::arg("hasHadBirthsOrDeaths")=(bool)(true) ) );
        
        }
        { //::CaBasedCellPopulation< 3 >::UpdateCellLocations
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellLocations_function_type)( double ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellLocations_function_type)( double ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "UpdateCellLocations"
                , UpdateCellLocations_function_type(&::CaBasedCellPopulation< 3 >::UpdateCellLocations)
                , default_UpdateCellLocations_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellLocations)
                , ( bp::arg("dt") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::AcceptCellWritersAcrossPopulation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*AcceptCellWritersAcrossPopulation_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "AcceptCellWritersAcrossPopulation"
                , AcceptCellWritersAcrossPopulation_function_type( &CaBasedCellPopulation_less__3__greater__wrapper::default_AcceptCellWritersAcrossPopulation ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::CellPtr ( exported_class_t::*GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            typedef ::CellPtr ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetCellUsingLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetCellUsingLocationIndex"
                , GetCellUsingLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::GetCellUsingLocationIndex)
                , default_GetCellUsingLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetCellUsingLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetDefaultTimeStep_function_type)(  ) ;
            typedef double ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetDefaultTimeStep_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetDefaultTimeStep"
                , GetDefaultTimeStep_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetDefaultTimeStep)
                , default_GetDefaultTimeStep_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetDefaultTimeStep) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef ::std::set< unsigned int > ( exported_class_t::*GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            typedef ::std::set< unsigned int > ( CaBasedCellPopulation_less__3__greater__wrapper::*default_GetNeighbouringNodeIndices_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "GetNeighbouringNodeIndices"
                , GetNeighbouringNodeIndices_function_type(&::AbstractOnLatticeCellPopulation< 3 >::GetNeighbouringNodeIndices)
                , default_GetNeighbouringNodeIndices_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_GetNeighbouringNodeIndices)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            typedef bool ( CaBasedCellPopulation_less__3__greater__wrapper::*default_IsCellAttachedToLocationIndex_function_type)( unsigned int ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "IsCellAttachedToLocationIndex"
                , IsCellAttachedToLocationIndex_function_type(&::AbstractCellPopulation< 3, 3 >::IsCellAttachedToLocationIndex)
                , default_IsCellAttachedToLocationIndex_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_IsCellAttachedToLocationIndex)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractOnLatticeCellPopulation< 3 >::SetNode
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_SetNode_function_type)( unsigned int,::ChastePoint< 3 > & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SetNode"
                , SetNode_function_type(&::AbstractOnLatticeCellPopulation< 3 >::SetNode)
                , default_SetNode_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_SetNode)
                , ( bp::arg("index"), bp::arg("rNewLocation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::SimulationSetupHook
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_SimulationSetupHook_function_type)( ::AbstractCellBasedSimulation< 3, 3 > * ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "SimulationSetupHook"
                , SimulationSetupHook_function_type(&::AbstractCellPopulation< 3, 3 >::SimulationSetupHook)
                , default_SimulationSetupHook_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_SimulationSetupHook)
                , ( bp::arg("pSimulation") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellProcessLocation_function_type)(  ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_UpdateCellProcessLocation_function_type)(  ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "UpdateCellProcessLocation"
                , UpdateCellProcessLocation_function_type(&::AbstractCellPopulation< 3, 3 >::UpdateCellProcessLocation)
                , default_UpdateCellProcessLocation_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_UpdateCellProcessLocation) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_WriteDataToVisualizerSetupFile_function_type)( ::out_stream & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "WriteDataToVisualizerSetupFile"
                , WriteDataToVisualizerSetupFile_function_type(&::AbstractCellPopulation< 3, 3 >::WriteDataToVisualizerSetupFile)
                , default_WriteDataToVisualizerSetupFile_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_WriteDataToVisualizerSetupFile)
                , ( bp::arg("pVizSetupFile") ) );
        
        }
        { //::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles
        
            typedef CaBasedCellPopulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*WriteResultsToFiles_function_type)( ::std::string const & ) ;
            typedef void ( CaBasedCellPopulation_less__3__greater__wrapper::*default_WriteResultsToFiles_function_type)( ::std::string const & ) ;
            
            CaBasedCellPopulation3_exposer.def( 
                "WriteResultsToFiles"
                , WriteResultsToFiles_function_type(&::AbstractCellPopulation< 3, 3 >::WriteResultsToFiles)
                , default_WriteResultsToFiles_function_type(&CaBasedCellPopulation_less__3__greater__wrapper::default_WriteResultsToFiles)
                , ( bp::arg("rDirectory") ) );
        
        }
    }

    bp::class_< CellPropertyCollection >( "CellPropertyCollection", bp::init< >() )    
        .def( 
            "AddProperty"
            , (void ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & ))( &::CellPropertyCollection::AddProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "Begin"
            , (::CellPropertyCollection::Iterator ( ::CellPropertyCollection::* )(  ))( &::CellPropertyCollection::Begin ) )    
        .def( 
            "End"
            , (::CellPropertyCollection::Iterator ( ::CellPropertyCollection::* )(  ))( &::CellPropertyCollection::End ) )    
        .def( 
            "GetProperty"
            , (::boost::shared_ptr< AbstractCellProperty > ( ::CellPropertyCollection::* )(  )const)( &::CellPropertyCollection::GetProperty ) )    
        .def( 
            "GetSize"
            , (unsigned int ( ::CellPropertyCollection::* )(  )const)( &::CellPropertyCollection::GetSize ) )    
        .def( 
            "HasProperty"
            , (bool ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & )const)( &::CellPropertyCollection::HasProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "RemoveProperty"
            , (void ( ::CellPropertyCollection::* )( ::boost::shared_ptr< AbstractCellProperty > const & ))( &::CellPropertyCollection::RemoveProperty )
            , ( bp::arg("rProp") ) )    
        .def( 
            "SetCellPropertyRegistry"
            , (void ( ::CellPropertyCollection::* )( ::CellPropertyRegistry * ))( &::CellPropertyCollection::SetCellPropertyRegistry )
            , ( bp::arg("pRegistry") ) );

    { //::Cell
        typedef bp::class_< Cell, boost::noncopyable > Cell_exposer_t;
        Cell_exposer_t Cell_exposer = Cell_exposer_t( "Cell", bp::init< boost::shared_ptr< AbstractCellProperty >, AbstractCellCycleModel *, bp::optional< AbstractSrnModel *, bool, CellPropertyCollection > >(( bp::arg("pMutationState"), bp::arg("pCellCycleModel"), bp::arg("pSrnModel")=__null, bp::arg("archiving")=(bool)(false), bp::arg("cellPropertyCollection")=::CellPropertyCollection( ) )) );
        bp::scope Cell_scope( Cell_exposer );
        { //::Cell::AddCellProperty
        
            typedef void ( ::Cell::*AddCellProperty_function_type)( ::boost::shared_ptr< AbstractCellProperty > const & ) ;
            
            Cell_exposer.def( 
                "AddCellProperty"
                , AddCellProperty_function_type( &::Cell::AddCellProperty )
                , ( bp::arg("rProperty") ) );
        
        }
        { //::Cell::Divide
        
            typedef ::CellPtr ( ::Cell::*Divide_function_type)(  ) ;
            
            Cell_exposer.def( 
                "Divide"
                , Divide_function_type( &::Cell::Divide ) );
        
        }
        { //::Cell::GetAge
        
            typedef double ( ::Cell::*GetAge_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetAge"
                , GetAge_function_type( &::Cell::GetAge ) );
        
        }
        { //::Cell::GetAncestor
        
            typedef unsigned int ( ::Cell::*GetAncestor_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetAncestor"
                , GetAncestor_function_type( &::Cell::GetAncestor ) );
        
        }
        { //::Cell::GetApoptosisTime
        
            typedef double ( ::Cell::*GetApoptosisTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetApoptosisTime"
                , GetApoptosisTime_function_type( &::Cell::GetApoptosisTime ) );
        
        }
        { //::Cell::GetBirthTime
        
            typedef double ( ::Cell::*GetBirthTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetBirthTime"
                , GetBirthTime_function_type( &::Cell::GetBirthTime ) );
        
        }
        { //::Cell::GetCellData
        
            typedef ::boost::shared_ptr< CellData > ( ::Cell::*GetCellData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellData"
                , GetCellData_function_type( &::Cell::GetCellData ) );
        
        }
        { //::Cell::GetCellId
        
            typedef unsigned int ( ::Cell::*GetCellId_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellId"
                , GetCellId_function_type( &::Cell::GetCellId ) );
        
        }
        { //::Cell::GetCellProliferativeType
        
            typedef ::boost::shared_ptr< AbstractCellProliferativeType > ( ::Cell::*GetCellProliferativeType_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellProliferativeType"
                , GetCellProliferativeType_function_type( &::Cell::GetCellProliferativeType ) );
        
        }
        { //::Cell::GetCellVecData
        
            typedef ::boost::shared_ptr< CellVecData > ( ::Cell::*GetCellVecData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetCellVecData"
                , GetCellVecData_function_type( &::Cell::GetCellVecData ) );
        
        }
        { //::Cell::GetMutationState
        
            typedef ::boost::shared_ptr< AbstractCellMutationState > ( ::Cell::*GetMutationState_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetMutationState"
                , GetMutationState_function_type( &::Cell::GetMutationState ) );
        
        }
        { //::Cell::GetStartOfApoptosisTime
        
            typedef double ( ::Cell::*GetStartOfApoptosisTime_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetStartOfApoptosisTime"
                , GetStartOfApoptosisTime_function_type( &::Cell::GetStartOfApoptosisTime ) );
        
        }
        { //::Cell::GetTimeUntilDeath
        
            typedef double ( ::Cell::*GetTimeUntilDeath_function_type)(  ) const;
            
            Cell_exposer.def( 
                "GetTimeUntilDeath"
                , GetTimeUntilDeath_function_type( &::Cell::GetTimeUntilDeath ) );
        
        }
        { //::Cell::HasApoptosisBegun
        
            typedef bool ( ::Cell::*HasApoptosisBegun_function_type)(  ) const;
            
            Cell_exposer.def( 
                "HasApoptosisBegun"
                , HasApoptosisBegun_function_type( &::Cell::HasApoptosisBegun ) );
        
        }
        { //::Cell::HasCellVecData
        
            typedef bool ( ::Cell::*HasCellVecData_function_type)(  ) const;
            
            Cell_exposer.def( 
                "HasCellVecData"
                , HasCellVecData_function_type( &::Cell::HasCellVecData ) );
        
        }
        { //::Cell::InitialiseCellCycleModel
        
            typedef void ( ::Cell::*InitialiseCellCycleModel_function_type)(  ) ;
            
            Cell_exposer.def( 
                "InitialiseCellCycleModel"
                , InitialiseCellCycleModel_function_type( &::Cell::InitialiseCellCycleModel ) );
        
        }
        { //::Cell::InitialiseSrnModel
        
            typedef void ( ::Cell::*InitialiseSrnModel_function_type)(  ) ;
            
            Cell_exposer.def( 
                "InitialiseSrnModel"
                , InitialiseSrnModel_function_type( &::Cell::InitialiseSrnModel ) );
        
        }
        { //::Cell::IsDead
        
            typedef bool ( ::Cell::*IsDead_function_type)(  ) ;
            
            Cell_exposer.def( 
                "IsDead"
                , IsDead_function_type( &::Cell::IsDead ) );
        
        }
        { //::Cell::IsLogged
        
            typedef bool ( ::Cell::*IsLogged_function_type)(  ) ;
            
            Cell_exposer.def( 
                "IsLogged"
                , IsLogged_function_type( &::Cell::IsLogged ) );
        
        }
        { //::Cell::Kill
        
            typedef void ( ::Cell::*Kill_function_type)(  ) ;
            
            Cell_exposer.def( 
                "Kill"
                , Kill_function_type( &::Cell::Kill ) );
        
        }
        { //::Cell::ReadyToDivide
        
            typedef bool ( ::Cell::*ReadyToDivide_function_type)(  ) ;
            
            Cell_exposer.def( 
                "ReadyToDivide"
                , ReadyToDivide_function_type( &::Cell::ReadyToDivide ) );
        
        }
        { //::Cell::SetAncestor
        
            typedef void ( ::Cell::*SetAncestor_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetAncestor"
                , SetAncestor_function_type( &::Cell::SetAncestor )
                , ( bp::arg("pCellAncestor") ) );
        
        }
        { //::Cell::SetApoptosisTime
        
            typedef void ( ::Cell::*SetApoptosisTime_function_type)( double ) ;
            
            Cell_exposer.def( 
                "SetApoptosisTime"
                , SetApoptosisTime_function_type( &::Cell::SetApoptosisTime )
                , ( bp::arg("apoptosisTime") ) );
        
        }
        { //::Cell::SetBirthTime
        
            typedef void ( ::Cell::*SetBirthTime_function_type)( double ) ;
            
            Cell_exposer.def( 
                "SetBirthTime"
                , SetBirthTime_function_type( &::Cell::SetBirthTime )
                , ( bp::arg("birthTime") ) );
        
        }
        { //::Cell::SetCellCycleModel
        
            typedef void ( ::Cell::*SetCellCycleModel_function_type)( ::AbstractCellCycleModel * ) ;
            
            Cell_exposer.def( 
                "SetCellCycleModel"
                , SetCellCycleModel_function_type( &::Cell::SetCellCycleModel )
                , ( bp::arg("pCellCycleModel") ) );
        
        }
        { //::Cell::SetCellProliferativeType
        
            typedef void ( ::Cell::*SetCellProliferativeType_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetCellProliferativeType"
                , SetCellProliferativeType_function_type( &::Cell::SetCellProliferativeType )
                , ( bp::arg("pProliferativeType") ) );
        
        }
        { //::Cell::SetLogged
        
            typedef void ( ::Cell::*SetLogged_function_type)(  ) ;
            
            Cell_exposer.def( 
                "SetLogged"
                , SetLogged_function_type( &::Cell::SetLogged ) );
        
        }
        { //::Cell::SetMutationState
        
            typedef void ( ::Cell::*SetMutationState_function_type)( ::boost::shared_ptr< AbstractCellProperty > ) ;
            
            Cell_exposer.def( 
                "SetMutationState"
                , SetMutationState_function_type( &::Cell::SetMutationState )
                , ( bp::arg("pMutationState") ) );
        
        }
        { //::Cell::SetSrnModel
        
            typedef void ( ::Cell::*SetSrnModel_function_type)( ::AbstractSrnModel * ) ;
            
            Cell_exposer.def( 
                "SetSrnModel"
                , SetSrnModel_function_type( &::Cell::SetSrnModel )
                , ( bp::arg("pSrnModel") ) );
        
        }
        { //::Cell::StartApoptosis
        
            typedef void ( ::Cell::*StartApoptosis_function_type)( bool ) ;
            
            Cell_exposer.def( 
                "StartApoptosis"
                , StartApoptosis_function_type( &::Cell::StartApoptosis )
                , ( bp::arg("setDeathTime")=(bool)(true) ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< Cell > >();
        bp::implicitly_convertible< boost::shared_ptr< Cell >, boost::shared_ptr< boost::enable_shared_from_this< Cell > > >();
    }

    bp::class_< CellsGenerator< UniformCellCycleModel, 2 > >( "CellsGeneratorUniformCellCycleModel_2" )    
        .def( 
            "GenerateBasic"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateBasic )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("locationIndices")=std::vector<unsigned int>(), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateBasicRandom"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,unsigned int,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateBasicRandom )
            , ( bp::arg("rCells"), bp::arg("numCells"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) )    
        .def( 
            "GenerateGivenLocationIndices"
            , (void ( ::CellsGenerator<UniformCellCycleModel, 2>::* )( ::std::vector< boost::shared_ptr<Cell> > &,::std::vector< unsigned int > const,::boost::shared_ptr< AbstractCellProperty > ))( &::CellsGenerator< UniformCellCycleModel, 2 >::GenerateGivenLocationIndices )
            , ( bp::arg("rCells"), bp::arg("locationIndices"), bp::arg("pCellProliferativeType")=boost::shared_ptr<AbstractCellProperty>() ) );

    bp::class_< DefaultCellProliferativeType >( "DefaultCellProliferativeType", bp::init< >() );

    bp::class_< DiffusionCaUpdateRule_less__2__greater__wrapper, bp::bases< AbstractCaUpdateRule< 2 > > >( "DiffusionCaUpdateRule2", bp::init< >() )    
        .def( 
            "EvaluateProbability"
            , (double ( ::DiffusionCaUpdateRule<2>::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&::DiffusionCaUpdateRule< 2 >::EvaluateProbability)
            , (double ( DiffusionCaUpdateRule_less__2__greater__wrapper::* )( unsigned int,unsigned int,::CaBasedCellPopulation< 2 > &,double,double,::CellPtr ))(&DiffusionCaUpdateRule_less__2__greater__wrapper::default_EvaluateProbability)
            , ( bp::arg("currentNodeIndex"), bp::arg("targetNodeIndex"), bp::arg("rCellPopulation"), bp::arg("dt"), bp::arg("deltaX"), bp::arg("cell") ) )    
        .def( 
            "GetDiffusionParameter"
            , (double ( ::DiffusionCaUpdateRule<2>::* )(  ))( &::DiffusionCaUpdateRule< 2 >::GetDiffusionParameter ) )    
        .def( 
            "OutputUpdateRuleParameters"
            , (void ( ::DiffusionCaUpdateRule<2>::* )( ::out_stream & ))(&::DiffusionCaUpdateRule< 2 >::OutputUpdateRuleParameters)
            , (void ( DiffusionCaUpdateRule_less__2__greater__wrapper::* )( ::out_stream & ))(&DiffusionCaUpdateRule_less__2__greater__wrapper::default_OutputUpdateRuleParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetDiffusionParameter"
            , (void ( ::DiffusionCaUpdateRule<2>::* )( double ))( &::DiffusionCaUpdateRule< 2 >::SetDiffusionParameter )
            , ( bp::arg("diffusionParameter") ) );

    bp::class_< GenericCellsGenerator< 2 > >( "GenericCellsGenerator2", bp::init< >() )    
        .def( 
            "GenerateBasic"
            , (::std::vector< boost::shared_ptr<Cell> > ( ::GenericCellsGenerator<2>::* )(  ))( &::GenericCellsGenerator< 2 >::GenerateBasic ) )    
        .def( 
            "SetCellCycleModel"
            , (void ( ::GenericCellsGenerator<2>::* )( ::boost::shared_ptr< AbstractCellCycleModel > ))( &::GenericCellsGenerator< 2 >::SetCellCycleModel )
            , ( bp::arg("pCellCycleModel") ) )    
        .def( 
            "SetCellMutationState"
            , (void ( ::GenericCellsGenerator<2>::* )( ::boost::shared_ptr< AbstractCellProperty > ))( &::GenericCellsGenerator< 2 >::SetCellMutationState )
            , ( bp::arg("pMutationState") ) )    
        .def( 
            "SetCellProliferativeType"
            , (void ( ::GenericCellsGenerator<2>::* )( ::boost::shared_ptr< AbstractCellProperty > ))( &::GenericCellsGenerator< 2 >::SetCellProliferativeType )
            , ( bp::arg("pProliferativeType") ) )    
        .def( 
            "SetNumCells"
            , (void ( ::GenericCellsGenerator<2>::* )( unsigned int ))( &::GenericCellsGenerator< 2 >::SetNumCells )
            , ( bp::arg("numCells") ) );

    bp::class_< GenericCellsGenerator< 3 > >( "GenericCellsGenerator3", bp::init< >() )    
        .def( 
            "GenerateBasic"
            , (::std::vector< boost::shared_ptr<Cell> > ( ::GenericCellsGenerator<3>::* )(  ))( &::GenericCellsGenerator< 3 >::GenerateBasic ) )    
        .def( 
            "SetCellCycleModel"
            , (void ( ::GenericCellsGenerator<3>::* )( ::boost::shared_ptr< AbstractCellCycleModel > ))( &::GenericCellsGenerator< 3 >::SetCellCycleModel )
            , ( bp::arg("pCellCycleModel") ) )    
        .def( 
            "SetCellMutationState"
            , (void ( ::GenericCellsGenerator<3>::* )( ::boost::shared_ptr< AbstractCellProperty > ))( &::GenericCellsGenerator< 3 >::SetCellMutationState )
            , ( bp::arg("pMutationState") ) )    
        .def( 
            "SetCellProliferativeType"
            , (void ( ::GenericCellsGenerator<3>::* )( ::boost::shared_ptr< AbstractCellProperty > ))( &::GenericCellsGenerator< 3 >::SetCellProliferativeType )
            , ( bp::arg("pProliferativeType") ) )    
        .def( 
            "SetNumCells"
            , (void ( ::GenericCellsGenerator<3>::* )( unsigned int ))( &::GenericCellsGenerator< 3 >::SetNumCells )
            , ( bp::arg("numCells") ) );

    { //::OnLatticeSimulation< 2 >
        typedef bp::class_< OnLatticeSimulation_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 2, 2 > >, boost::noncopyable > OnLatticeSimulation2_exposer_t;
        OnLatticeSimulation2_exposer_t OnLatticeSimulation2_exposer = OnLatticeSimulation2_exposer_t( "OnLatticeSimulation2", bp::init< AbstractCellPopulation< 2, 2 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OnLatticeSimulation2_scope( OnLatticeSimulation2_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 2, 2 > &, OnLatticeSimulation< 2 > >();
        { //::OnLatticeSimulation< 2 >::AddUpdateRule
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 2 > > ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type( &::OnLatticeSimulation< 2 >::AddUpdateRule )
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OnLatticeSimulation< 2 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OnLatticeSimulation_less__2__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::OutputSimulationParameters
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OnLatticeSimulation< 2 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OnLatticeSimulation_less__2__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 2 >::RemoveAllUpdateRules
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type( &::OnLatticeSimulation< 2 >::RemoveAllUpdateRules ) );
        
        }
        { //::OnLatticeSimulation< 2 >::UpdateCellLocationsAndTopology
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OnLatticeSimulation< 2 >::UpdateCellPopulation
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellBirth
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__2__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::DoCellRemoval
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__2__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OnLatticeSimulation_less__2__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::OutputSimulationSetup
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OnLatticeSimulation_less__2__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::SetupSolve
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::StoppingEventHasOccurred
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef bool ( OnLatticeSimulation_less__2__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 2, 2 >::WriteVisualizerSetupFile
        
            typedef OnLatticeSimulation< 2 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__2__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OnLatticeSimulation2_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OnLatticeSimulation_less__2__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
    }

    { //::OnLatticeSimulation< 3 >
        typedef bp::class_< OnLatticeSimulation_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulation< 3, 3 > >, boost::noncopyable > OnLatticeSimulation3_exposer_t;
        OnLatticeSimulation3_exposer_t OnLatticeSimulation3_exposer = OnLatticeSimulation3_exposer_t( "OnLatticeSimulation3", bp::init< AbstractCellPopulation< 3, 3 > &, bp::optional< bool, bool > >(( bp::arg("rCellPopulation"), bp::arg("deleteCellPopulationInDestructor")=(bool)(false), bp::arg("initialiseCells")=(bool)(true) )) );
        bp::scope OnLatticeSimulation3_scope( OnLatticeSimulation3_exposer );
        bp::implicitly_convertible< AbstractCellPopulation< 3, 3 > &, OnLatticeSimulation< 3 > >();
        { //::OnLatticeSimulation< 3 >::AddUpdateRule
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddUpdateRule_function_type)( ::boost::shared_ptr< AbstractUpdateRule< 3 > > ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "AddUpdateRule"
                , AddUpdateRule_function_type( &::OnLatticeSimulation< 3 >::AddUpdateRule )
                , ( bp::arg("pUpdateRule") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*default_OutputAdditionalSimulationSetup_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputAdditionalSimulationSetup"
                , OutputAdditionalSimulationSetup_function_type(&::OnLatticeSimulation< 3 >::OutputAdditionalSimulationSetup)
                , default_OutputAdditionalSimulationSetup_function_type(&OnLatticeSimulation_less__3__greater__wrapper::default_OutputAdditionalSimulationSetup)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::OutputSimulationParameters
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationParameters_function_type)( ::out_stream & ) ;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*default_OutputSimulationParameters_function_type)( ::out_stream & ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputSimulationParameters"
                , OutputSimulationParameters_function_type(&::OnLatticeSimulation< 3 >::OutputSimulationParameters)
                , default_OutputSimulationParameters_function_type(&OnLatticeSimulation_less__3__greater__wrapper::default_OutputSimulationParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::OnLatticeSimulation< 3 >::RemoveAllUpdateRules
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveAllUpdateRules_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "RemoveAllUpdateRules"
                , RemoveAllUpdateRules_function_type( &::OnLatticeSimulation< 3 >::RemoveAllUpdateRules ) );
        
        }
        { //::OnLatticeSimulation< 3 >::UpdateCellLocationsAndTopology
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*UpdateCellLocationsAndTopology_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "UpdateCellLocationsAndTopology"
                , UpdateCellLocationsAndTopology_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_UpdateCellLocationsAndTopology ) );
        
        }
        { //::OnLatticeSimulation< 3 >::UpdateCellPopulation
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*UpdateCellPopulation_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "UpdateCellPopulation"
                , UpdateCellPopulation_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_UpdateCellPopulation ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellBirth
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__3__greater__wrapper::*DoCellBirth_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "DoCellBirth"
                , DoCellBirth_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_DoCellBirth ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::DoCellRemoval
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef unsigned int ( OnLatticeSimulation_less__3__greater__wrapper::*DoCellRemoval_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "DoCellRemoval"
                , DoCellRemoval_function_type( &OnLatticeSimulation_less__3__greater__wrapper::DoCellRemoval ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::OutputSimulationSetup
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*OutputSimulationSetup_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "OutputSimulationSetup"
                , OutputSimulationSetup_function_type( &OnLatticeSimulation_less__3__greater__wrapper::OutputSimulationSetup ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::SetupSolve
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*SetupSolve_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_SetupSolve ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::StoppingEventHasOccurred
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef bool ( OnLatticeSimulation_less__3__greater__wrapper::*StoppingEventHasOccurred_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "StoppingEventHasOccurred"
                , StoppingEventHasOccurred_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_StoppingEventHasOccurred ) );
        
        }
        { //::AbstractCellBasedSimulation< 3, 3 >::WriteVisualizerSetupFile
        
            typedef OnLatticeSimulation< 3 > exported_class_t;
            typedef void ( OnLatticeSimulation_less__3__greater__wrapper::*WriteVisualizerSetupFile_function_type)(  ) ;
            
            OnLatticeSimulation3_exposer.def( 
                "WriteVisualizerSetupFile"
                , WriteVisualizerSetupFile_function_type( &OnLatticeSimulation_less__3__greater__wrapper::default_WriteVisualizerSetupFile ) );
        
        }
    }

    bp::class_< SimulationTime_wrapper, boost::noncopyable >( "SimulationTime", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "Destroy"
            , (void (*)(  ))( &::SimulationTime::Destroy ) )    
        .def( 
            "GetTime"
            , (double ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTime ) )    
        .def( 
            "GetTimeStep"
            , (double ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTimeStep ) )    
        .def( 
            "GetTimeStepsElapsed"
            , (unsigned int ( ::SimulationTime::* )(  )const)( &::SimulationTime::GetTimeStepsElapsed ) )    
        .def( 
            "IncrementTimeOneStep"
            , (void ( ::SimulationTime::* )(  ))( &::SimulationTime::IncrementTimeOneStep ) )    
        .def( 
            "Instance"
            , (::SimulationTime * (*)(  ))( &::SimulationTime::Instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "IsEndTimeAndNumberOfTimeStepsSetUp"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsEndTimeAndNumberOfTimeStepsSetUp ) )    
        .def( 
            "IsFinished"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsFinished ) )    
        .def( 
            "IsStartTimeSetUp"
            , (bool ( ::SimulationTime::* )(  )const)( &::SimulationTime::IsStartTimeSetUp ) )    
        .def( 
            "ResetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationTime::* )( double const &,unsigned int const & ))( &::SimulationTime::ResetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("rEndTime"), bp::arg("rNumberOfTimeStepsInThisRun") ) )    
        .def( 
            "SetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationTime::* )( double,unsigned int ))( &::SimulationTime::SetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("endTime"), bp::arg("totalTimeStepsInSimulation") ) )    
        .def( 
            "SetStartTime"
            , (void ( ::SimulationTime::* )( double ))( &::SimulationTime::SetStartTime )
            , ( bp::arg("startTime") ) )    
        .staticmethod( "Destroy" )    
        .staticmethod( "Instance" );

    bp::class_< StemCellProliferativeType >( "StemCellProliferativeType", bp::init< >() );

    bp::class_< UniformCellCycleModel_wrapper, boost::noncopyable >( "UniformCellCycleModel", bp::init< UniformCellCycleModel const & >(( bp::arg("rModel") )) )    
        .def( bp::init< >() )    
        .def( 
            "CreateCellCycleModel"
            , (::AbstractCellCycleModel * ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::CreateCellCycleModel)
            , (::AbstractCellCycleModel * ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_CreateCellCycleModel)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetAverageStemCellCycleTime"
            , (double ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::GetAverageStemCellCycleTime)
            , (double ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_GetAverageStemCellCycleTime) )    
        .def( 
            "GetAverageTransitCellCycleTime"
            , (double ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::GetAverageTransitCellCycleTime)
            , (double ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_GetAverageTransitCellCycleTime) )    
        .def( 
            "GetMaxCellCycleDuration"
            , (double ( ::UniformCellCycleModel::* )(  ))( &::UniformCellCycleModel::GetMaxCellCycleDuration ) )    
        .def( 
            "GetMinCellCycleDuration"
            , (double ( ::UniformCellCycleModel::* )(  ))( &::UniformCellCycleModel::GetMinCellCycleDuration ) )    
        .def( 
            "OutputCellCycleModelParameters"
            , (void ( ::UniformCellCycleModel::* )( ::out_stream & ))(&::UniformCellCycleModel::OutputCellCycleModelParameters)
            , (void ( UniformCellCycleModel_wrapper::* )( ::out_stream & ))(&UniformCellCycleModel_wrapper::default_OutputCellCycleModelParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )(  ))(&::UniformCellCycleModel::SetCellCycleDuration)
            , (void ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_SetCellCycleDuration) )    
        .def( 
            "SetMaxCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )( double ))( &::UniformCellCycleModel::SetMaxCellCycleDuration )
            , ( bp::arg("maxCellCycleDuration") ) )    
        .def( 
            "SetMinCellCycleDuration"
            , (void ( ::UniformCellCycleModel::* )( double ))( &::UniformCellCycleModel::SetMinCellCycleDuration )
            , ( bp::arg("minCellCycleDuration") ) )    
        .def( 
            "CanCellTerminallyDifferentiate"
            , (bool ( ::AbstractCellCycleModel::* )(  ))(&::AbstractCellCycleModel::CanCellTerminallyDifferentiate)
            , (bool ( UniformCellCycleModel_wrapper::* )(  ))(&UniformCellCycleModel_wrapper::default_CanCellTerminallyDifferentiate) )    
        .def( 
            "SetBirthTime"
            , (void ( ::AbstractCellCycleModel::* )( double ))(&::AbstractCellCycleModel::SetBirthTime)
            , (void ( UniformCellCycleModel_wrapper::* )( double ))(&UniformCellCycleModel_wrapper::default_SetBirthTime)
            , ( bp::arg("birthTime") ) );

    { //::Instantiation
    
        typedef int ( *Instantiation_function_type )(  );
        
        bp::def( 
            "Instantiation"
            , Instantiation_function_type( &::Instantiation ) );
    
    }
}
