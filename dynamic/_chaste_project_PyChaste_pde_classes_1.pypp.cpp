// This file has been generated by Py++.

#include "boost/python.hpp"
#include "/home/grogan/Chaste/projects/PyChaste/dynamic/wrapper_headers/pde_headers.hpp"
#include "_chaste_project_PyChaste_pde_classes_1.pypp.hpp"

namespace bp = boost::python;

struct AbstractBoundaryCondition_less__2__greater__wrapper : AbstractBoundaryCondition< 2 >, bp::wrapper< AbstractBoundaryCondition< 2 > > {

    AbstractBoundaryCondition_less__2__greater__wrapper( )
    : AbstractBoundaryCondition<2>( )
      , bp::wrapper< AbstractBoundaryCondition< 2 > >(){
        // null constructor
    
    }

    virtual double GetValue( ::ChastePoint< 2 > const & rX ) const {
        bp::override func_GetValue = this->get_override( "GetValue" );
        return func_GetValue( boost::ref(rX) );
    }

};

struct AbstractBoundaryCondition_less__3__greater__wrapper : AbstractBoundaryCondition< 3 >, bp::wrapper< AbstractBoundaryCondition< 3 > > {

    AbstractBoundaryCondition_less__3__greater__wrapper( )
    : AbstractBoundaryCondition<3>( )
      , bp::wrapper< AbstractBoundaryCondition< 3 > >(){
        // null constructor
    
    }

    virtual double GetValue( ::ChastePoint< 3 > const & rX ) const {
        bp::override func_GetValue = this->get_override( "GetValue" );
        return func_GetValue( boost::ref(rX) );
    }

};

void register_classes_1(){

    bp::class_< AbstractBoundaryCondition_less__2__greater__wrapper, boost::noncopyable >( "AbstractBoundaryCondition2", bp::init< >() )    
        .def( 
            "GetValue"
            , bp::pure_virtual( (double ( ::AbstractBoundaryCondition<2>::* )( ::ChastePoint< 2 > const & )const)(&::AbstractBoundaryCondition< 2 >::GetValue) )
            , ( bp::arg("rX") ) );

    bp::class_< AbstractBoundaryCondition_less__3__greater__wrapper, boost::noncopyable >( "AbstractBoundaryCondition3", bp::init< >() )    
        .def( 
            "GetValue"
            , bp::pure_virtual( (double ( ::AbstractBoundaryCondition<3>::* )( ::ChastePoint< 3 > const & )const)(&::AbstractBoundaryCondition< 3 >::GetValue) )
            , ( bp::arg("rX") ) );

}
